//U P2

//; SEGMENTS
//T S45ec84dfaab0 _lib_segment_nr_to_mask noload=0 abs=0
//T S325af6d6229a _lib_segment_led noload=0 abs=0
//T S38738b71c88c _lib_segment_edge noload=0 abs=0
//T Saed5ad4c4c92 _lib_segment_btn noload=0 abs=0
//T Sf0e9c0689ca5 _lib_segment_sw noload=0 abs=0

//; SYMBOLS
//L _nr_to_mask _nr_to_mask 00000000 S45ec84dfaab0 _
//L S45ec84dfaab0nr_to_mask_cyc nr_to_mask_cyc 00000003 s S45ec84dfaab0
//L S45ec84dfaab0nr_to_mask_ret nr_to_mask_ret 00000008 s S45ec84dfaab0
//L led_on led_on 0000000b S325af6d6229a _
//L led_off led_off 00000013 S325af6d6229a _
//L led_toggle led_toggle 0000001c S325af6d6229a _
//L led_set led_set 00000024 S325af6d6229a _
//L led_get led_get 00000032 S325af6d6229a _
//L S38738b71c88clast_btn last_btn 0000003b s S38738b71c88c
//L S38738b71c88clast_sw last_sw 0000003c s S38738b71c88c
//L S38738b71c88clast_btn_down last_btn_down 0000003d s S38738b71c88c
//L S38738b71c88clast_sw_down last_sw_down 0000003e s S38738b71c88c
//L S38738b71c88clast_btn_inited last_btn_inited 0000003f s S38738b71c88c
//L S38738b71c88clast_sw_inited last_sw_inited 00000040 s S38738b71c88c
//L _lib_edge_detect _lib_edge_detect 00000041 S38738b71c88c _
//L S38738b71c88cinit_btn init_btn 00000049 s S38738b71c88c
//L S38738b71c88cinit_sw init_sw 00000052 s S38738b71c88c
//L S38738b71c88cpressed_inited pressed_inited 0000005b s S38738b71c88c
//L S38738b71c88cch_btn ch_btn 0000005e s S38738b71c88c
//L S38738b71c88cch_sw ch_sw 00000061 s S38738b71c88c
//L S38738b71c88ccheck_push check_push 00000071 s S38738b71c88c
//L S38738b71c88ccheck_release check_release 00000074 s S38738b71c88c
//L S38738b71c88cpressed_true pressed_true 00000076 s S38738b71c88c
//L S38738b71c88cpressed_false pressed_false 00000078 s S38738b71c88c
//L S38738b71c88cpressed_end pressed_end 00000079 s S38738b71c88c
//L btn_restart btn_restart 0000007f S38738b71c88c _
//L sw_restart sw_restart 00000084 S38738b71c88c _
//L btn_posedge btn_posedge 00000089 Saed5ad4c4c92 _
//L btn_negedge btn_negedge 00000091 Saed5ad4c4c92 _
//L btn_get btn_get 00000099 Saed5ad4c4c92 _
//L sw_posedge sw_posedge 000000a2 Sf0e9c0689ca5 _
//L sw_negedge sw_negedge 000000aa Sf0e9c0689ca5 _
//L sw_get sw_get 000000b2 Sf0e9c0689ca5 _

//; CODE
//P -
//F bsp.asm
//P S45ec84dfaab0 _lib_segment_nr_to_mask
0d1d0000 //C 00000    26 push	r1
//G _nr_to_mask
010b001f //C 00001    27 btst	r0,0x1f		; max nr is 31
//I 00001 #16 0000001f
01120001 //C 00002    28 mvzl	r1,1		; mask for nr==0
//I 00002 #16 00000001
020b0000 //C 00003    30 sz	r0		; is nr zero?
//N nr_to_mask_cyc S45ec84dfaab0
11f20008 //C 00004    31 jz	nr_to_mask_ret	; if yes, go out
//R 00004 #16 nr_to_mask_ret 00000008
//I 00004 #16 00000008
02180000 //C 00005    32 shl	r1		; shift mask up
0104ffff //C 00006    33 dec	r0		; decrement nr
01f20003 //C 00007    34 jmp	nr_to_mask_cyc	; check for zero
//R 00007 #16 nr_to_mask_cyc 00000003
//I 00007 #16 00000003
00000100 //C 00008    36 mov	r0,r1		; return mask in R0
//N nr_to_mask_ret S45ec84dfaab0
0f1d0000 //C 00009    37 pop	r1
00f00e00 //C 0000a    38 ret
//P S325af6d6229a _lib_segment_led
0ded0000 //C 0000b    48 push	lr
//G led_on
0d1d0000 //C 0000c    49 push	r1
04000000 //C 0000d    50 call	_nr_to_mask
//R 0000d #24 _nr_to_mask 00000000
//I 0000d #24 00000000
07100000 //C 0000e    51 ld	r1,GPIO.LED
//R 0000e #16 GPIO.LED 00000000
//I 0000e #16 00000000
001d0000 //C 0000f    52 or	r1,r0
06100000 //C 00010    53 st	r1,GPIO.LED
//R 00010 #16 GPIO.LED 00000000
//I 00010 #16 00000000
0f1d0000 //C 00011    54 pop	r1
0ffd0000 //C 00012    55 pop	pc
0ded0000 //C 00013    60 push	lr
//G led_off
0d1d0000 //C 00014    61 push	r1
04000000 //C 00015    62 call	_nr_to_mask
//R 00015 #24 _nr_to_mask 00000000
//I 00015 #24 00000000
02040000 //C 00016    63 not	r0
07100000 //C 00017    64 ld	r1,GPIO.LED
//R 00017 #16 GPIO.LED 00000000
//I 00017 #16 00000000
001f0000 //C 00018    65 and	r1,r0
06100000 //C 00019    66 st	r1,GPIO.LED
//R 00019 #16 GPIO.LED 00000000
//I 00019 #16 00000000
0f1d0000 //C 0001a    67 pop	r1
0ffd0000 //C 0001b    68 pop	pc
0ded0000 //C 0001c    73 push	lr
//G led_toggle
0d1d0000 //C 0001d    74 push	r1
04000000 //C 0001e    75 call	_nr_to_mask
//R 0001e #24 _nr_to_mask 00000000
//I 0001e #24 00000000
07100000 //C 0001f    76 ld	r1,GPIO.LED
//R 0001f #16 GPIO.LED 00000000
//I 0001f #16 00000000
001e0000 //C 00020    77 xor	r1,r0
06100000 //C 00021    78 st	r1,GPIO.LED
//R 00021 #16 GPIO.LED 00000000
//I 00021 #16 00000000
0f1d0000 //C 00022    79 pop	r1
0ffd0000 //C 00023    80 pop	pc
0ded0000 //C 00024    86 push	lr
//G led_set
0d1d0000 //C 00025    87 push	r1
0d2d0000 //C 00026    88 push	r2
04000000 //C 00027    89 call	_nr_to_mask
//R 00027 #24 _nr_to_mask 00000000
//I 00027 #24 00000000
021b0000 //C 00028    90 sz	r1
20100000 //C 00029    91 NZ mov	r1,r0
02040000 //C 0002a    92 not	r0
07200000 //C 0002b    93 ld	r2,GPIO.LED
//R 0002b #16 GPIO.LED 00000000
//I 0002b #16 00000000
002f0000 //C 0002c    94 and	r2,r0
002d0100 //C 0002d    95 or	r2,r1
06200000 //C 0002e    96 st	r2,GPIO.LED
//R 0002e #16 GPIO.LED 00000000
//I 0002e #16 00000000
0f2d0000 //C 0002f    97 pop	r2
0f1d0000 //C 00030    98 pop	r1
0ffd0000 //C 00031    99 pop	pc
0ded0000 //C 00032   104 push	lr
//G led_get
0d1d0000 //C 00033   105 push	r1
04000000 //C 00034   106 call	_nr_to_mask
//R 00034 #24 _nr_to_mask 00000000
//I 00034 #24 00000000
07100000 //C 00035   107 ld	r1,GPIO.LED
//R 00035 #16 GPIO.LED 00000000
//I 00035 #16 00000000
001b0000 //C 00036   108 btst	r1,r0
120d0000 //C 00037   109 Z clc
220c0000 //C 00038   110 NZ sec
0f1d0000 //C 00039   111 pop	r1
0ffd0000 //C 0003a   112 pop	pc
//P S38738b71c88c _lib_segment_edge
00000000 //C 0003b   120 ds	1
//+ 00000001
//N last_btn S38738b71c88c
00000000 //C 0003c   122 ds	1
//+ 00000001
//N last_sw S38738b71c88c
00000000 //C 0003d   124 ds	1
//+ 00000001
//N last_btn_down S38738b71c88c
00000000 //C 0003e   126 ds	1
//+ 00000001
//N last_sw_down S38738b71c88c
00000000 //C 0003f   128 db	0
//I 0003f d8 00000000
//N last_btn_inited S38738b71c88c
00000000 //C 00040   130 db	0
//I 00040 d8 00000000
//N last_sw_inited S38738b71c88c
0ded0000 //C 00041   141 push	lr
//G _lib_edge_detect
0d1d0000 //C 00042   142 push	r1
0d2d0000 //C 00043   143 push	r2
0d3d0000 //C 00044   144 push	r3
0d4d0000 //C 00045   145 push	r4
0d5d0000 //C 00046   146 push	r5
00500100 //C 00047   148 mov	r5,r1		; what edge to check
31f20052 //C 00048   149 C jmp	init_sw
//R 00048 #16 init_sw 00000052
//I 00048 #16 00000052
0710003f //C 00049   151 ld	r1,last_btn_inited
//R 00049 #16 last_btn_inited 0000003f
//I 00049 #16 0000003f
//N init_btn S38738b71c88c
021b0000 //C 0004a   152 sz	r1
21f2005b //C 0004b   153 jnz	pressed_inited
//R 0004b #16 pressed_inited 0000005b
//I 0004b #16 0000005b
01120001 //C 0004c   154 mvzl	r1,1
//I 0004c #16 00000001
0610003f //C 0004d   155 st	r1,last_btn_inited
//R 0004d #16 last_btn_inited 0000003f
//I 0004d #16 0000003f
07100000 //C 0004e   156 ld	r1,GPIO.BTN
//R 0004e #16 GPIO.BTN 00000000
//I 0004e #16 00000000
0610003b //C 0004f   157 st	r1,last_btn
//R 0004f #16 last_btn 0000003b
//I 0004f #16 0000003b
0610003d //C 00050   158 st	r1,last_btn_down
//R 00050 #16 last_btn_down 0000003d
//I 00050 #16 0000003d
01f20078 //C 00051   159 jmp	pressed_false
//R 00051 #16 pressed_false 00000078
//I 00051 #16 00000078
07100040 //C 00052   161 ld	r1,last_sw_inited
//R 00052 #16 last_sw_inited 00000040
//I 00052 #16 00000040
//N init_sw S38738b71c88c
021b0000 //C 00053   162 sz	r1
21f2005b //C 00054   163 jnz	pressed_inited
//R 00054 #16 pressed_inited 0000005b
//I 00054 #16 0000005b
01120001 //C 00055   164 mvzl	r1,1
//I 00055 #16 00000001
06100040 //C 00056   165 st	r1,last_sw_inited
//R 00056 #16 last_sw_inited 00000040
//I 00056 #16 00000040
07100000 //C 00057   166 ld	r1,GPIO.SW
//R 00057 #16 GPIO.SW 00000000
//I 00057 #16 00000000
0610003c //C 00058   167 st	r1,last_sw
//R 00058 #16 last_sw 0000003c
//I 00058 #16 0000003c
0610003e //C 00059   168 st	r1,last_sw_down
//R 00059 #16 last_sw_down 0000003e
//I 00059 #16 0000003e
01f20078 //C 0005a   169 jmp	pressed_false
//R 0005a #16 pressed_false 00000078
//I 0005a #16 00000078
41220000 //C 0005b   173 NC mvzl	r2,GPIO.BTN
//R 0005b #16 GPIO.BTN 00000000
//I 0005b #16 00000000
//N pressed_inited S38738b71c88c
31220000 //C 0005c   174 C mvzl	r2,GPIO.SW
//R 0005c #16 GPIO.SW 00000000
//I 0005c #16 00000000
31f20061 //C 0005d   175 jc	ch_sw
//R 0005d #16 ch_sw 00000061
//I 0005d #16 00000061
025b0000 //C 0005e   177 sz	r5
//N ch_btn S38738b71c88c
1112003b //C 0005f   178 Z mvzl	r1,last_btn
//R 0005f #16 last_btn 0000003b
//I 0005f #16 0000003b
2112003d //C 00060   179 NZ mvzl	r1,last_btn_down
//R 00060 #16 last_btn_down 0000003d
//I 00060 #16 0000003d
025b0000 //C 00061   181 sz	r5
//N ch_sw S38738b71c88c
1112003c //C 00062   182 Z mvzl	r1,last_sw
//R 00062 #16 last_sw 0000003c
//I 00062 #16 0000003c
2112003e //C 00063   183 NZ mvzl	r1,last_sw_down
//R 00063 #16 last_sw_down 0000003e
//I 00063 #16 0000003e
0e310000 //C 00064   187 ld	r3,r1
0e420000 //C 00065   188 ld	r4,r2
003f0000 //C 00066   190 and	r3,r0		; masked last
004f0000 //C 00067   191 and	r4,r0		; masked port
00380400 //C 00068   192 cmp	r3,r4
11f20078 //C 00069   193 EQ jmp	pressed_false
//R 00069 #16 pressed_false 00000078
//I 00069 #16 00000078
02040000 //C 0006a   194 not	r0		; negated mask
0e310000 //C 0006b   195 ld	r3,r1		; original last
003f0000 //C 0006c   196 and	r3,r0		; clear checked bit
003d0400 //C 0006d   197 or	r3,r4		; or with masked port
0c310000 //C 0006e   198 st	r3,r1		; store new last value
025b0000 //C 0006f   199 sz	r5
21f20074 //C 00070   200 jnz	check_release
//R 00070 #16 check_release 00000074
//I 00070 #16 00000074
024b0000 //C 00071   202 sz	r4		; check new port value
//N check_push S38738b71c88c
11f20078 //C 00072   203 jz	pressed_false
//R 00072 #16 pressed_false 00000078
//I 00072 #16 00000078
21f20076 //C 00073   204 jnz	pressed_true
//R 00073 #16 pressed_true 00000076
//I 00073 #16 00000076
024b0000 //C 00074   206 sz	r4
//N check_release S38738b71c88c
21f20078 //C 00075   207 jnz	pressed_false
//R 00075 #16 pressed_false 00000078
//I 00075 #16 00000078
020c0000 //C 00076   210 sec
//N pressed_true S38738b71c88c
01f20079 //C 00077   211 jmp	pressed_end
//R 00077 #16 pressed_end 00000079
//I 00077 #16 00000079
020d0000 //C 00078   213 clc
//N pressed_false S38738b71c88c
0f5d0000 //C 00079   215 pop	r5
//N pressed_end S38738b71c88c
0f4d0000 //C 0007a   216 pop	r4
0f3d0000 //C 0007b   217 pop	r3
0f2d0000 //C 0007c   218 pop	r2
0f1d0000 //C 0007d   219 pop	r1
0ffd0000 //C 0007e   220 pop	pc
0d1d0000 //C 0007f   225 push	r1
//G btn_restart
07100000 //C 00080   226 ld	r1,GPIO.BTN
//R 00080 #16 GPIO.BTN 00000000
//I 00080 #16 00000000
0610003b //C 00081   227 st	r1,last_btn
//R 00081 #16 last_btn 0000003b
//I 00081 #16 0000003b
0f1d0000 //C 00082   228 pop	r1
00f00e00 //C 00083   229 ret
0d1d0000 //C 00084   233 push	r1
//G sw_restart
07100000 //C 00085   234 ld	r1,GPIO.SW
//R 00085 #16 GPIO.SW 00000000
//I 00085 #16 00000000
0610003c //C 00086   235 st	r1,last_sw
//R 00086 #16 last_sw 0000003c
//I 00086 #16 0000003c
0f1d0000 //C 00087   236 pop	r1
00f00e00 //C 00088   237 ret
//P Saed5ad4c4c92 _lib_segment_btn
0ded0000 //C 00089   250 push	lr
//G btn_posedge
04000000 //C 0008a   251 call	_nr_to_mask
//R 0008a #24 _nr_to_mask 00000000
//I 0008a #24 00000000
0d1d0000 //C 0008b   252 push	r1
01120000 //C 0008c   253 mvzl	r1,0
//I 0008c #16 00000000
020d0000 //C 0008d   254 clc
04000041 //C 0008e   255 call	_lib_edge_detect
//R 0008e #24 _lib_edge_detect 00000041
//I 0008e #24 00000041
0f1d0000 //C 0008f   256 pop	r1
0ffd0000 //C 00090   257 pop	pc
0ded0000 //C 00091   266 push	lr
//G btn_negedge
04000000 //C 00092   267 call	_nr_to_mask
//R 00092 #24 _nr_to_mask 00000000
//I 00092 #24 00000000
0d1d0000 //C 00093   268 push	r1
01120001 //C 00094   269 mvzl	r1,1
//I 00094 #16 00000001
020d0000 //C 00095   270 clc
04000041 //C 00096   271 call	_lib_edge_detect
//R 00096 #24 _lib_edge_detect 00000041
//I 00096 #24 00000041
0f1d0000 //C 00097   272 pop	r1
0ffd0000 //C 00098   273 pop	pc
0ded0000 //C 00099   282 push	lr
//G btn_get
0d1d0000 //C 0009a   283 push	r1
04000000 //C 0009b   284 call	_nr_to_mask
//R 0009b #24 _nr_to_mask 00000000
//I 0009b #24 00000000
07100000 //C 0009c   285 ld	r1,GPIO.BTN
//R 0009c #16 GPIO.BTN 00000000
//I 0009c #16 00000000
001f0000 //C 0009d   286 and	r1,r0
120d0000 //C 0009e   287 Z clc
220c0000 //C 0009f   288 NZ sec
0f1d0000 //C 000a0   289 pop	r1
0ffd0000 //C 000a1   290 pop	pc
//P Sf0e9c0689ca5 _lib_segment_sw
0ded0000 //C 000a2   302 push	lr
//G sw_posedge
04000000 //C 000a3   303 call	_nr_to_mask
//R 000a3 #24 _nr_to_mask 00000000
//I 000a3 #24 00000000
0d1d0000 //C 000a4   304 push	r1
01120000 //C 000a5   305 mvzl	r1,0
//I 000a5 #16 00000000
020c0000 //C 000a6   306 sec
04000041 //C 000a7   307 call	_lib_edge_detect
//R 000a7 #24 _lib_edge_detect 00000041
//I 000a7 #24 00000041
0f1d0000 //C 000a8   308 pop	r1
0ffd0000 //C 000a9   309 pop	pc
0ded0000 //C 000aa   318 push	lr
//G sw_negedge
04000000 //C 000ab   319 call	_nr_to_mask
//R 000ab #24 _nr_to_mask 00000000
//I 000ab #24 00000000
0d1d0000 //C 000ac   320 push	r1
01120001 //C 000ad   321 mvzl	r1,1
//I 000ad #16 00000001
020c0000 //C 000ae   322 sec
04000041 //C 000af   323 call	_lib_edge_detect
//R 000af #24 _lib_edge_detect 00000041
//I 000af #24 00000041
0f1d0000 //C 000b0   324 pop	r1
0ffd0000 //C 000b1   325 pop	pc
0ded0000 //C 000b2   334 push	lr
//G sw_get
0d1d0000 //C 000b3   335 push	r1
04000000 //C 000b4   336 call	_nr_to_mask
//R 000b4 #24 _nr_to_mask 00000000
//I 000b4 #24 00000000
07100000 //C 000b5   337 ld	r1,GPIO.SW
//R 000b5 #16 GPIO.SW 00000000
//I 000b5 #16 00000000
001f0000 //C 000b6   338 and	r1,r0
120d0000 //C 000b7   339 Z clc
220c0000 //C 000b8   340 NZ sec
0f1d0000 //C 000b9   341 pop	r1
0ffd0000 //C 000ba   342 pop	pc
//H c9f93eaf
//E
