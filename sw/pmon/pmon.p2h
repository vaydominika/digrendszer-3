//U P2

//; SEGMENTS

//; SYMBOLS
//= version_main version_main 00000001 - _
//= version_sub version_sub 00000002 - _
//= IO_BEGIN IO_BEGIN 0000ff00 - _
//= UART_DR UART_DR 0000ff40 - _
//= UART_CTRL UART_CTRL 0000ff41 - _
//= UART_RSTAT UART_RSTAT 0000ff42 - _
//= UART_TSTAT UART_TSTAT 0000ff43 - _
//= UART_CPB UART_CPB 0000ff44 - _
//= UART_QUEUE UART_QUEUE 0000ff45 - _
//= UART_IRA UART_IRA 0000ff46 - _
//= GPIO_PORTA GPIO_PORTA 0000ff00 - _
//= GPIO_PORTI GPIO_PORTI 0000ff20 - _
//= IO_END IO_END 0000ffff - _
//= SIMIF SIMIF 0000ffff - _
//= LF LF 0000000a - _
//= CR CR 0000000d - _
//= MAX_WORDS MAX_WORDS 00000005 - _
//L the_begin the_begin 0000f000 - _
//L _f000 _f000 0000f000 - _
//L _f001 _f001 0000f001 - _
//L _f002 _f002 0000f002 - _
//L _f003 _f003 0000f003 - _
//L _f004 _f004 0000f004 - _
//L _f005 _f005 0000f005 - _
//L _f006 _f006 0000f006 - _
//L _f007 _f007 0000f007 - _
//L _f008 _f008 0000f008 - _
//L _f009 _f009 0000f009 - _
//L _f00a _f00a 0000f00a - _
//L _f00b _f00b 0000f00b - _
//L _f00c _f00c 0000f00c - _
//L _f00d _f00d 0000f00d - _
//L _f00e _f00e 0000f00e - _
//L _f00f _f00f 0000f00f - _
//L _f010 _f010 0000f010 - _
//L _f011 _f011 0000f011 - _
//L _f012 _f012 0000f012 - _
//L _f013 _f013 0000f013 - _
//L _f014 _f014 0000f014 - _
//L _f015 _f015 0000f015 - _
//L _f016 _f016 0000f016 - _
//L enter_by_uart enter_by_uart 0000f017 - _
//L ebu_return ebu_return 0000f01d - _
//L ebu_callin ebu_callin 0000f021 - _
//L callin callin 0000f026 - _
//L hot_start hot_start 0000f03b - _
//L def_zero def_zero 0000f03c - _
//L cold_start cold_start 0000f03d - _
//L common_start common_start 0000f047 - _
//L wait_uart_tr wait_uart_tr 0000f04f - _
//L tr_is_off tr_is_off 0000f052 - _
//L no_called_from no_called_from 0000f06a - _
//L setup_line setup_line 0000f06c - _
//L main main 0000f075 - _
//L line_ready line_ready 0000f07a - _
//L no_line no_line 0000f07c - _
//L no_input no_input 0000f07c - _
//L proc_input proc_input 0000f07d - _
//L got_BS got_BS 0000f087 - _
//L got_DEL got_DEL 0000f087 - _
//L got_done got_done 0000f091 - _
//L got_char got_char 0000f093 - _
//L got_eol got_eol 0000f0a8 - _
//L proc_input_ret proc_input_ret 0000f0ad - _
//L proc_line proc_line 0000f0ae - _
//L cmd_found cmd_found 0000f0b7 - _
//L cmd_not_found cmd_not_found 0000f0b9 - _
//L proc_line_ret proc_line_ret 0000f0bb - _
//L sdummy1 sdummy1 0000f0be - _
//L snotfound snotfound 0000f0c3 - _
//L is_delimiter is_delimiter 0000f0d3 - _
//L tokenize tokenize 0000f0d7 - _
//L tok_cycle tok_cycle 0000f0dc - _
//L tok_neol tok_neol 0000f0df - _
//L tok_char tok_char 0000f0e1 - _
//L tok_delimiter tok_delimiter 0000f0e8 - _
//L tok_next tok_next 0000f0ed - _
//L tok_ret tok_ret 0000f0f1 - _
//L tok_end tok_end 0000f0f6 - _
//L find_cmd find_cmd 0000f0f7 - _
//L find_rx_1015 find_rx_1015 0000f10b - _
//L find_rx_09 find_rx_09 0000f115 - _
//L find_rx find_rx 0000f117 - _
//L find_not_rx find_not_rx 0000f11a - _
//L find_cmd_cyc find_cmd_cyc 0000f11b - _
//L find_cmd_fw find_cmd_fw 0000f120 - _
//L find_cmd_true find_cmd_true 0000f127 - _
//L c_cmd_name c_cmd_name 0000f12a - _
//L find_cmd_false find_cmd_false 0000f12e - _
//L find_cmd_very_false find_cmd_very_false 0000f137 - _
//L find_cmd_ret find_cmd_ret 0000f139 - _
//L cmd_m cmd_m 0000f13e - _
//L m_addr_ok m_addr_ok 0000f14c - _
//L m_write m_write 0000f14e - _
//L m_addrv_nok m_addrv_nok 0000f155 - _
//L m_addrv_ok m_addrv_ok 0000f158 - _
//L m_value_ok m_value_ok 0000f15f - _
//L m_read m_read 0000f160 - _
//L m_ret m_ret 0000f16a - _
//L m_err_addr m_err_addr 0000f16b - _
//L m_err_addrv m_err_addrv 0000f179 - _
//L m_err_value m_err_value 0000f18b - _
//L cmd_sm cmd_sm 0000f197 - _
//L sm_addr_ok sm_addr_ok 0000f1a5 - _
//L sm_write sm_write 0000f1a7 - _
//L sm_addrv_nok sm_addrv_nok 0000f1ae - _
//L sm_addrv_ok sm_addrv_ok 0000f1b1 - _
//L sm_value_ok sm_value_ok 0000f1b8 - _
//L sm_ret sm_ret 0000f1b9 - _
//L cmd_d cmd_d 0000f1ba - _
//L d_end_ok d_end_ok 0000f1c5 - _
//L d_chk_end d_chk_end 0000f1c7 - _
//L d_cyc d_cyc 0000f1c9 - _
//L d_bad d_bad 0000f1d7 - _
//L d_ret d_ret 0000f1d9 - _
//L d_err_bad d_err_bad 0000f1da - _
//L cmd_c cmd_c 0000f1ec - _
//L cmd_l cmd_l 0000f1ed - _
//L l_cyc l_cyc 0000f1f2 - _
//L l_start l_start 0000f1f5 - _
//L l_state_0 l_state_0 0000f1fc - _
//L l_eof_0 l_eof_0 0000f205 - _
//L l_no0 l_no0 0000f20b - _
//L l_state_1 l_state_1 0000f20d - _
//L l_s1_1st l_s1_1st 0000f20f - _
//L l_s1_2nd l_s1_2nd 0000f213 - _
//L l_s1_C l_s1_C 0000f219 - _
//L l_s1_noC l_s1_noC 0000f21e - _
//L l_s1_E l_s1_E 0000f220 - _
//L l_s1_noE l_s1_noE 0000f223 - _
//L l_no1 l_no1 0000f226 - _
//L l_state_2 l_state_2 0000f228 - _
//L l_s2_0 l_s2_0 0000f22a - _
//L l_s2_got l_s2_got 0000f22d - _
//L l_s2_eos l_s2_eos 0000f233 - _
//L l_s2_no0 l_s2_no0 0000f234 - _
//L l_s2_1 l_s2_1 0000f236 - _
//L l_s2_no1 l_s2_no1 0000f23a - _
//L l_no2 l_no2 0000f23b - _
//L l_state_3 l_state_3 0000f23d - _
//L l_no3 l_no3 0000f23e - _
//L l_nof l_nof 0000f241 - _
//L l_eol l_eol 0000f243 - _
//L l_bad l_bad 0000f24e - _
//L l_proc l_proc 0000f24f - _
//L l_back_to_0 l_back_to_0 0000f257 - _
//L l_ret l_ret 0000f25b - _
//L cmd_g cmd_g 0000f263 - _
//L g_go11 g_go11 0000f26a - _
//L g_go g_go 0000f272 - _
//L g_wait_tc g_wait_tc 0000f273 - _
//L g_no_addr g_no_addr 0000f28a - _
//L g_err g_err 0000f28f - _
//L g_ret g_ret 0000f291 - _
//L g_err_addr g_err_addr 0000f292 - _
//L d_msg_run d_msg_run 0000f29d - _
//L cmd_h cmd_h 0000f2a2 - _
//L h_cyc h_cyc 0000f2a5 - _
//L h_eos h_eos 0000f2a8 - _
//L h_print h_print 0000f2ab - _
//L h_eof h_eof 0000f2ad - _
//L print_reg_name print_reg_name 0000f2ae - _
//L prn_16 prn_16 0000f2b5 - _
//L prn_015 prn_015 0000f2bb - _
//L prn_PC prn_PC 0000f2c0 - _
//L prn_no15 prn_no15 0000f2c4 - _
//L prn_LR prn_LR 0000f2c9 - _
//L prn_no14 prn_no14 0000f2cd - _
//L prn_SP prn_SP 0000f2d2 - _
//L prn_no13 prn_no13 0000f2d6 - _
//L prn_09 prn_09 0000f2da - _
//L prn_1015 prn_1015 0000f2e0 - _
//L prn_ret prn_ret 0000f2e6 - _
//L print_reg_value print_reg_value 0000f2e8 - _
//L prv_ret prv_ret 0000f2f0 - _
//L print_reg_name_value print_reg_name_value 0000f2f2 - _
//L print_flag print_flag 0000f300 - _
//L cmd_r cmd_r 0000f309 - _
//L r_called r_called 0000f30d - _
//L r_not_called r_not_called 0000f315 - _
//L r_start r_start 0000f317 - _
//L r_cyc r_cyc 0000f318 - _
//L r_flags r_flags 0000f31c - _
//L msg_r_called msg_r_called 0000f332 - _
//L msg_r_notcalled msg_r_notcalled 0000f348 - _
//L cmd_rx cmd_rx 0000f364 - _
//L rx_err_nr rx_err_nr 0000f36b - _
//L rx_nr_ok rx_nr_ok 0000f37c - _
//L rx_err_val rx_err_val 0000f387 - _
//L rx_val_ok rx_val_ok 0000f393 - _
//L rx_print rx_print 0000f397 - _
//L rx_ret rx_ret 0000f398 - _
//L cmd_sp cmd_sp 0000f399 - _
//L cmd_lr cmd_lr 0000f39c - _
//L cmd_pc cmd_pc 0000f39f - _
//L cmd_f cmd_f 0000f3a2 - _
//L strchr strchr 0000f3a5 - _
//L strchr_cyc strchr_cyc 0000f3a7 - _
//L strchr_go strchr_go 0000f3ab - _
//L strchr_byte strchr_byte 0000f3b0 - _
//L strchr_word strchr_word 0000f3b3 - _
//L strchr_yes strchr_yes 0000f3b5 - _
//L strchr_no strchr_no 0000f3b7 - _
//L strchr_ret strchr_ret 0000f3b9 - _
//L str_cmp_eq str_cmp_eq 0000f3bc - _
//L streq_cyc streq_cyc 0000f3c6 - _
//L streq_p1nov streq_p1nov 0000f3cf - _
//L streq_p1ov streq_p1ov 0000f3d3 - _
//L streq_pick2 streq_pick2 0000f3d7 - _
//L streq_p2nov streq_p2nov 0000f3e0 - _
//L streq_p2ov streq_p2ov 0000f3e4 - _
//L streq_prep streq_prep 0000f3e8 - _
//L streq_next streq_next 0000f3fe - _
//L streq_no streq_no 0000f407 - _
//L streq_yes streq_yes 0000f409 - _
//L streq_ret streq_ret 0000f40a - _
//L streq_ret_ret streq_ret_ret 0000f40f - _
//L streq streq 0000f417 - _
//L strieq strieq 0000f41f - _
//L hexchar2value hexchar2value 0000f427 - _
//L hc2v_a_f hc2v_a_f 0000f434 - _
//L hc2v_A_F hc2v_A_F 0000f437 - _
//L hc2v_0_9 hc2v_0_9 0000f43a - _
//L hc2v_ok hc2v_ok 0000f43b - _
//L hc2v_nok hc2v_nok 0000f43d - _
//L value2Hexchar value2Hexchar 0000f43f - _
//L v2hc_table v2hc_table 0000f445 - _
//L value2hexchar value2hexchar 0000f456 - _
//L htoi htoi 0000f45a - _
//L htoi_cyc htoi_cyc 0000f461 - _
//L htoi_byte htoi_byte 0000f465 - _
//L htoi_next htoi_next 0000f47a - _
//L htoi_nok htoi_nok 0000f47e - _
//L htoi_eos htoi_eos 0000f480 - _
//L htoi_ret htoi_ret 0000f483 - _
//L check_uart check_uart 0000f488 - _
//L read read 0000f490 - _
//L getchar getchar 0000f493 - _
//L putchar putchar 0000f497 - _
//L wait_tc wait_tc 0000f498 - _
//L putchar_ret putchar_ret 0000f49c - _
//L prints prints 0000f49e - _
//L prints_go prints_go 0000f4a9 - _
//L prints_byte prints_byte 0000f4ad - _
//L prints_done prints_done 0000f4b5 - _
//L pes_ret_to pes_ret_to 0000f4bc - _
//L pes pes 0000f4bd - _
//L pes_next pes_next 0000f4c3 - _
//L pes_byte pes_byte 0000f4c8 - _
//L pes_done pes_done 0000f4d0 - _
//L printsnl printsnl 0000f4d7 - _
//L print_vhex print_vhex 0000f4de - _
//L print_vhex_cyc print_vhex_cyc 0000f4e7 - _
//L print_vhex_nosep print_vhex_nosep 0000f4fc - _
//L print_vhex_ret print_vhex_ret 0000f4fe - _
//L div div 0000f504 - _
//L div_dok div_dok 0000f50b - _
//L div_cyc div_cyc 0000f50f - _
//L div_cyc_next div_cyc_next 0000f51a - _
//L div_ret div_ret 0000f51c - _
//L itoa itoa 0000f51e - _
//L itoa_cyc itoa_cyc 0000f529 - _
//L itoa_fno0 itoa_fno0 0000f531 - _
//L itoa_store itoa_store 0000f532 - _
//L itoa_next itoa_next 0000f538 - _
//L itoa_f0 itoa_f0 0000f53b - _
//L itoa_ret itoa_ret 0000f53e - _
//L itoa_buffer itoa_buffer 0000f546 - _
//L itoa_divs itoa_divs 0000f551 - _
//L itobcd itobcd 0000f55c - _
//L itobcd_cyc itobcd_cyc 0000f564 - _
//L itobcd_bad itobcd_bad 0000f56f - _
//L itobcd_ret itobcd_ret 0000f570 - _
//L printd printd 0000f573 - _
//L printf printf 0000f578 - _
//L printf_cyc printf_cyc 0000f58b - _
//L printf_l2 printf_l2 0000f596 - _
//L printf_l1 printf_l1 0000f59b - _
//L printf_notescape printf_notescape 0000f5bd - _
//L printf_l4 printf_l4 0000f5c2 - _
//L printf_l3 printf_l3 0000f5c7 - _
//L printf_d printf_d 0000f5d1 - _
//L printf_notd printf_notd 0000f5d5 - _
//L printf_x printf_x 0000f5d7 - _
//L printf_notx printf_notx 0000f5de - _
//L printf_s printf_s 0000f5e0 - _
//L printf_nots printf_nots 0000f5e4 - _
//L printf_notc printf_notc 0000f5ea - _
//L printf_print printf_print 0000f5eb - _
//L printf_next printf_next 0000f5ec - _
//L printf_nextword printf_nextword 0000f5ef - _
//L printf_ret printf_ret 0000f5f2 - _
//L pesf pesf 0000f5f6 - _
//L version version 0000f5ff - _
//L ascii2seg ascii2seg 0000f605 - _
//L line line 0000f60f - _
//L line_ptr line_ptr 0000f673 - _
//L at_eol at_eol 0000f674 - _
//L words words 0000f675 - _
//L echo echo 0000f67a - _
//L called called 0000f67b - _
//L nuof_reg nuof_reg 0000f67c - _
//L reg0 reg0 0000f67d - _
//L reg1 reg1 0000f67e - _
//L reg2 reg2 0000f67f - _
//L reg3 reg3 0000f680 - _
//L reg4 reg4 0000f681 - _
//L reg5 reg5 0000f682 - _
//L reg6 reg6 0000f683 - _
//L reg7 reg7 0000f684 - _
//L reg8 reg8 0000f685 - _
//L reg9 reg9 0000f686 - _
//L reg10 reg10 0000f687 - _
//L reg11 reg11 0000f688 - _
//L reg12 reg12 0000f689 - _
//L reg13 reg13 0000f68a - _
//L reg14 reg14 0000f68b - _
//L reg15 reg15 0000f68c - _
//L regf regf 0000f68d - _
//L msg_start msg_start 0000f68e - _
//L msg_stopat msg_stopat 0000f6af - _
//L msg_BS msg_BS 0000f6b9 - _
//L prompt prompt 0000f6bd - _
//L delimiters delimiters 0000f6bf - _
//L null_str null_str 0000f6c8 - _
//L sc_active sc_active 0000f6cf - _
//L sc_ptr sc_ptr 0000f6d0 - _
//L sc_buffer sc_buffer 0000f6d1 - _
//L commands commands 0000f6db - _
//L helps helps 0000f730 - _
//L ascii2seg_table ascii2seg_table 0000f8a0 - _
//L stack stack 0000f8c0 - _
//L stack_end stack_end 0000f900 - _
//L the_end the_end 0000f901 - _

//; CODE
//P -
//F pmon.asm
01f2f03d //C 00000    24 jmp	cold_start
//R 00000 #16 cold_start 0000f03d
01f2f026 //C 0f000    29 _f000:	jmp	callin
//R 0f000 #16 callin 0000f026
//G the_begin
//G _f000
01f2f017 //C 0f001    30 _f001:	jmp	enter_by_uart
//R 0f001 #16 enter_by_uart 0000f017
//G _f001
01f2f493 //C 0f002    31 _f002:	jmp	getchar
//R 0f002 #16 getchar 0000f493
//G _f002
01f2f5ff //C 0f003    32 _f003:	jmp	version
//R 0f003 #16 version 0000f5ff
//G _f003
01f2f55c //C 0f004    33 _f004:	jmp	itobcd
//R 0f004 #16 itobcd 0000f55c
//G _f004
01f2f03d //C 0f005    34 _f005:	jmp	cold_start
//R 0f005 #16 cold_start 0000f03d
//G _f005
01f2f3a5 //C 0f006    35 _f006:	jmp	strchr
//R 0f006 #16 strchr 0000f3a5
//G _f006
01f2f417 //C 0f007    36 _f007:	jmp	streq
//R 0f007 #16 streq 0000f417
//G _f007
01f2f488 //C 0f008    37 _f008:	jmp	check_uart
//R 0f008 #16 check_uart 0000f488
//G _f008
01f2f427 //C 0f009    38 _f009:	jmp	hexchar2value
//R 0f009 #16 hexchar2value 0000f427
//G _f009
01f2f456 //C 0f00a    39 _f00a:	jmp	value2hexchar
//R 0f00a #16 value2hexchar 0000f456
//G _f00a
01f2f45a //C 0f00b    40 _f00b:	jmp	htoi
//R 0f00b #16 htoi 0000f45a
//G _f00b
01f2f41f //C 0f00c    41 _f00c:	jmp	strieq
//R 0f00c #16 strieq 0000f41f
//G _f00c
01f2f490 //C 0f00d    42 _f00d:	jmp	read
//R 0f00d #16 read 0000f490
//G _f00d
01f2f497 //C 0f00e    43 _f00e:	jmp	putchar
//R 0f00e #16 putchar 0000f497
//G _f00e
01f2f49e //C 0f00f    44 _f00f:	jmp	prints
//R 0f00f #16 prints 0000f49e
//G _f00f
01f2f4d7 //C 0f010    45 _f010:	jmp	printsnl
//R 0f010 #16 printsnl 0000f4d7
//G _f010
01f2f4de //C 0f011    46 _f011:	jmp	print_vhex
//R 0f011 #16 print_vhex 0000f4de
//G _f011
01f2f4bd //C 0f012    47 _f012:	jmp	pes
//R 0f012 #16 pes 0000f4bd
//G _f012
01f2f573 //C 0f013    48 _f013:	jmp	printd
//R 0f013 #16 printd 0000f573
//G _f013
01f2f578 //C 0f014    49 _f014:	jmp	printf
//R 0f014 #16 printf 0000f578
//G _f014
01f2f5f6 //C 0f015    50 _f015:	jmp	pesf
//R 0f015 #16 pesf 0000f5f6
//G _f015
01f2f605 //C 0f016    51 _f016:	jmp	ascii2seg
//R 0f016 #16 ascii2seg 0000f605
//G _f016
0d0d0000 //C 0f017    54 push	r0
//G enter_by_uart
020e0000 //C 0f018    55 getf	r0
0d0d0000 //C 0f019    56 push	r0
0700ff42 //C 0f01a    57 ld	r0,UART_RSTAT
//R 0f01a #16 UART_RSTAT 0000ff42
010c0001 //C 0f01b    58 test	r0,1
21f2f021 //C 0f01c    59 jnz	ebu_callin
//R 0f01c #16 ebu_callin 0000f021
0f0d0000 //C 0f01d    61 pop	r0
//G ebu_return
020f0000 //C 0f01e    62 setf	r0
0f0d0000 //C 0f01f    63 pop	r0
00f00e00 //C 0f020    64 ret
0700ff40 //C 0f021    66 ld	r0,UART_DR
//R 0f021 #16 UART_DR 0000ff40
//G ebu_callin
0f0d0000 //C 0f022    67 pop	r0
020f0000 //C 0f023    68 setf	r0
0f0d0000 //C 0f024    69 pop	r0
01f2f026 //C 0f025    70 jmp	callin
//R 0f025 #16 callin 0000f026
0600f67d //C 0f026    73 st	r0,reg0
//R 0f026 #16 reg0 0000f67d
//G callin
0610f67e //C 0f027    74 st	r1,reg1
//R 0f027 #16 reg1 0000f67e
0620f67f //C 0f028    75 st	r2,reg2
//R 0f028 #16 reg2 0000f67f
0630f680 //C 0f029    76 st	r3,reg3
//R 0f029 #16 reg3 0000f680
0640f681 //C 0f02a    77 st	r4,reg4
//R 0f02a #16 reg4 0000f681
0650f682 //C 0f02b    78 st	r5,reg5
//R 0f02b #16 reg5 0000f682
0660f683 //C 0f02c    79 st	r6,reg6
//R 0f02c #16 reg6 0000f683
0670f684 //C 0f02d    80 st	r7,reg7
//R 0f02d #16 reg7 0000f684
0680f685 //C 0f02e    81 st	r8,reg8
//R 0f02e #16 reg8 0000f685
0690f686 //C 0f02f    82 st	r9,reg9
//R 0f02f #16 reg9 0000f686
06a0f687 //C 0f030    83 st	r10,reg10
//R 0f030 #16 reg10 0000f687
06b0f688 //C 0f031    84 st	r11,reg11
//R 0f031 #16 reg11 0000f688
06c0f689 //C 0f032    85 st	r12,reg12
//R 0f032 #16 reg12 0000f689
06d0f68a //C 0f033    86 st	r13,reg13
//R 0f033 #16 reg13 0000f68a
06e0f68b //C 0f034    87 st	r14,reg14
//R 0f034 #16 reg14 0000f68b
06e0f68c //C 0f035    88 st	r14,reg15
//R 0f035 #16 reg15 0000f68c
020e0000 //C 0f036    89 getf	r0
0600f68d //C 0f037    90 st	r0,regf
//R 0f037 #16 regf 0000f68d
01020001 //C 0f038    91 mvzl	r0,1
0600f67b //C 0f039    92 st	r0,called
//R 0f039 #16 called 0000f67b
01f2f047 //C 0f03a    93 jmp	common_start
//R 0f03a #16 common_start 0000f047
01f2f047 //C 0f03b    95 jmp	common_start
//R 0f03b #16 common_start 0000f047
//G hot_start
01f2f03d //C 0f03c    97 jmp	cold_start
//R 0f03c #16 cold_start 0000f03d
//G def_zero
01020000 //C 0f03d    99 mvzl	r0,0
//G cold_start
0600f67b //C 0f03e   100 st	r0,called
//R 0f03e #16 called 0000f67b
0102f03c //C 0f03f   101 mvzl	r0,def_zero	; restore jmp to monitor at zero
//R 0f03f #16 def_zero 0000f03c
0e000000 //C 0f040   102 ld	r0,r0
06000000 //C 0f041   103 st	r0,0
01020000 //C 0f042   104 mvzl	r0,0		; def values of some regs
0600f68d //C 0f043   105 st	r0,regf		; FALGS= 0
//R 0f043 #16 regf 0000f68d
0102f7ff //C 0f044   106 mvzl	r0,0xf7ff	; R13= 0xf7ff
0600f68a //C 0f045   107 st	r0,reg13
//R 0f045 #16 reg13 0000f68a
01f2f047 //C 0f046   108 jmp	common_start
//R 0f046 #16 common_start 0000f047
01d2f900 //C 0f047   111 mvzl	sp,stack_end
//R 0f047 #16 stack_end 0000f900
//G common_start
01020001 //C 0f048   112 mvzl	r0,1
0600f67a //C 0f049   113 st	r0,echo
//R 0f049 #16 echo 0000f67a
01020000 //C 0f04a   114 mvzl	r0,0
020f0000 //C 0f04b   115 setf	r0
0710ff41 //C 0f04c   120 ld	r1,UART_CTRL	; check if transmit is enabled
//R 0f04c #16 UART_CTRL 0000ff41
011c0002 //C 0f04d   121 test	r1,2
11f2f052 //C 0f04e   122 jz	tr_is_off
//R 0f04e #16 tr_is_off 0000f052
0710ff43 //C 0f04f   124 ld	r1,UART_TSTAT	; if transmit is ongoing
//R 0f04f #16 UART_TSTAT 0000ff43
//G wait_uart_tr
011c0001 //C 0f050   125 test	r1,1		; wait it to finish
11f2f04f //C 0f051   126 jz	wait_uart_tr
//R 0f051 #16 wait_uart_tr 0000f04f
01120003 //C 0f052   128 mvzl	r1,3		; turn on rx and tx
//G tr_is_off
0610ff41 //C 0f053   129 st	r1,UART_CTRL
//R 0f053 #16 UART_CTRL 0000ff41
0102000a //C 0f054   132 mvzl	r0,LF
//R 0f054 #16 LF 0000000a
0400f497 //C 0f055   133 call	putchar
//R 0f055 #24 putchar 0000f497
06020100 //C 0f056   134 rds	r0,sver
01120001 //C 0f057   135 mvzl	r1,version_main
//R 0f057 #16 version_main 00000001
01220002 //C 0f058   136 mvzl	r2,version_sub
//R 0f058 #16 version_sub 00000002
0631c002 //C 0f059   137 getbz	r3,r0,2
0641c001 //C 0f05a   138 getbz	r4,r0,1
0651c000 //C 0f05b   139 getbz	r5,r0,0
0102f68e //C 0f05c   140 mvzl	r0,msg_start
//R 0f05c #16 msg_start 0000f68e
0400f578 //C 0f05d   141 call	printf
//R 0f05d #24 printf 0000f578
0700f67b //C 0f05e   143 ld	r0,called
//R 0f05e #16 called 0000f67b
020b0000 //C 0f05f   144 sz	r0
11f2f06a //C 0f060   145 jz	no_called_from
//R 0f060 #16 no_called_from 0000f06a
0102000a //C 0f061   146 mvzl	r0,LF
//R 0f061 #16 LF 0000000a
0400f497 //C 0f062   147 call	putchar
//R 0f062 #24 putchar 0000f497
0102f6af //C 0f063   148 mvzl	r0,msg_stopat
//R 0f063 #16 msg_stopat 0000f6af
0400f49e //C 0f064   149 call	prints
//R 0f064 #24 prints 0000f49e
0700f68b //C 0f065   150 ld	r0,reg14
//R 0f065 #16 reg14 0000f68b
01120004 //C 0f066   151 mvzl	r1,4
0400f4de //C 0f067   152 call	print_vhex
//R 0f067 #24 print_vhex 0000f4de
0102000a //C 0f068   153 mvzl	r0,LF
//R 0f068 #16 LF 0000000a
0400f497 //C 0f069   154 call	putchar
//R 0f069 #24 putchar 0000f497
0400f06c //C 0f06a   158 call	setup_line
//R 0f06a #24 setup_line 0000f06c
//G no_called_from
01f2f075 //C 0f06b   162 jmp	main
//R 0f06b #16 main 0000f075
0ded0000 //C 0f06c   168 push	lr
//G setup_line
01120000 //C 0f06d   169 mvzl	r1,0		; lptr= 0
0610f673 //C 0f06e   170 st	r1,line_ptr
//R 0f06e #16 line_ptr 0000f673
0610f60f //C 0f06f   171 st	r1,line		; line[0]= 0
//R 0f06f #16 line 0000f60f
01120000 //C 0f070   172 mvzl	r1,0		; at_eol= 0
0610f674 //C 0f071   173 st	r1,at_eol
//R 0f071 #16 at_eol 0000f674
0102f6bd //C 0f072   175 mvzl	r0,prompt
//R 0f072 #16 prompt 0000f6bd
0400f49e //C 0f073   176 call	prints
//R 0f073 #24 prints 0000f49e
0ffd0000 //C 0f074   177 pop	pc
0400f488 //C 0f075   184 call	check_uart
//R 0f075 #24 check_uart 0000f488
//G main
41f2f07c //C 0f076   185 C0 jmp	no_input
//R 0f076 #16 no_input 0000f07c
0400f490 //C 0f077   187 call	read
//R 0f077 #24 read 0000f490
0400f07d //C 0f078   188 call	proc_input
//R 0f078 #24 proc_input 0000f07d
41f2f07c //C 0f079   189 C0 jmp	no_line
//R 0f079 #16 no_line 0000f07c
0400f0ae //C 0f07a   192 call	proc_line
//R 0f07a #24 proc_line 0000f0ae
//G line_ready
0400f06c //C 0f07b   193 call	setup_line
//R 0f07b #24 setup_line 0000f06c
01f2f075 //C 0f07c   196 jmp	main
//R 0f07c #16 main 0000f075
//G no_line
//G no_input
0ded0000 //C 0f07d   202 push	lr
//G proc_input
0108000a //C 0f07e   203 cmp	r0,LF
//R 0f07e #16 LF 0000000a
11f2f0a8 //C 0f07f   204 EQ jmp	got_eol
//R 0f07f #16 got_eol 0000f0a8
0108000d //C 0f080   205 cmp	r0,CR
//R 0f080 #16 CR 0000000d
11f2f0a8 //C 0f081   206 EQ jmp	got_eol
//R 0f081 #16 got_eol 0000f0a8
01080008 //C 0f082   207 cmp	r0,8
11f2f087 //C 0f083   208 jz	got_BS
//R 0f083 #16 got_BS 0000f087
0108007f //C 0f084   209 cmp	r0,127
11f2f087 //C 0f085   210 jz	got_DEL
//R 0f085 #16 got_DEL 0000f087
01f2f093 //C 0f086   211 jmp	got_char
//R 0f086 #16 got_char 0000f093
0700f673 //C 0f087   214 ld	r0,line_ptr
//R 0f087 #16 line_ptr 0000f673
//G got_BS
//G got_DEL
020b0000 //C 0f088   215 sz	r0
11f2f091 //C 0f089   216 jz	got_done
//R 0f089 #16 got_done 0000f091
01060001 //C 0f08a   217 sub	r0,1
0600f673 //C 0f08b   218 st	r0,line_ptr
//R 0f08b #16 line_ptr 0000f673
0112f60f //C 0f08c   219 mvzl	r1,line
//R 0f08c #16 line 0000f60f
01220000 //C 0f08d   220 mvzl	r2,0
08210000 //C 0f08e   221 st	r2,r1,r0
0102f6b9 //C 0f08f   222 mvzl	r0,msg_BS
//R 0f08f #16 msg_BS 0000f6b9
0400f49e //C 0f090   223 call	prints
//R 0f090 #24 prints 0000f49e
020d0000 //C 0f091   225 clc
//G got_done
01f2f0ad //C 0f092   226 jmp	proc_input_ret
//R 0f092 #16 proc_input_ret 0000f0ad
0108001f //C 0f093   228 cmp	r0,31		; refuse control chars
//G got_char
a1f2f0ad //C 0f094   229 LS jmp	proc_input_ret
//R 0f094 #16 proc_input_ret 0000f0ad
0108007e //C 0f095   230 cmp	r0,126		; refuse graph chars
91f2f0ad //C 0f096   231 HI jmp	proc_input_ret
//R 0f096 #16 proc_input_ret 0000f0ad
01220000 //C 0f097   232 mvzl	r2,0		; at_aol= 0
0620f674 //C 0f098   233 st	r2,at_eol
//R 0f098 #16 at_eol 0000f674
0112f673 //C 0f099   234 mvzl	r1,line_ptr	; line[line_ptr]= char
//R 0f099 #16 line_ptr 0000f673
0e310000 //C 0f09a   235 ld	r3,r1
0122f60f //C 0f09b   236 mvzl	r2,line
//R 0f09b #16 line 0000f60f
08020300 //C 0f09c   237 st	r0,r2,r3
013a0001 //C 0f09d   239 plus	r3,1		; line_ptr++
0c310000 //C 0f09e   240 st	r3,r1
01420000 //C 0f09f   241 mvzl	r4,0
09438200 //C 0f0a0   242 st	r4,r3+,r2	; line[line_ptr]= 0
08430200 //C 0f0a1   243 st	r4,r3,r2	; double 0 at end, needed by tokenizer
0142f67a //C 0f0a2   244 mvzl	r4,echo		; check if echo is turned on
//R 0f0a2 #16 echo 0000f67a
0e440000 //C 0f0a3   245 ld	r4,r4
024b0000 //C 0f0a4   246 sz	r4
2400f497 //C 0f0a5   247 NZ call	putchar		; echo
//R 0f0a5 #24 putchar 0000f497
020d0000 //C 0f0a6   248 clc
01f2f0ad //C 0f0a7   249 jmp	proc_input_ret
//R 0f0a7 #16 proc_input_ret 0000f0ad
0112f674 //C 0f0a8   251 mvzl	r1,at_eol
//R 0f0a8 #16 at_eol 0000f674
//G got_eol
0e110000 //C 0f0a9   252 ld	r1,r1
021b0000 //C 0f0aa   253 sz	r1		; Z=0 at eol -> skip, not ready
220d0000 //C 0f0ab   254 Z0 clc
120c0000 //C 0f0ac   255 Z1 sec
0ffd0000 //C 0f0ad   257 pop	pc
//G proc_input_ret
0ded0000 //C 0f0ae   266 push	lr
//G proc_line
0102000a //C 0f0af   268 mvzl	r0,LF
//R 0f0af #16 LF 0000000a
0400f497 //C 0f0b0   269 call	putchar
//R 0f0b0 #24 putchar 0000f497
0700f60f //C 0f0b1   271 ld	r0,line
//R 0f0b1 #16 line 0000f60f
020b0000 //C 0f0b2   272 sz	r0
11f2f0bb //C 0f0b3   273 jz	proc_line_ret
//R 0f0b3 #16 proc_line_ret 0000f0bb
0400f0d7 //C 0f0b4   281 call	tokenize
//R 0f0b4 #24 tokenize 0000f0d7
0400f0f7 //C 0f0b5   292 call	find_cmd
//R 0f0b5 #24 find_cmd 0000f0f7
41f2f0b9 //C 0f0b6   293 C0 jmp	cmd_not_found
//R 0f0b6 #16 cmd_not_found 0000f0b9
05000000 //C 0f0b7   296 call	r0,0
//G cmd_found
01f2f0bb //C 0f0b8   298 jmp	proc_line_ret
//R 0f0b8 #16 proc_line_ret 0000f0bb
0102f0c3 //C 0f0b9   300 mvzl	r0,snotfound
//R 0f0b9 #16 snotfound 0000f0c3
//G cmd_not_found
0400f4d7 //C 0f0ba   301 call	printsnl
//R 0f0ba #24 printsnl 0000f4d7
01120001 //C 0f0bb   304 mvzl	r1,1		; at_eol= 1
//G proc_line_ret
0610f674 //C 0f0bc   305 st	r1,at_eol
//R 0f0bc #16 at_eol 0000f674
0ffd0000 //C 0f0bd   306 pop	pc
00000047 //C 0f0be   308 db	71
//G sdummy1
0000006f //C 0f0bf   308 db	111
00000074 //C 0f0c0   308 db	116
0000003a //C 0f0c1   308 db	58
00000000 //C 0f0c2   308 db
00000055 //C 0f0c3   309 db	85
//G snotfound
0000006e //C 0f0c4   309 db	110
0000006b //C 0f0c5   309 db	107
0000006e //C 0f0c6   309 db	110
0000006f //C 0f0c7   309 db	111
00000077 //C 0f0c8   309 db	119
0000006e //C 0f0c9   309 db	110
00000020 //C 0f0ca   309 db	32
00000063 //C 0f0cb   309 db	99
0000006f //C 0f0cc   309 db	111
0000006d //C 0f0cd   309 db	109
0000006d //C 0f0ce   309 db	109
00000061 //C 0f0cf   309 db	97
0000006e //C 0f0d0   309 db	110
00000064 //C 0f0d1   309 db	100
00000000 //C 0f0d2   309 db
0ded0000 //C 0f0d3   317 push	lr
//G is_delimiter
0112f6bf //C 0f0d4   318 mvzl	r1,delimiters
//R 0f0d4 #16 delimiters 0000f6bf
0400f3a5 //C 0f0d5   319 call	strchr
//R 0f0d5 #24 strchr 0000f3a5
0ffd0000 //C 0f0d6   320 pop	pc
0ded0000 //C 0f0d7   329 push	lr
//G tokenize
0142f675 //C 0f0d8   330 mvzl	r4,words	; array of result
//R 0f0d8 #16 words 0000f675
0152f60f //C 0f0d9   331 mvzl	r5,line		; address of next char
//R 0f0d9 #16 line 0000f60f
01620000 //C 0f0da   332 mvzl	r6,0		; nuof words found
01720000 //C 0f0db   333 mvzl	r7,0		; bool in_word
0e050000 //C 0f0dc   335 ld	r0,r5		; pick a char
//G tok_cycle
020b0000 //C 0f0dd   336 sz	r0		; check end
11f2f0e8 //C 0f0de   337 jz	tok_delimiter	; found end, pretend delim
//R 0f0de #16 tok_delimiter 0000f0e8
0400f0d3 //C 0f0df   339 call	is_delimiter
//R 0f0df #24 is_delimiter 0000f0d3
//G tok_neol
31f2f0e8 //C 0f0e0   340 C1 jmp	tok_delimiter
//R 0f0e0 #16 tok_delimiter 0000f0e8
027b0000 //C 0f0e1   342 sz	r7
//G tok_char
21f2f0ed //C 0f0e2   343 jnz	tok_next	; still inside word
//R 0f0e2 #16 tok_next 0000f0ed
01720001 //C 0f0e3   345 mvzl	r7,1		; in_word=true
09568400 //C 0f0e4   346 st	r5,r6+,r4	; record word address
01680005 //C 0f0e5   347 cmp	r6,MAX_WORDS	; If no more space
//R 0f0e5 #16 MAX_WORDS 00000005
11f2f0f1 //C 0f0e6   348 EQ jmp	tok_ret		; then return
//R 0f0e6 #16 tok_ret 0000f0f1
01f2f0ed //C 0f0e7   349 jmp	tok_next
//R 0f0e7 #16 tok_next 0000f0ed
027b0000 //C 0f0e8   351 sz	r7
//G tok_delimiter
11f2f0ed //C 0f0e9   352 jz	tok_next	; still between words
//R 0f0e9 #16 tok_next 0000f0ed
01720000 //C 0f0ea   354 mvzl	r7,0		; in_word=false
01120000 //C 0f0eb   355 mvzl	r1,0		; put a 0 at the end of word
08150100 //C 0f0ec   356 st	r1,r5,r1
020b0000 //C 0f0ed   358 sz	r0		; check EOL
//G tok_next
11f2f0f1 //C 0f0ee   359 jz	tok_ret		; jump out if char==0
//R 0f0ee #16 tok_ret 0000f0f1
01540001 //C 0f0ef   360 add	r5,1
01f2f0dc //C 0f0f0   361 jmp	tok_cycle
//R 0f0f0 #16 tok_cycle 0000f0dc
01120000 //C 0f0f1   363 mvzl	r1,0
//G tok_ret
01680005 //C 0f0f2   364 cmp	r6,MAX_WORDS
//R 0f0f2 #16 MAX_WORDS 00000005
11f2f0f6 //C 0f0f3   365 jz	tok_end
//R 0f0f3 #16 tok_end 0000f0f6
09168400 //C 0f0f4   366 st	r1,r6+,r4
01f2f0f1 //C 0f0f5   367 jmp	tok_ret
//R 0f0f5 #16 tok_ret 0000f0f1
0ffd0000 //C 0f0f6   369 pop	pc
//G tok_end
0ded0000 //C 0f0f7   378 push	lr
//G find_cmd
0d1d0000 //C 0f0f8   379 push	r1
0d2d0000 //C 0f0f9   380 push	r2
0d3d0000 //C 0f0fa   381 push	r3
0dad0000 //C 0f0fb   382 push	r10
0700f675 //C 0f0fc   383 ld	r0,words	; R0= 1st word of command
//R 0f0fc #16 words 0000f675
020b0000 //C 0f0fd   384 sz	r0
11f2f12e //C 0f0fe   385 jz	find_cmd_false
//R 0f0fe #16 find_cmd_false 0000f12e
0e100000 //C 0f0ff   388 ld	r1,r0		; 1st char of word1
0e200001 //C 0f100   389 ld	r2,r0,1		; 2nd char
0e300002 //C 0f101   390 ld	r3,r0,2		; 3rd char
011fffdf //C 0f102   391 and	r1,0xffdf	; upcase 1st char
01180052 //C 0f103   392 cmp	r1,'R'
21f2f11a //C 0f104   393 jnz	find_not_rx
//R 0f104 #16 find_not_rx 0000f11a
0128002f //C 0f105   394 cmp	r2,'/'		; '0'-1
a1f2f11a //C 0f106   395 LS jmp	find_not_rx
//R 0f106 #16 find_not_rx 0000f11a
01280039 //C 0f107   396 cmp	r2,'9'
91f2f11a //C 0f108   397 HI jmp	find_not_rx
//R 0f108 #16 find_not_rx 0000f11a
023b0000 //C 0f109   398 sz	r3
11f2f115 //C 0f10a   399 jz	find_rx_09
//R 0f10a #16 find_rx_09 0000f115
01280031 //C 0f10b   401 cmp	r2,'1'		; first char must be '1'
//G find_rx_1015
21f2f11a //C 0f10c   402 jnz	find_not_rx
//R 0f10c #16 find_not_rx 0000f11a
0138002f //C 0f10d   403 cmp	r3,'/'		; '0'-1
a1f2f11a //C 0f10e   404 LS jmp	find_not_rx
//R 0f10e #16 find_not_rx 0000f11a
01380035 //C 0f10f   405 cmp	r3,'5'
91f2f11a //C 0f110   406 HI jmp	find_not_rx
//R 0f110 #16 find_not_rx 0000f11a
01360030 //C 0f111   407 sub	r3,'0'
0134000a //C 0f112   408 add	r3,10
0630f67c //C 0f113   409 st	r3,nuof_reg
//R 0f113 #16 nuof_reg 0000f67c
01f2f117 //C 0f114   410 jmp	find_rx
//R 0f114 #16 find_rx 0000f117
01260030 //C 0f115   412 sub	r2,'0'
//G find_rx_09
0620f67c //C 0f116   413 st	r2,nuof_reg
//R 0f116 #16 nuof_reg 0000f67c
0102f364 //C 0f117   415 mvzl	r0,cmd_rx
//R 0f117 #16 cmd_rx 0000f364
//G find_rx
020c0000 //C 0f118   416 sec
01f2f139 //C 0f119   417 jmp	find_cmd_ret
//R 0f119 #16 find_cmd_ret 0000f139
01a2f6db //C 0f11a   420 mvzl	r10,commands
//R 0f11a #16 commands 0000f6db
//G find_not_rx
0e2a0000 //C 0f11b   422 ld	r2,r10		; R2= cmd addr
//G find_cmd_cyc
022b0000 //C 0f11c   423 sz	r2
11f2f12e //C 0f11d   424 jz	find_cmd_false
//R 0f11d #16 find_cmd_false 0000f12e
01a40001 //C 0f11e   425 add	r10,1
00100a00 //C 0f11f   426 mov	r1,r10		; R1= cmd string
01a40001 //C 0f120   429 add	r10,1
//G find_cmd_fw
0e3a0000 //C 0f121   430 ld	r3,r10
023b0000 //C 0f122   431 sz	r3
21f2f120 //C 0f123   432 jnz	find_cmd_fw
//R 0f123 #16 find_cmd_fw 0000f120
01a40001 //C 0f124   433 add	r10,1
0400f417 //C 0f125   435 call	streq
//R 0f125 #24 streq 0000f417
41f2f11b //C 0f126   436 C0 jmp	find_cmd_cyc
//R 0f126 #16 find_cmd_cyc 0000f11b
00000200 //C 0f127   438 mov	r0,r2
//G find_cmd_true
020c0000 //C 0f128   439 sec
01f2f139 //C 0f129   440 jmp	find_cmd_ret
//R 0f129 #16 find_cmd_ret 0000f139
0000002f //C 0f12a   441 db	47
//G c_cmd_name
0000002f //C 0f12b   441 db	47
00000043 //C 0f12c   441 db	67
00000000 //C 0f12d   441 db
01040001 //C 0f12e   443 add	r0,1		; check second word
//G find_cmd_false
0e100000 //C 0f12f   444 ld	r1,r0		; for //C command
021b0000 //C 0f130   445 sz	r1
11f2f137 //C 0f131   446 jz	find_cmd_very_false
//R 0f131 #16 find_cmd_very_false 0000f137
0102f12a //C 0f132   447 mvzl	r0,c_cmd_name
//R 0f132 #16 c_cmd_name 0000f12a
0400f417 //C 0f133   448 call	streq
//R 0f133 #24 streq 0000f417
21f2f137 //C 0f134   449 jnz	find_cmd_very_false
//R 0f134 #16 find_cmd_very_false 0000f137
0122f1ec //C 0f135   450 mvzl	r2,cmd_c
//R 0f135 #16 cmd_c 0000f1ec
01f2f127 //C 0f136   451 jmp	find_cmd_true
//R 0f136 #16 find_cmd_true 0000f127
020d0000 //C 0f137   453 clc
//G find_cmd_very_false
01020000 //C 0f138   454 mvzl	r0,0
0fad0000 //C 0f139   456 pop	r10
//G find_cmd_ret
0f3d0000 //C 0f13a   457 pop	r3
0f2d0000 //C 0f13b   458 pop	r2
0f1d0000 //C 0f13c   459 pop	r1
0ffd0000 //C 0f13d   460 pop	pc
0ded0000 //C 0f13e   465 push	lr
//G cmd_m
0122f675 //C 0f13f   466 mvzl	r2,words
//R 0f13f #16 words 0000f675
01020000 //C 0f140   467 mvzl	r0,0
0e420001 //C 0f141   469 ld	r4,r2,1		; addr
0e520002 //C 0f142   470 ld	r5,r2,2		; value
024b0000 //C 0f143   471 sz 	r4
11f2f16a //C 0f144   472 jz	m_ret
//R 0f144 #16 m_ret 0000f16a
00000400 //C 0f145   474 mov	r0,r4
0400f45a //C 0f146   475 call	htoi
//R 0f146 #24 htoi 0000f45a
00400100 //C 0f147   476 mov	r4,r1
31f2f14c //C 0f148   477 C1 jmp	m_addr_ok
//R 0f148 #16 m_addr_ok 0000f14c
0102f16b //C 0f149   478 mvzl	r0,m_err_addr
//R 0f149 #16 m_err_addr 0000f16b
0400f4d7 //C 0f14a   479 call	printsnl
//R 0f14a #24 printsnl 0000f4d7
01f2f16a //C 0f14b   480 jmp	m_ret
//R 0f14b #16 m_ret 0000f16a
025b0000 //C 0f14c   482 sz	r5
//G m_addr_ok
11f2f160 //C 0f14d   483 jz	m_read
//R 0f14d #16 m_read 0000f160
0132f000 //C 0f14e   485 mvzl	r3,the_begin
//R 0f14e #16 the_begin 0000f000
//G m_write
00380400 //C 0f14f   486 cmp	r3,r4
91f2f158 //C 0f150   487 HI jmp	m_addrv_ok
//R 0f150 #16 m_addrv_ok 0000f158
0132f901 //C 0f151   488 mvzl	r3,the_end
//R 0f151 #16 the_end 0000f901
00380400 //C 0f152   489 cmp	r3,r4
91f2f155 //C 0f153   490 HI jmp	m_addrv_nok
//R 0f153 #16 m_addrv_nok 0000f155
01f2f158 //C 0f154   491 jmp	m_addrv_ok
//R 0f154 #16 m_addrv_ok 0000f158
0102f179 //C 0f155   499 mvzl	r0,m_err_addrv
//R 0f155 #16 m_err_addrv 0000f179
//G m_addrv_nok
0400f4d7 //C 0f156   500 call	printsnl
//R 0f156 #24 printsnl 0000f4d7
01f2f16a //C 0f157   501 jmp	m_ret
//R 0f157 #16 m_ret 0000f16a
00000500 //C 0f158   503 mov	r0,r5
//G m_addrv_ok
0400f45a //C 0f159   504 call	htoi
//R 0f159 #24 htoi 0000f45a
00500100 //C 0f15a   505 mov	r5,r1
31f2f15f //C 0f15b   506 C1 jmp	m_value_ok
//R 0f15b #16 m_value_ok 0000f15f
0102f18b //C 0f15c   507 mvzl	r0,m_err_value
//R 0f15c #16 m_err_value 0000f18b
0400f4d7 //C 0f15d   508 call	printsnl
//R 0f15d #24 printsnl 0000f4d7
01f2f16a //C 0f15e   509 jmp	m_ret
//R 0f15e #16 m_ret 0000f16a
0c540000 //C 0f15f   511 st	r5,r4
//G m_value_ok
00000400 //C 0f160   514 mov	r0,r4
//G m_read
01120004 //C 0f161   515 mvzl	r1,4
0400f4de //C 0f162   516 call	print_vhex
//R 0f162 #24 print_vhex 0000f4de
01020020 //C 0f163   517 mvzl	r0,0x20
0400f497 //C 0f164   518 call	putchar
//R 0f164 #24 putchar 0000f497
0e040000 //C 0f165   519 ld	r0,r4
01120004 //C 0f166   520 mvzl	r1,4
0400f4de //C 0f167   521 call	print_vhex
//R 0f167 #24 print_vhex 0000f4de
0102000a //C 0f168   522 mvzl	r0,LF
//R 0f168 #16 LF 0000000a
0400f497 //C 0f169   523 call	putchar
//R 0f169 #24 putchar 0000f497
0ffd0000 //C 0f16a   525 pop	pc
//G m_ret
00000041 //C 0f16b   527 db	65
//G m_err_addr
00000064 //C 0f16c   527 db	100
00000064 //C 0f16d   527 db	100
00000072 //C 0f16e   527 db	114
00000065 //C 0f16f   527 db	101
00000073 //C 0f170   527 db	115
00000073 //C 0f171   527 db	115
00000020 //C 0f172   527 db	32
00000065 //C 0f173   527 db	101
00000072 //C 0f174   527 db	114
00000072 //C 0f175   527 db	114
0000006f //C 0f176   527 db	111
00000072 //C 0f177   527 db	114
00000000 //C 0f178   527 db
0000004d //C 0f179   528 db	77
//G m_err_addrv
0000006f //C 0f17a   528 db	111
0000006e //C 0f17b   528 db	110
00000069 //C 0f17c   528 db	105
00000074 //C 0f17d   528 db	116
0000006f //C 0f17e   528 db	111
00000072 //C 0f17f   528 db	114
00000027 //C 0f180   528 db	39
00000073 //C 0f181   528 db	115
00000020 //C 0f182   528 db	32
00000061 //C 0f183   528 db	97
00000064 //C 0f184   528 db	100
00000064 //C 0f185   528 db	100
00000072 //C 0f186   528 db	114
00000065 //C 0f187   528 db	101
00000073 //C 0f188   528 db	115
00000073 //C 0f189   528 db	115
00000000 //C 0f18a   528 db
00000056 //C 0f18b   529 db	86
//G m_err_value
00000061 //C 0f18c   529 db	97
0000006c //C 0f18d   529 db	108
00000075 //C 0f18e   529 db	117
00000065 //C 0f18f   529 db	101
00000020 //C 0f190   529 db	32
00000065 //C 0f191   529 db	101
00000072 //C 0f192   529 db	114
00000072 //C 0f193   529 db	114
0000006f //C 0f194   529 db	111
00000072 //C 0f195   529 db	114
00000000 //C 0f196   529 db
0ded0000 //C 0f197   534 push	lr
//G cmd_sm
0122f675 //C 0f198   535 mvzl	r2,words
//R 0f198 #16 words 0000f675
01020000 //C 0f199   536 mvzl	r0,0
0e420001 //C 0f19a   538 ld	r4,r2,1		; addr
0e520002 //C 0f19b   539 ld	r5,r2,2		; value
024b0000 //C 0f19c   540 sz 	r4
11f2f16a //C 0f19d   541 jz	m_ret
//R 0f19d #16 m_ret 0000f16a
00000400 //C 0f19e   543 mov	r0,r4
0400f45a //C 0f19f   544 call	htoi
//R 0f19f #24 htoi 0000f45a
00400100 //C 0f1a0   545 mov	r4,r1
31f2f1a5 //C 0f1a1   546 C1 jmp	sm_addr_ok
//R 0f1a1 #16 sm_addr_ok 0000f1a5
0102f16b //C 0f1a2   547 mvzl	r0,m_err_addr
//R 0f1a2 #16 m_err_addr 0000f16b
0400f4d7 //C 0f1a3   548 call	printsnl
//R 0f1a3 #24 printsnl 0000f4d7
01f2f1b9 //C 0f1a4   549 jmp	sm_ret
//R 0f1a4 #16 sm_ret 0000f1b9
025b0000 //C 0f1a5   551 sz	r5
//G sm_addr_ok
11f2f1b9 //C 0f1a6   552 jz	sm_ret
//R 0f1a6 #16 sm_ret 0000f1b9
0132f000 //C 0f1a7   554 mvzl	r3,the_begin
//R 0f1a7 #16 the_begin 0000f000
//G sm_write
00380400 //C 0f1a8   555 cmp	r3,r4
91f2f1b1 //C 0f1a9   556 HI jmp	sm_addrv_ok
//R 0f1a9 #16 sm_addrv_ok 0000f1b1
0132f901 //C 0f1aa   557 mvzl	r3,the_end
//R 0f1aa #16 the_end 0000f901
00380400 //C 0f1ab   558 cmp	r3,r4
91f2f1ae //C 0f1ac   559 HI jmp	sm_addrv_nok
//R 0f1ac #16 sm_addrv_nok 0000f1ae
01f2f1b1 //C 0f1ad   560 jmp	sm_addrv_ok
//R 0f1ad #16 sm_addrv_ok 0000f1b1
0102f179 //C 0f1ae   562 mvzl	r0,m_err_addrv
//R 0f1ae #16 m_err_addrv 0000f179
//G sm_addrv_nok
0400f4d7 //C 0f1af   563 call	printsnl
//R 0f1af #24 printsnl 0000f4d7
01f2f1b9 //C 0f1b0   564 jmp	sm_ret
//R 0f1b0 #16 sm_ret 0000f1b9
00000500 //C 0f1b1   566 mov	r0,r5
//G sm_addrv_ok
0400f45a //C 0f1b2   567 call	htoi
//R 0f1b2 #24 htoi 0000f45a
00500100 //C 0f1b3   568 mov	r5,r1
31f2f1b8 //C 0f1b4   569 C1 jmp	sm_value_ok
//R 0f1b4 #16 sm_value_ok 0000f1b8
0102f18b //C 0f1b5   570 mvzl	r0,m_err_value
//R 0f1b5 #16 m_err_value 0000f18b
0400f4d7 //C 0f1b6   571 call	printsnl
//R 0f1b6 #24 printsnl 0000f4d7
01f2f1b9 //C 0f1b7   572 jmp	sm_ret
//R 0f1b7 #16 sm_ret 0000f1b9
0c540000 //C 0f1b8   574 st	r5,r4
//G sm_value_ok
0ffd0000 //C 0f1b9   577 pop	pc
//G sm_ret
0ded0000 //C 0f1ba   583 push	lr
//G cmd_d
0122f675 //C 0f1bb   584 mvzl	r2,words
//R 0f1bb #16 words 0000f675
0e020001 //C 0f1bc   585 ld	r0,r2,1		; start address
0400f45a //C 0f1bd   586 call	htoi
//R 0f1bd #24 htoi 0000f45a
00300100 //C 0f1be   587 mov	r3,r1
0e020002 //C 0f1bf   588 ld	r0,r2,2		; end address
020b0000 //C 0f1c0   589 sz	r0
21f2f1c5 //C 0f1c1   590 jnz	d_end_ok
//R 0f1c1 #16 d_end_ok 0000f1c5
00400300 //C 0f1c2   591 mov	r4,r3
01440010 //C 0f1c3   592 add	r4,0x10
01f2f1c7 //C 0f1c4   593 jmp	d_chk_end
//R 0f1c4 #16 d_chk_end 0000f1c7
0400f45a //C 0f1c5   595 call	htoi
//R 0f1c5 #24 htoi 0000f45a
//G d_end_ok
00400100 //C 0f1c6   596 mov	r4,r1
00380400 //C 0f1c7   598 cmp	r3,r4		; check if start>end
//G d_chk_end
91f2f1d7 //C 0f1c8   599 HI jmp d_bad
//R 0f1c8 #16 d_bad 0000f1d7
00000300 //C 0f1c9   607 mov	r0,r3		; print address
//G d_cyc
01120004 //C 0f1ca   608 mvzl	r1,4
0400f4de //C 0f1cb   609 call	print_vhex
//R 0f1cb #24 print_vhex 0000f4de
01020020 //C 0f1cc   610 mvzl	r0,0x20		; print one space
0400f497 //C 0f1cd   611 call	putchar
//R 0f1cd #24 putchar 0000f497
0e030000 //C 0f1ce   612 ld	r0,r3		; load data
01120004 //C 0f1cf   613 mvzl	r1,4		; print data
0400f4de //C 0f1d0   614 call	print_vhex
//R 0f1d0 #24 print_vhex 0000f4de
0102000a //C 0f1d1   615 mvzl	r0,LF		; print new line
//R 0f1d1 #16 LF 0000000a
0400f497 //C 0f1d2   616 call	putchar
//R 0f1d2 #24 putchar 0000f497
00380400 //C 0f1d3   617 cmp	r3,r4
11f2f1d9 //C 0f1d4   618 jz	d_ret
//R 0f1d4 #16 d_ret 0000f1d9
01340001 //C 0f1d5   619 add	r3,1
01f2f1c9 //C 0f1d6   620 jmp	d_cyc
//R 0f1d6 #16 d_cyc 0000f1c9
0102f1da //C 0f1d7   622 mvzl	r0,d_err_bad
//R 0f1d7 #16 d_err_bad 0000f1da
//G d_bad
0400f4d7 //C 0f1d8   623 call	printsnl
//R 0f1d8 #24 printsnl 0000f4d7
0ffd0000 //C 0f1d9   625 pop	pc
//G d_ret
00000057 //C 0f1da   627 db	87
//G d_err_bad
00000072 //C 0f1db   627 db	114
0000006f //C 0f1dc   627 db	111
0000006e //C 0f1dd   627 db	110
00000067 //C 0f1de   627 db	103
00000020 //C 0f1df   627 db	32
00000065 //C 0f1e0   627 db	101
0000006e //C 0f1e1   627 db	110
00000064 //C 0f1e2   627 db	100
00000020 //C 0f1e3   627 db	32
00000061 //C 0f1e4   627 db	97
00000064 //C 0f1e5   627 db	100
00000064 //C 0f1e6   627 db	100
00000072 //C 0f1e7   627 db	114
00000065 //C 0f1e8   627 db	101
00000073 //C 0f1e9   627 db	115
00000073 //C 0f1ea   627 db	115
00000000 //C 0f1eb   627 db
00f00e00 //C 0f1ec   632 ret
//G cmd_c
0ded0000 //C 0f1ed   637 push	lr
//G cmd_l
01a20000 //C 0f1ee   638 mvzl	r10,0		; state (nr of words)
01820000 //C 0f1ef   639 mvzl	r8,0		; value
0162003f //C 0f1f0   640 mvzl	r6,'?'		; Record type
01c20000 //C 0f1f1   641 mvzl	r12,0		; Checksum
0400f488 //C 0f1f2   643 call	check_uart
//R 0f1f2 #24 check_uart 0000f488
//G l_cyc
41f2f1f2 //C 0f1f3   644 C0 jmp	l_cyc
//R 0f1f3 #16 l_cyc 0000f1f2
0400f490 //C 0f1f4   645 call	read
//R 0f1f4 #24 read 0000f490
00b00000 //C 0f1f5   647 mov	r11,r0		; Copy of char in R11
//G l_start
0108000a //C 0f1f6   648 cmp	r0,10		; check EOL chars
11f2f243 //C 0f1f7   649 jz	l_eol
//R 0f1f7 #16 l_eol 0000f243
0108000d //C 0f1f8   650 cmp	r0,13
11f2f243 //C 0f1f9   651 jz	l_eol
//R 0f1f9 #16 l_eol 0000f243
01a80000 //C 0f1fa   653 cmp	r10,0
21f2f20b //C 0f1fb   654 jnz	l_no0
//R 0f1fb #16 l_no0 0000f20b
0400f427 //C 0f1fc   656 call	hexchar2value
//R 0f1fc #24 hexchar2value 0000f427
//G l_state_0
41f2f205 //C 0f1fd   657 C0 jmp	l_eof_0
//R 0f1fd #16 l_eof_0 0000f205
02880000 //C 0f1fe   658 shl	r8		; shift val(char) into value
02880000 //C 0f1ff   659 shl	r8
02880000 //C 0f200   660 shl	r8
02880000 //C 0f201   661 shl	r8
010b000f //C 0f202   662 btst	r0,0xf
008d0000 //C 0f203   663 or	r8,r0
01f2f1f2 //C 0f204   664 jmp	l_cyc
//R 0f204 #16 l_cyc 0000f1f2
01a20001 //C 0f205   666 mvzl	r10,1		; state0 -> state1
//G l_eof_0
0162003f //C 0f206   667 mvzl	r6,'?'		; No //C yet
01b8002f //C 0f207   668 cmp	r11,'/'		; is it start of //
11720001 //C 0f208   669 z1 mvzl	r7,1		; Yes, first / found
21720000 //C 0f209   670 z0 mvzl	r7,0		; No '/' yet
01f2f1f2 //C 0f20a   671 jmp	l_cyc
//R 0f20a #16 l_cyc 0000f1f2
01a80001 //C 0f20b   674 cmp	r10,1
//G l_no0
21f2f226 //C 0f20c   675 jnz	l_no1
//R 0f20c #16 l_no1 0000f226
027b0000 //C 0f20d   677 sz	r7
//G l_state_1
21f2f213 //C 0f20e   678 jnz	l_s1_2nd
//R 0f20e #16 l_s1_2nd 0000f213
0108002f //C 0f20f   680 cmp	r0,'/'
//G l_s1_1st
21f2f1f2 //C 0f210   681 jnz	l_cyc
//R 0f210 #16 l_cyc 0000f1f2
01720001 //C 0f211   682 mvzl	r7,1
01f2f1f2 //C 0f212   683 jmp	l_cyc
//R 0f212 #16 l_cyc 0000f1f2
0108002f //C 0f213   685 cmp	r0,'/'
//G l_s1_2nd
11f2f1f2 //C 0f214   686 jz	l_cyc
//R 0f214 #16 l_cyc 0000f1f2
01080043 //C 0f215   687 cmp	r0,'C'
11f2f219 //C 0f216   688 jz	l_s1_C
//R 0f216 #16 l_s1_C 0000f219
01080049 //C 0f217   689 cmp	r0,'I'
21f2f21e //C 0f218   690 jnz	l_s1_noC
//R 0f218 #16 l_s1_noC 0000f21e
00600000 //C 0f219   693 mov	r6,r0		; record type is in r0, store in r6
//G l_s1_C
01a20002 //C 0f21a   695 mvzl	r10,2
01920000 //C 0f21b   696 mvzl	r9,0		; address= 0
01520000 //C 0f21c   697 mvzl	r5,0		; where we are in word: before
01f2f1f2 //C 0f21d   698 jmp	l_cyc
//R 0f21d #16 l_cyc 0000f1f2
01080045 //C 0f21e   700 cmp	r0,'E'
//G l_s1_noC
21f2f223 //C 0f21f   701 jnz	l_s1_noE
//R 0f21f #16 l_s1_noE 0000f223
01620045 //C 0f220   703 mvzl	r6,'E'
//G l_s1_E
01a20003 //C 0f221   705 mvzl	r10,3
01f2f1f2 //C 0f222   706 jmp	l_cyc
//R 0f222 #16 l_cyc 0000f1f2
0400f497 //C 0f223   710 call	putchar		; print record type
//R 0f223 #24 putchar 0000f497
//G l_s1_noE
01a2000f //C 0f224   711 mvzl	r10,0xf		; special state: skip everything
01f2f1f2 //C 0f225   712 jmp	l_cyc
//R 0f225 #16 l_cyc 0000f1f2
01a80002 //C 0f226   715 cmp	r10,2
//G l_no1
21f2f23b //C 0f227   716 jnz	l_no2
//R 0f227 #16 l_no2 0000f23b
01580000 //C 0f228   718 cmp	r5,0
//G l_state_2
21f2f234 //C 0f229   719 jnz	l_s2_no0
//R 0f229 #16 l_s2_no0 0000f234
0400f427 //C 0f22a   721 call	hexchar2value
//R 0f22a #24 hexchar2value 0000f427
//G l_s2_0
41f2f1f2 //C 0f22b   722 C0 jmp	l_cyc
//R 0f22b #16 l_cyc 0000f1f2
01520001 //C 0f22c   723 mvzl	r5,1
02980000 //C 0f22d   725 shl	r9
//G l_s2_got
02980000 //C 0f22e   726 shl	r9
02980000 //C 0f22f   727 shl	r9
02980000 //C 0f230   728 shl	r9
010b000f //C 0f231   729 btst	r0,0xf
009d0000 //C 0f232   730 or	r9,r0
01f2f1f2 //C 0f233   732 jmp	l_cyc
//R 0f233 #16 l_cyc 0000f1f2
//G l_s2_eos
01580001 //C 0f234   734 cmp	r5,1
//G l_s2_no0
21f2f23a //C 0f235   735 jnz	l_s2_no1
//R 0f235 #16 l_s2_no1 0000f23a
0400f427 //C 0f236   737 call	hexchar2value
//R 0f236 #24 hexchar2value 0000f427
//G l_s2_1
31f2f22d //C 0f237   738 C1 jmp	l_s2_got
//R 0f237 #16 l_s2_got 0000f22d
01520002 //C 0f238   739 mvzl	r5,2
01f2f1f2 //C 0f239   740 jmp	l_cyc
//R 0f239 #16 l_cyc 0000f1f2
01f2f1f2 //C 0f23a   742 jmp	l_cyc
//R 0f23a #16 l_cyc 0000f1f2
//G l_s2_no1
01a80003 //C 0f23b   744 cmp	r10,3
//G l_no2
21f2f23e //C 0f23c   745 jnz	l_no3
//R 0f23c #16 l_no3 0000f23e
01f2f1f2 //C 0f23d   747 jmp	l_cyc		; do nothing, just wait EOL
//R 0f23d #16 l_cyc 0000f1f2
//G l_state_3
01a8000f //C 0f23e   750 cmp	r10,0xf
//G l_no3
01f2f241 //C 0f23f   751 jmp	l_nof
//R 0f23f #16 l_nof 0000f241
01f2f1f2 //C 0f240   752 jmp	l_cyc		; just skip
//R 0f240 #16 l_cyc 0000f1f2
01f2f1f2 //C 0f241   755 jmp	l_cyc
//R 0f241 #16 l_cyc 0000f1f2
//G l_nof
01f2f25b //C 0f242   756 jmp	l_ret
//R 0f242 #16 l_ret 0000f25b
01a80000 //C 0f243   760 cmp	r10,0		; in state0
//G l_eol
11f2f257 //C 0f244   761 jz	l_back_to_0	; just restart
//R 0f244 #16 l_back_to_0 0000f257
01a80001 //C 0f245   762 cmp	r10,1		; in state1
11f2f257 //C 0f246   763 jz	l_back_to_0 	;l_cyc ;l_bad ; garbage
//R 0f246 #16 l_back_to_0 0000f257
01a80002 //C 0f247   764 cmp	r10,2		; in state2
11f2f24f //C 0f248   765 jz	l_proc		; process record
//R 0f248 #16 l_proc 0000f24f
01a80003 //C 0f249   766 cmp	r10,3		; in state3
11f2f25b //C 0f24a   767 jz	l_ret		; eol in end record: finish
//R 0f24a #16 l_ret 0000f25b
01a8000f //C 0f24b   768 cmp	r10,0xf		; in state skip
11f2f257 //C 0f24c   769 jz	l_back_to_0	; reset state for new line
//R 0f24c #16 l_back_to_0 0000f257
01f2f1f2 //C 0f24d   770 jmp	l_cyc
//R 0f24d #16 l_cyc 0000f1f2
01f2f25b //C 0f24e   772 jmp	l_ret
//R 0f24e #16 l_ret 0000f25b
//G l_bad
01680043 //C 0f24f   774 cmp	r6,'C'		; is it a C or I record?
//G l_proc
1c890000 //C 0f250   775 z st	r8,r9		; then store
10c40800 //C 0f251   776 z add	r12,r8		; and add to checksum
01680049 //C 0f252   777 cmp	r6,'I'
1c890000 //C 0f253   778 z st	r8,r9
10c40800 //C 0f254   779 z add	r12,r8
00000600 //C 0f255   780 mov	r0,r6		; echo record type
0400f497 //C 0f256   781 call	putchar
//R 0f256 #24 putchar 0000f497
01a20000 //C 0f257   786 mvzl	r10,0
//G l_back_to_0
01820000 //C 0f258   787 mvzl	r8,0
0162003f //C 0f259   788 mvzl	r6,'?'
01f2f1f2 //C 0f25a   789 jmp	l_cyc
//R 0f25a #16 l_cyc 0000f1f2
0102000a //C 0f25b   791 mvzl	r0,LF
//R 0f25b #16 LF 0000000a
//G l_ret
0400f497 //C 0f25c   792 call	putchar
//R 0f25c #24 putchar 0000f497
00000c00 //C 0f25d   794 mov	r0,r12
01120004 //C 0f25e   795 mvzl	r1,4
0400f4de //C 0f25f   796 call	print_vhex
//R 0f25f #24 print_vhex 0000f4de
0102000a //C 0f260   797 mvzl	r0,LF
//R 0f260 #16 LF 0000000a
0400f497 //C 0f261   798 call	putchar
//R 0f261 #24 putchar 0000f497
0ffd0000 //C 0f262   799 pop	pc
0ded0000 //C 0f263   805 push	lr
//G cmd_g
0122f675 //C 0f264   806 mvzl	r2,words
//R 0f264 #16 words 0000f675
0e020001 //C 0f265   807 ld	r0,r2,1		; address
020b0000 //C 0f266   808 sz	r0
11f2f28a //C 0f267   809 jz	g_no_addr
//R 0f267 #16 g_no_addr 0000f28a
0400f45a //C 0f268   810 call	htoi
//R 0f268 #24 htoi 0000f45a
00b00100 //C 0f269   811 mov	r11,r1
0102f29d //C 0f26a   813 mvzl	r0,d_msg_run
//R 0f26a #16 d_msg_run 0000f29d
//G g_go11
0400f49e //C 0f26b   814 call	prints
//R 0f26b #24 prints 0000f49e
00000b00 //C 0f26c   815 mov	r0,r11
01120004 //C 0f26d   816 mvzl	r1,4
0400f4de //C 0f26e   817 call	print_vhex
//R 0f26e #24 print_vhex 0000f4de
0102000a //C 0f26f   818 mvzl	r0,LF
//R 0f26f #16 LF 0000000a
0400f497 //C 0f270   819 call	putchar
//R 0f270 #24 putchar 0000f497
06b0f68c //C 0f271   820 st	r11,reg15
//R 0f271 #16 reg15 0000f68c
0122ff43 //C 0f272   822 mvzl	r2,UART_TSTAT
//R 0f272 #16 UART_TSTAT 0000ff43
//G g_go
0e920000 //C 0f273   824 ld	r9,r2
//G g_wait_tc
019c0001 //C 0f274   825 test	r9,1
11f2f273 //C 0f275   826 jz	g_wait_tc
//R 0f275 #16 g_wait_tc 0000f273
07000000 //C 0f276   828 ld	r0,0
0600f67b //C 0f277   829 st	r0,called
//R 0f277 #16 called 0000f67b
0700f68d //C 0f278   831 ld	r0,regf
//R 0f278 #16 regf 0000f68d
020f0000 //C 0f279   832 setf	r0
0700f67d //C 0f27a   833 ld	r0,reg0
//R 0f27a #16 reg0 0000f67d
0710f67e //C 0f27b   834 ld	r1,reg1
//R 0f27b #16 reg1 0000f67e
0720f67f //C 0f27c   835 ld	r2,reg2
//R 0f27c #16 reg2 0000f67f
0730f680 //C 0f27d   836 ld	r3,reg3
//R 0f27d #16 reg3 0000f680
0740f681 //C 0f27e   837 ld	r4,reg4
//R 0f27e #16 reg4 0000f681
0750f682 //C 0f27f   838 ld	r5,reg5
//R 0f27f #16 reg5 0000f682
0760f683 //C 0f280   839 ld	r6,reg6
//R 0f280 #16 reg6 0000f683
0770f684 //C 0f281   840 ld	r7,reg7
//R 0f281 #16 reg7 0000f684
0780f685 //C 0f282   841 ld	r8,reg8
//R 0f282 #16 reg8 0000f685
0790f686 //C 0f283   842 ld	r9,reg9
//R 0f283 #16 reg9 0000f686
07a0f687 //C 0f284   843 ld	r10,reg10
//R 0f284 #16 reg10 0000f687
07b0f688 //C 0f285   844 ld	r11,reg11
//R 0f285 #16 reg11 0000f688
07c0f689 //C 0f286   845 ld	r12,reg12
//R 0f286 #16 reg12 0000f689
07d0f68a //C 0f287   846 ld	r13,reg13
//R 0f287 #16 reg13 0000f68a
07e0f68b //C 0f288   847 ld	r14,reg14
//R 0f288 #16 reg14 0000f68b
07f0f68c //C 0f289   849 ld	r15,reg15
//R 0f289 #16 reg15 0000f68c
0700f67b //C 0f28a   852 ld	r0,called
//R 0f28a #16 called 0000f67b
//G g_no_addr
020b0000 //C 0f28b   853 sz	r0
11f2f28f //C 0f28c   854 jz	g_err
//R 0f28c #16 g_err 0000f28f
07b0f68c //C 0f28d   855 ld	r11,reg15
//R 0f28d #16 reg15 0000f68c
01f2f26a //C 0f28e   856 jmp	g_go11
//R 0f28e #16 g_go11 0000f26a
0102f292 //C 0f28f   858 mvzl	r0,g_err_addr
//R 0f28f #16 g_err_addr 0000f292
//G g_err
0400f4d7 //C 0f290   859 call	printsnl
//R 0f290 #24 printsnl 0000f4d7
0ffd0000 //C 0f291   861 pop	pc
//G g_ret
0000004e //C 0f292   863 db	78
//G g_err_addr
0000006f //C 0f293   863 db	111
00000020 //C 0f294   863 db	32
00000061 //C 0f295   863 db	97
00000064 //C 0f296   863 db	100
00000064 //C 0f297   863 db	100
00000072 //C 0f298   863 db	114
00000065 //C 0f299   863 db	101
00000073 //C 0f29a   863 db	115
00000073 //C 0f29b   863 db	115
00000000 //C 0f29c   863 db
00000052 //C 0f29d   864 db	82
//G d_msg_run
00000075 //C 0f29e   864 db	117
0000006e //C 0f29f   864 db	110
00000020 //C 0f2a0   864 db	32
00000000 //C 0f2a1   864 db
0ded0000 //C 0f2a2   869 push	lr
//G cmd_h
0122f730 //C 0f2a3   870 mvzl	r2,helps
//R 0f2a3 #16 helps 0000f730
01320000 //C 0f2a4   871 mvzl	r3,0
0b038200 //C 0f2a5   873 ld	r0,r3+,r2	; pick a char
//G h_cyc
020b0000 //C 0f2a6   874 sz	r0		; is it eos?
21f2f2ab //C 0f2a7   875 jnz	h_print
//R 0f2a7 #16 h_print 0000f2ab
0b038200 //C 0f2a8   878 ld	r0,r3+,r2	; get first char of next string
//G h_eos
020b0000 //C 0f2a9   879 sz	r0
11f2f2ad //C 0f2aa   880 jz	h_eof
//R 0f2aa #16 h_eof 0000f2ad
0400f497 //C 0f2ab   882 call	putchar
//R 0f2ab #24 putchar 0000f497
//G h_print
01f2f2a5 //C 0f2ac   883 jmp	h_cyc
//R 0f2ac #16 h_cyc 0000f2a5
0ffd0000 //C 0f2ad   885 pop	pc
//G h_eof
0ded0000 //C 0f2ae   891 push	lr
//G print_reg_name
0d1d0000 //C 0f2af   892 push	r1
00100000 //C 0f2b0   893 mov	r1,r0
01180010 //C 0f2b1   894 cmp	r1,16		; go out if nr>16
91f2f2e6 //C 0f2b2   895 HI jmp	prn_ret
//R 0f2b2 #16 prn_ret 0000f2e6
0118000f //C 0f2b3   896 cmp	r1,15		; nr=Flag?
a1f2f2bb //C 0f2b4   897 LS jmp	prn_015
//R 0f2b4 #16 prn_015 0000f2bb
01020046 //C 0f2b5   899 mvzl	r0,'F'
//G prn_16
0400f497 //C 0f2b6   900 call	putchar
//R 0f2b6 #24 putchar 0000f497
01020020 //C 0f2b7   901 mvzl	r0,32
0400f497 //C 0f2b8   902 call	putchar
//R 0f2b8 #24 putchar 0000f497
0400f497 //C 0f2b9   903 call	putchar
//R 0f2b9 #24 putchar 0000f497
01f2f2e6 //C 0f2ba   904 jmp	prn_ret
//R 0f2ba #16 prn_ret 0000f2e6
0118000f //C 0f2bb   906 cmp	r1,15
//G prn_015
21f2f2c4 //C 0f2bc   907 jnz	prn_no15
//R 0f2bc #16 prn_no15 0000f2c4
0102f2c0 //C 0f2bd   908 mvzl	r0,prn_PC
//R 0f2bd #16 prn_PC 0000f2c0
0400f49e //C 0f2be   909 call	prints
//R 0f2be #24 prints 0000f49e
01f2f2e6 //C 0f2bf   910 jmp	prn_ret
//R 0f2bf #16 prn_ret 0000f2e6
00000050 //C 0f2c0   911 db	80
//G prn_PC
00000043 //C 0f2c1   911 db	67
00000020 //C 0f2c2   911 db	32
00000000 //C 0f2c3   911 db
0118000e //C 0f2c4   913 cmp	r1,14
//G prn_no15
21f2f2cd //C 0f2c5   914 jnz	prn_no14
//R 0f2c5 #16 prn_no14 0000f2cd
0102f2c9 //C 0f2c6   915 mvzl	r0,prn_LR
//R 0f2c6 #16 prn_LR 0000f2c9
0400f49e //C 0f2c7   916 call	prints
//R 0f2c7 #24 prints 0000f49e
01f2f2e6 //C 0f2c8   917 jmp	prn_ret
//R 0f2c8 #16 prn_ret 0000f2e6
0000004c //C 0f2c9   918 db	76
//G prn_LR
00000052 //C 0f2ca   918 db	82
00000020 //C 0f2cb   918 db	32
00000000 //C 0f2cc   918 db
0118000d //C 0f2cd   920 cmp	r1,13
//G prn_no14
21f2f2d6 //C 0f2ce   921 jnz	prn_no13
//R 0f2ce #16 prn_no13 0000f2d6
0102f2d2 //C 0f2cf   922 mvzl	r0,prn_SP
//R 0f2cf #16 prn_SP 0000f2d2
0400f49e //C 0f2d0   923 call	prints
//R 0f2d0 #24 prints 0000f49e
01f2f2e6 //C 0f2d1   924 jmp	prn_ret
//R 0f2d1 #16 prn_ret 0000f2e6
00000053 //C 0f2d2   925 db	83
//G prn_SP
00000050 //C 0f2d3   925 db	80
00000020 //C 0f2d4   925 db	32
00000000 //C 0f2d5   925 db
01020052 //C 0f2d6   927 mvzl	r0,'R'
//G prn_no13
0400f497 //C 0f2d7   928 call	putchar
//R 0f2d7 #24 putchar 0000f497
01180009 //C 0f2d8   929 cmp	r1,9
91f2f2e0 //C 0f2d9   930 HI jmp	prn_1015
//R 0f2d9 #16 prn_1015 0000f2e0
00000100 //C 0f2da   932 mov	r0,r1
//G prn_09
01040030 //C 0f2db   933 add	r0,'0'
0400f497 //C 0f2dc   934 call	putchar
//R 0f2dc #24 putchar 0000f497
01020020 //C 0f2dd   935 mvzl	r0,32
0400f497 //C 0f2de   936 call	putchar
//R 0f2de #24 putchar 0000f497
01f2f2e6 //C 0f2df   937 jmp	prn_ret
//R 0f2df #16 prn_ret 0000f2e6
01020031 //C 0f2e0   939 mvzl	r0,'1'
//G prn_1015
0400f497 //C 0f2e1   940 call	putchar
//R 0f2e1 #24 putchar 0000f497
00000100 //C 0f2e2   941 mov	r0,r1
0106000a //C 0f2e3   942 sub	r0,10
01040030 //C 0f2e4   943 add	r0,'0'
0400f497 //C 0f2e5   944 call	putchar
//R 0f2e5 #24 putchar 0000f497
0f1d0000 //C 0f2e6   946 pop	r1
//G prn_ret
0ffd0000 //C 0f2e7   947 pop	pc
0ded0000 //C 0f2e8   952 push	lr
//G print_reg_value
0d1d0000 //C 0f2e9   953 push	r1
01080010 //C 0f2ea   954 cmp	r0,16
91f2f2f0 //C 0f2eb   955 HI jmp	prv_ret
//R 0f2eb #16 prv_ret 0000f2f0
0112f67d //C 0f2ec   956 mvzl	r1,reg0
//R 0f2ec #16 reg0 0000f67d
0a010000 //C 0f2ed   957 ld	r0,r1,r0
01120004 //C 0f2ee   958 mvzl	r1,4
0400f4de //C 0f2ef   959 call	print_vhex
//R 0f2ef #24 print_vhex 0000f4de
0f1d0000 //C 0f2f0   961 pop	r1
//G prv_ret
0ffd0000 //C 0f2f1   962 pop	pc
0ded0000 //C 0f2f2   969 push	lr
//G print_reg_name_value
0dad0000 //C 0f2f3   970 push	r10
0d0d0000 //C 0f2f4   971 push	r0
00000a00 //C 0f2f5   972 mov	r0,r10
0400f2ae //C 0f2f6   973 call	print_reg_name
//R 0f2f6 #24 print_reg_name 0000f2ae
01020020 //C 0f2f7   974 mvzl	r0,32
0400f497 //C 0f2f8   975 call	putchar
//R 0f2f8 #24 putchar 0000f497
00000a00 //C 0f2f9   976 mov	r0,r10
0400f2e8 //C 0f2fa   977 call	print_reg_value
//R 0f2fa #24 print_reg_value 0000f2e8
0102000a //C 0f2fb   978 mvzl	r0,LF
//R 0f2fb #16 LF 0000000a
0400f497 //C 0f2fc   979 call	putchar
//R 0f2fc #24 putchar 0000f497
0f0d0000 //C 0f2fd   980 pop	r0
0fad0000 //C 0f2fe   981 pop	r10
0ffd0000 //C 0f2ff   982 pop	pc
0ded0000 //C 0f300   990 push	lr
//G print_flag
0400f497 //C 0f301   991 call	putchar
//R 0f301 #24 putchar 0000f497
001c0200 //C 0f302   992 test	r1,r2
21020031 //C 0f303   993 NZ mvzl r0,'1'
11020030 //C 0f304   994 Z  mvzl r0,'0'
0400f497 //C 0f305   995 call	putchar
//R 0f305 #24 putchar 0000f497
00000300 //C 0f306   996 mov	r0,r3
0400f497 //C 0f307   997 call	putchar
//R 0f307 #24 putchar 0000f497
0ffd0000 //C 0f308   998 pop	pc
0ded0000 //C 0f309  1003 push	lr
//G cmd_r
0700f67b //C 0f30a  1004 ld	r0,called
//R 0f30a #16 called 0000f67b
020b0000 //C 0f30b  1005 sz	r0
11f2f315 //C 0f30c  1006 jz	r_not_called
//R 0f30c #16 r_not_called 0000f315
0102f332 //C 0f30d  1008 mvzl	r0,msg_r_called
//R 0f30d #16 msg_r_called 0000f332
//G r_called
0400f49e //C 0f30e  1009 call	prints
//R 0f30e #24 prints 0000f49e
0700f68c //C 0f30f  1010 ld	r0,reg15
//R 0f30f #16 reg15 0000f68c
01120004 //C 0f310  1011 mvzl	r1,4
0400f4de //C 0f311  1012 call	print_vhex
//R 0f311 #24 print_vhex 0000f4de
0102000a //C 0f312  1013 mvzl	r0,LF
//R 0f312 #16 LF 0000000a
0400f497 //C 0f313  1014 call	putchar
//R 0f313 #24 putchar 0000f497
01f2f317 //C 0f314  1015 jmp	r_start
//R 0f314 #16 r_start 0000f317
0102f348 //C 0f315  1017 mvzl	r0,msg_r_notcalled
//R 0f315 #16 msg_r_notcalled 0000f348
//G r_not_called
0400f49e //C 0f316  1018 call	prints
//R 0f316 #24 prints 0000f49e
01a20000 //C 0f317  1020 mvzl	r10,0
//G r_start
0400f2f2 //C 0f318  1022 call	print_reg_name_value
//R 0f318 #24 print_reg_name_value 0000f2f2
//G r_cyc
01a40001 //C 0f319  1023 add	r10,1
01a80011 //C 0f31a  1024 cmp	r10,17
21f2f318 //C 0f31b  1025 jnz	r_cyc
//R 0f31b #16 r_cyc 0000f318
0710f68d //C 0f31c  1027 ld	r1,regf
//R 0f31c #16 regf 0000f68d
//G r_flags
01320020 //C 0f31d  1028 mvzl	r3,32
01020055 //C 0f31e  1029 mvzl	r0,'U'
01220020 //C 0f31f  1030 mvzl	r2,0x20
0400f300 //C 0f320  1031 call	print_flag
//R 0f320 #24 print_flag 0000f300
01020050 //C 0f321  1032 mvzl	r0,'P'
01220010 //C 0f322  1033 mvzl	r2,0x10
0400f300 //C 0f323  1034 call	print_flag
//R 0f323 #24 print_flag 0000f300
0102004f //C 0f324  1035 mvzl	r0,'O'
01220008 //C 0f325  1036 mvzl	r2,8
0400f300 //C 0f326  1037 call	print_flag
//R 0f326 #24 print_flag 0000f300
0102005a //C 0f327  1038 mvzl	r0,'Z'
01220004 //C 0f328  1039 mvzl	r2,4
0400f300 //C 0f329  1040 call	print_flag
//R 0f329 #24 print_flag 0000f300
01020043 //C 0f32a  1041 mvzl	r0,'C'
01220002 //C 0f32b  1042 mvzl	r2,2
0400f300 //C 0f32c  1043 call	print_flag
//R 0f32c #24 print_flag 0000f300
01020053 //C 0f32d  1044 mvzl	r0,'S'
01220001 //C 0f32e  1045 mvzl	r2,1
0132000a //C 0f32f  1046 mvzl	r3,LF
//R 0f32f #16 LF 0000000a
0400f300 //C 0f330  1047 call	print_flag
//R 0f330 #24 print_flag 0000f300
0ffd0000 //C 0f331  1048 pop	pc
0000004d //C 0f332  1050 db	77
//G msg_r_called
0000006f //C 0f333  1050 db	111
0000006e //C 0f334  1050 db	110
00000069 //C 0f335  1050 db	105
00000074 //C 0f336  1050 db	116
0000006f //C 0f337  1050 db	111
00000072 //C 0f338  1050 db	114
00000020 //C 0f339  1050 db	32
00000063 //C 0f33a  1050 db	99
00000061 //C 0f33b  1050 db	97
0000006c //C 0f33c  1050 db	108
0000006c //C 0f33d  1050 db	108
00000065 //C 0f33e  1050 db	101
00000064 //C 0f33f  1050 db	100
00000020 //C 0f340  1050 db	32
00000066 //C 0f341  1050 db	102
00000072 //C 0f342  1050 db	114
0000006f //C 0f343  1050 db	111
0000006d //C 0f344  1050 db	109
0000003a //C 0f345  1050 db	58
00000020 //C 0f346  1050 db	32
00000000 //C 0f347  1050 db
0000004d //C 0f348  1051 db	77
//G msg_r_notcalled
0000006f //C 0f349  1051 db	111
0000006e //C 0f34a  1051 db	110
00000069 //C 0f34b  1051 db	105
00000074 //C 0f34c  1051 db	116
0000006f //C 0f34d  1051 db	111
00000072 //C 0f34e  1051 db	114
00000020 //C 0f34f  1051 db	32
0000006e //C 0f350  1051 db	110
0000006f //C 0f351  1051 db	111
00000074 //C 0f352  1051 db	116
00000020 //C 0f353  1051 db	32
00000063 //C 0f354  1051 db	99
00000061 //C 0f355  1051 db	97
0000006c //C 0f356  1051 db	108
0000006c //C 0f357  1051 db	108
00000065 //C 0f358  1051 db	101
00000064 //C 0f359  1051 db	100
00000020 //C 0f35a  1051 db	32
00000062 //C 0f35b  1051 db	98
00000079 //C 0f35c  1051 db	121
00000020 //C 0f35d  1051 db	32
00000075 //C 0f35e  1051 db	117
00000073 //C 0f35f  1051 db	115
00000065 //C 0f360  1051 db	101
00000072 //C 0f361  1051 db	114
0000000a //C 0f362  1051 db	10
00000000 //C 0f363  1051 db
0ded0000 //C 0f364  1056 push	lr
//G cmd_rx
07a0f67c //C 0f365  1057 ld	r10,nuof_reg	; Reg num is in R10
//R 0f365 #16 nuof_reg 0000f67c
01a80010 //C 0f366  1058 cmp	r10,16
a1f2f37c //C 0f367  1059 LS jmp	rx_nr_ok
//R 0f367 #16 rx_nr_ok 0000f37c
0102f36b //C 0f368  1060 mvzl	r0,rx_err_nr
//R 0f368 #16 rx_err_nr 0000f36b
0400f4d7 //C 0f369  1061 call	printsnl
//R 0f369 #24 printsnl 0000f4d7
01f2f398 //C 0f36a  1062 jmp	rx_ret
//R 0f36a #16 rx_ret 0000f398
0000004e //C 0f36b  1064 db	78
//G rx_err_nr
0000006f //C 0f36c  1064 db	111
00000020 //C 0f36d  1064 db	32
00000073 //C 0f36e  1064 db	115
00000075 //C 0f36f  1064 db	117
00000063 //C 0f370  1064 db	99
00000068 //C 0f371  1064 db	104
00000020 //C 0f372  1064 db	32
00000072 //C 0f373  1064 db	114
00000065 //C 0f374  1064 db	101
00000067 //C 0f375  1064 db	103
00000069 //C 0f376  1064 db	105
00000073 //C 0f377  1064 db	115
00000074 //C 0f378  1064 db	116
00000065 //C 0f379  1064 db	101
00000072 //C 0f37a  1064 db	114
00000000 //C 0f37b  1064 db
0122f675 //C 0f37c  1066 mvzl	r2,words
//R 0f37c #16 words 0000f675
//G rx_nr_ok
0e420001 //C 0f37d  1067 ld	r4,r2,1		; get aof first parameter
024b0000 //C 0f37e  1068 sz	r4		; is it NULL?
11f2f397 //C 0f37f  1069 jz	rx_print
//R 0f37f #16 rx_print 0000f397
00000400 //C 0f380  1070 mov	r0,r4
0400f45a //C 0f381  1071 call	htoi
//R 0f381 #24 htoi 0000f45a
00500100 //C 0f382  1072 mov	r5,r1		; Value is in R5
31f2f393 //C 0f383  1073 C1 jmp	rx_val_ok
//R 0f383 #16 rx_val_ok 0000f393
0102f387 //C 0f384  1074 mvzl	r0,rx_err_val
//R 0f384 #16 rx_err_val 0000f387
0400f4d7 //C 0f385  1075 call	printsnl
//R 0f385 #24 printsnl 0000f4d7
01f2f398 //C 0f386  1076 jmp	rx_ret
//R 0f386 #16 rx_ret 0000f398
00000056 //C 0f387  1078 db	86
//G rx_err_val
00000061 //C 0f388  1078 db	97
0000006c //C 0f389  1078 db	108
00000075 //C 0f38a  1078 db	117
00000065 //C 0f38b  1078 db	101
00000020 //C 0f38c  1078 db	32
00000065 //C 0f38d  1078 db	101
00000072 //C 0f38e  1078 db	114
00000072 //C 0f38f  1078 db	114
0000006f //C 0f390  1078 db	111
00000072 //C 0f391  1078 db	114
00000000 //C 0f392  1078 db
01a80010 //C 0f393  1080 cmp	r10,16		; Flag reg?
//G rx_val_ok
115f003f //C 0f394  1081 EQ and	r5,0x3f
0102f67d //C 0f395  1082 mvzl	r0,reg0
//R 0f395 #16 reg0 0000f67d
08500a00 //C 0f396  1083 st	r5,r0,r10
0400f2f2 //C 0f397  1085 call	print_reg_name_value
//R 0f397 #24 print_reg_name_value 0000f2f2
//G rx_print
0ffd0000 //C 0f398  1087 pop	pc
//G rx_ret
0102000d //C 0f399  1093 mvzl	r0,13
//G cmd_sp
0600f67c //C 0f39a  1094 st	r0,nuof_reg
//R 0f39a #16 nuof_reg 0000f67c
01f2f364 //C 0f39b  1095 jmp	cmd_rx
//R 0f39b #16 cmd_rx 0000f364
0102000e //C 0f39c  1100 mvzl	r0,14
//G cmd_lr
0600f67c //C 0f39d  1101 st	r0,nuof_reg
//R 0f39d #16 nuof_reg 0000f67c
01f2f364 //C 0f39e  1102 jmp	cmd_rx
//R 0f39e #16 cmd_rx 0000f364
0102000f //C 0f39f  1107 mvzl	r0,15
//G cmd_pc
0600f67c //C 0f3a0  1108 st	r0,nuof_reg
//R 0f3a0 #16 nuof_reg 0000f67c
01f2f364 //C 0f3a1  1109 jmp	cmd_rx
//R 0f3a1 #16 cmd_rx 0000f364
01020010 //C 0f3a2  1114 mvzl	r0,16
//G cmd_f
0600f67c //C 0f3a3  1115 st	r0,nuof_reg
//R 0f3a3 #16 nuof_reg 0000f67c
01f2f364 //C 0f3a4  1116 jmp	cmd_rx
//R 0f3a4 #16 cmd_rx 0000f364
0d3d0000 //C 0f3a5  1129 push	r3
//G strchr
0d4d0000 //C 0f3a6  1130 push	r4
01220000 //C 0f3a7  1132 mvzl	r2,0		; byte index re-start
//G strchr_cyc
0e310000 //C 0f3a8  1133 ld	r3,r1		; get next word
023b0000 //C 0f3a9  1134 sz	r3		; check for eof
11f2f3b7 //C 0f3aa  1135 jz	strchr_no	; eof string found
//R 0f3aa #16 strchr_no 0000f3b7
06414302 //C 0f3ab  1137 getbz	r4,r3,r2	; pick a byte
//G strchr_go
024b0000 //C 0f3ac  1138 sz	r4		; is it zero?
11f2f3b3 //C 0f3ad  1139 jz	strchr_word	; if yes, pick next word
//R 0f3ad #16 strchr_word 0000f3b3
00480000 //C 0f3ae  1140 cmp	r4,r0		; compare
11f2f3b5 //C 0f3af  1141 jz	strchr_yes	; found it
//R 0f3af #16 strchr_yes 0000f3b5
01240001 //C 0f3b0  1143 inc	r2		; advance byte index
//G strchr_byte
01280004 //C 0f3b1  1144 cmp	r2,4		; check byte overflow
21f2f3ab //C 0f3b2  1145 jnz	strchr_go	; no, overflow, go on
//R 0f3b2 #16 strchr_go 0000f3ab
011a0001 //C 0f3b3  1147 plus	r1,1		; go to next char
//G strchr_word
01f2f3a7 //C 0f3b4  1148 jmp	strchr_cyc
//R 0f3b4 #16 strchr_cyc 0000f3a7
020c0000 //C 0f3b5  1150 sec
//G strchr_yes
01f2f3b9 //C 0f3b6  1151 jmp	strchr_ret
//R 0f3b6 #16 strchr_ret 0000f3b9
01120000 //C 0f3b7  1153 mvzl	r1,0
//G strchr_no
020d0000 //C 0f3b8  1154 clc
0f4d0000 //C 0f3b9  1156 pop	r4
//G strchr_ret
0f3d0000 //C 0f3ba  1157 pop	r3
00f00e00 //C 0f3bb  1160 ret
0ded0000 //C 0f3bc  1171 push	lr		; Save used registers
//G str_cmp_eq
0d0d0000 //C 0f3bd  1172 push	r0		; and input parameters
0d2d0000 //C 0f3be  1174 push	r2
0d4d0000 //C 0f3bf  1175 push	r4
0d5d0000 //C 0f3c0  1176 push	r5
0d6d0000 //C 0f3c1  1177 push	r6
0d7d0000 //C 0f3c2  1178 push	r7		; byte idx in string 1
0d8d0000 //C 0f3c3  1179 push	r8		; byte idx in string 2
01720000 //C 0f3c4  1180 mvzl	r7,0
01820000 //C 0f3c5  1181 mvzl	r8,0
0e200000 //C 0f3c6  1183 ld	r2,r0		; Got one char from first str
//G streq_cyc
022b0000 //C 0f3c7  1184 sz	r2		; is it eos?
11f2f3d7 //C 0f3c8  1185 jz	streq_pick2	; if yes, go on
//R 0f3c8 #16 streq_pick2 0000f3d7
06214207 //C 0f3c9  1186 getbz	r2,r2,r7	; pick one byte
022b0000 //C 0f3ca  1187 sz	r2		; is it 0?
21f2f3d7 //C 0f3cb  1188 jnz	streq_pick2	; if not, go on
//R 0f3cb #16 streq_pick2 0000f3d7
01740001 //C 0f3cc  1189 inc	r7		; step to next byte
01780004 //C 0f3cd  1190 cmp	r7,4		; word is overflowed?
11f2f3d3 //C 0f3ce  1191 jz	streq_p1ov
//R 0f3ce #16 streq_p1ov 0000f3d3
0e200000 //C 0f3cf  1193 ld	r2,r0		; pick orig word, and
//G streq_p1nov
06214207 //C 0f3d0  1194 getbz	r2,r2,r7	; check next byte
022b0000 //C 0f3d1  1195 sz	r2		; is it 0?
21f2f3d7 //C 0f3d2  1196 jnz	streq_pick2	; if not, go on
//R 0f3d2 #16 streq_pick2 0000f3d7
01040001 //C 0f3d3  1198 inc	r0		; if yes, move pointer
//G streq_p1ov
01720000 //C 0f3d4  1199 mvzl	r7,0		; and reset byte counter
0e200000 //C 0f3d5  1200 ld	r2,r0		; get first byte of next word
06214207 //C 0f3d6  1201 getbz	r2,r2,r7
0e610000 //C 0f3d7  1204 ld	r6,r1		; pick from second string
//G streq_pick2
026b0000 //C 0f3d8  1205 sz	r6		; is it eos?
11f2f3e8 //C 0f3d9  1206 jz	streq_prep	; if yes, go to compare
//R 0f3d9 #16 streq_prep 0000f3e8
06614608 //C 0f3da  1207 getbz	r6,r6,r8	; pick a byte
026b0000 //C 0f3db  1208 sz	r6		; is it 0?
21f2f3e8 //C 0f3dc  1209 jnz	streq_prep	; if not, go to compare
//R 0f3dc #16 streq_prep 0000f3e8
01840001 //C 0f3dd  1210 inc	r8		; step to next byte
01880004 //C 0f3de  1211 cmp	r8,4		; is word overflowed?
11f2f3e4 //C 0f3df  1212 jz	streq_p2ov
//R 0f3df #16 streq_p2ov 0000f3e4
0e610000 //C 0f3e0  1214 ld	r6,r1		; pick orig word, and
//G streq_p2nov
06614608 //C 0f3e1  1215 getbz	r6,r6,r8	; check next byte
026b0000 //C 0f3e2  1216 sz	r6		; is it 0?
21f2f3e8 //C 0f3e3  1217 jnz	streq_prep	; if not, go on
//R 0f3e3 #16 streq_prep 0000f3e8
01140001 //C 0f3e4  1219 inc	r1		; if yes, move pointer
//G streq_p2ov
01820000 //C 0f3e5  1220 mvzl	r8,0		; and reset byte counter
0e610000 //C 0f3e6  1221 ld	r6,r1		; get next word
06614608 //C 0f3e7  1222 getbz	r6,r6,r8	; and pick first byte
023b0000 //C 0f3e8  1225 sz	r3		; Prepare for comparing
//G streq_prep
112d0020 //C 0f3e9  1226 Z1 or	r2,0x20		; if insensitive case
023b0000 //C 0f3ea  1227 sz	r3
116d0020 //C 0f3eb  1228 Z1 or	r6,0x20
00280600 //C 0f3ec  1229 cmp	r2,r6		; compare them
21f2f407 //C 0f3ed  1230 jnz	streq_no	; if differs: strings are not equal
//R 0f3ed #16 streq_no 0000f407
0e200000 //C 0f3ee  1232 ld	r2,r0		; Pick original (non-prepared)
0e610000 //C 0f3ef  1233 ld	r6,r1		; chars to check EOS
06214207 //C 0f3f0  1234 getbz	r2,r2,r7
06614608 //C 0f3f1  1235 getbz	r6,r6,r8
022b0000 //C 0f3f2  1236 sz	r2		; convert them to boolean
21220001 //C 0f3f3  1237 Z0 mvzl	r2,1		; values in R2,R6
11220000 //C 0f3f4  1238 Z1 mvzl	r2,0		; and copy in R4,R5
00400200 //C 0f3f5  1239 mov	r4,r2
026b0000 //C 0f3f6  1240 sz	r6
21620001 //C 0f3f7  1241 Z0 mvzl	r6,1
11620000 //C 0f3f8  1242 Z1 mvzl r6,0
00500600 //C 0f3f9  1243 mov	r5,r6
004d0500 //C 0f3fa  1244 or	r4,r5		; if both are EOS: equal
11f2f409 //C 0f3fb  1245 jz	streq_yes
//R 0f3fb #16 streq_yes 0000f409
002f0600 //C 0f3fc  1246 and 	r2,r6		; just one is EOS: not equal
11f2f407 //C 0f3fd  1247 jz	streq_no
//R 0f3fd #16 streq_no 0000f407
01740001 //C 0f3fe  1250 inc	r7		; step byte count
//G streq_next
01780004 //C 0f3ff  1251 cmp	r7,4		; if word overflows
110a0001 //C 0f400  1252 Z plus	r0,1		; then step the pointer
11720000 //C 0f401  1253 Z mvzl	r7,0		; and reset the byte counter
01840001 //C 0f402  1255 inc	r8
01880004 //C 0f403  1256 cmp	r8,4
111a0001 //C 0f404  1257 Z plus	r1,1
11820000 //C 0f405  1258 Z mvzl	r8,0
01f2f3c6 //C 0f406  1259 jmp	streq_cyc
//R 0f406 #16 streq_cyc 0000f3c6
020d0000 //C 0f407  1262 clc			; False result
//G streq_no
01f2f40a //C 0f408  1263 jmp	streq_ret
//R 0f408 #16 streq_ret 0000f40a
020c0000 //C 0f409  1266 sec			; True result
//G streq_yes
0e610000 //C 0f40a  1269 ld	r6,r1		; forward R1 to EOS
//G streq_ret
026b0000 //C 0f40b  1270 sz	r6
11f2f40f //C 0f40c  1271 jz	streq_ret_ret
//R 0f40c #16 streq_ret_ret 0000f40f
01140001 //C 0f40d  1272 inc	r1
01f2f40a //C 0f40e  1273 jmp	streq_ret
//R 0f40e #16 streq_ret 0000f40a
0f8d0000 //C 0f40f  1275 pop	r8
//G streq_ret_ret
0f7d0000 //C 0f410  1276 pop	r7
0f6d0000 //C 0f411  1277 pop	r6
0f5d0000 //C 0f412  1278 pop	r5
0f4d0000 //C 0f413  1279 pop	r4
0f2d0000 //C 0f414  1280 pop	r2
0f0d0000 //C 0f415  1282 pop	r0
0ffd0000 //C 0f416  1283 pop	pc
0ded0000 //C 0f417  1291 push	lr
//G streq
0d1d0000 //C 0f418  1292 push	r1
0d3d0000 //C 0f419  1293 push	r3
01320001 //C 0f41a  1294 mvzl	r3,1
0400f3bc //C 0f41b  1295 call	str_cmp_eq
//R 0f41b #24 str_cmp_eq 0000f3bc
0f3d0000 //C 0f41c  1296 pop	r3
0f1d0000 //C 0f41d  1297 pop	r1
0ffd0000 //C 0f41e  1298 pop	pc
0ded0000 //C 0f41f  1306 push	lr
//G strieq
0d1d0000 //C 0f420  1307 push	r1
0d3d0000 //C 0f421  1308 push	r3
01320000 //C 0f422  1309 mvzl	r3,0
0400f3bc //C 0f423  1310 call	str_cmp_eq
//R 0f423 #24 str_cmp_eq 0000f3bc
0f3d0000 //C 0f424  1311 pop	r3
0f1d0000 //C 0f425  1312 pop	r1
0ffd0000 //C 0f426  1313 pop	pc
0108002f //C 0f427  1322 cmp	r0,'/'
//G hexchar2value
a1f2f43d //C 0f428  1323 LS jmp	hc2v_nok
//R 0f428 #16 hc2v_nok 0000f43d
01080039 //C 0f429  1324 cmp	r0,'9'
a1f2f43a //C 0f42a  1325 LS jmp	hc2v_0_9
//R 0f42a #16 hc2v_0_9 0000f43a
01080040 //C 0f42b  1326 cmp	r0,'@'
a1f2f43d //C 0f42c  1327 LS jmp	hc2v_nok
//R 0f42c #16 hc2v_nok 0000f43d
01080046 //C 0f42d  1328 cmp	r0,'F'
a1f2f437 //C 0f42e  1329 LS jmp	hc2v_A_F
//R 0f42e #16 hc2v_A_F 0000f437
01080060 //C 0f42f  1330 cmp	r0,'`'
a1f2f43d //C 0f430  1331 LS jmp	hc2v_nok
//R 0f430 #16 hc2v_nok 0000f43d
01080066 //C 0f431  1332 cmp	r0,'f'
a1f2f434 //C 0f432  1333 LS jmp	hc2v_a_f
//R 0f432 #16 hc2v_a_f 0000f434
01f2f43d //C 0f433  1334 jmp	hc2v_nok
//R 0f433 #16 hc2v_nok 0000f43d
0104000a //C 0f434  1336 add	r0,10
//G hc2v_a_f
01060061 //C 0f435  1337 sub	r0,'a'
01f2f43b //C 0f436  1338 jmp	hc2v_ok
//R 0f436 #16 hc2v_ok 0000f43b
0104000a //C 0f437  1340 add	r0,10
//G hc2v_A_F
01060041 //C 0f438  1341 sub	r0,'A'
01f2f43b //C 0f439  1342 jmp	hc2v_ok
//R 0f439 #16 hc2v_ok 0000f43b
01060030 //C 0f43a  1344 sub	r0,'0'
//G hc2v_0_9
020c0000 //C 0f43b  1346 sec
//G hc2v_ok
00f00e00 //C 0f43c  1347 ret
020d0000 //C 0f43d  1349 clc
//G hc2v_nok
00f00e00 //C 0f43e  1350 ret
0d1d0000 //C 0f43f  1354 push	r1
//G value2Hexchar
010f000f //C 0f440  1355 and	r0,0xf
0112f445 //C 0f441  1356 mvzl	r1,v2hc_table
//R 0f441 #16 v2hc_table 0000f445
0a010000 //C 0f442  1357 ld	r0,r1,r0
0f1d0000 //C 0f443  1358 pop	r1
00f00e00 //C 0f444  1359 ret
00000030 //C 0f445  1360 db	48
//G v2hc_table
00000031 //C 0f446  1360 db	49
00000032 //C 0f447  1360 db	50
00000033 //C 0f448  1360 db	51
00000034 //C 0f449  1360 db	52
00000035 //C 0f44a  1360 db	53
00000036 //C 0f44b  1360 db	54
00000037 //C 0f44c  1360 db	55
00000038 //C 0f44d  1360 db	56
00000039 //C 0f44e  1360 db	57
00000041 //C 0f44f  1360 db	65
00000042 //C 0f450  1360 db	66
00000043 //C 0f451  1360 db	67
00000044 //C 0f452  1360 db	68
00000045 //C 0f453  1360 db	69
00000046 //C 0f454  1360 db	70
00000000 //C 0f455  1360 db
0ded0000 //C 0f456  1363 push	lr
//G value2hexchar
0400f43f //C 0f457  1364 call	value2Hexchar
//R 0f457 #24 value2Hexchar 0000f43f
010d0020 //C 0f458  1365 or	r0,0x20
0ffd0000 //C 0f459  1366 pop	pc
0ded0000 //C 0f45a  1375 push	lr
//G htoi
0d2d0000 //C 0f45b  1376 push	r2
0d3d0000 //C 0f45c  1377 push	r3
0d4d0000 //C 0f45d  1378 push	r4
0d5d0000 //C 0f45e  1379 push	r5
01120000 //C 0f45f  1380 mvzl	r1,0		; return value
01320000 //C 0f460  1381 mvzl	r3,0		; index
01520000 //C 0f461  1383 mvzl	r5,0
//G htoi_cyc
0b438000 //C 0f462  1384 ld	r4,r3+,r0	; pick a char
024b0000 //C 0f463  1385 sz	r4		; check eof string
11f2f480 //C 0f464  1386 jz	htoi_eos
//R 0f464 #16 htoi_eos 0000f480
06214405 //C 0f465  1388 getbz	r2,r4,r5
//G htoi_byte
022b0000 //C 0f466  1389 sz	r2
11f2f461 //C 0f467  1390 jz	htoi_cyc
//R 0f467 #16 htoi_cyc 0000f461
0128002e //C 0f468  1391 cmp	r2,'.'		; skip separators
11f2f47a //C 0f469  1392 jz	htoi_next
//R 0f469 #16 htoi_next 0000f47a
0128005f //C 0f46a  1393 cmp	r2,'_'
11f2f47a //C 0f46b  1394 jz	htoi_next
//R 0f46b #16 htoi_next 0000f47a
0128002d //C 0f46c  1395 cmp	r2,'-'
11f2f47a //C 0f46d  1396 jz	htoi_next
//R 0f46d #16 htoi_next 0000f47a
0d0d0000 //C 0f46e  1397 push	r0
00000200 //C 0f46f  1398 mov	r0,r2
0400f427 //C 0f470  1399 call	hexchar2value
//R 0f470 #24 hexchar2value 0000f427
00200000 //C 0f471  1400 mov	r2,r0
0f0d0000 //C 0f472  1401 pop	r0
41f2f47e //C 0f473  1402 C0 jmp	htoi_nok
//R 0f473 #16 htoi_nok 0000f47e
02180000 //C 0f474  1403 shl	r1
02180000 //C 0f475  1404 shl	r1
02180000 //C 0f476  1405 shl	r1
02180000 //C 0f477  1406 shl	r1
012f000f //C 0f478  1407 and	r2,0xf
001d0200 //C 0f479  1408 or	r1,r2
01540001 //C 0f47a  1410 inc	r5
//G htoi_next
01580004 //C 0f47b  1411 cmp	r5,4
11f2f461 //C 0f47c  1412 jz	htoi_cyc
//R 0f47c #16 htoi_cyc 0000f461
01f2f465 //C 0f47d  1413 jmp	htoi_byte
//R 0f47d #16 htoi_byte 0000f465
020d0000 //C 0f47e  1415 clc
//G htoi_nok
01f2f483 //C 0f47f  1416 jmp	htoi_ret
//R 0f47f #16 htoi_ret 0000f483
01380001 //C 0f480  1418 cmp	r3,1
//G htoi_eos
920d0000 //C 0f481  1419 HI clc
a20c0000 //C 0f482  1420 LS sec
0f5d0000 //C 0f483  1422 pop	r5
//G htoi_ret
0f4d0000 //C 0f484  1423 pop	r4
0f3d0000 //C 0f485  1424 pop	r3
0f2d0000 //C 0f486  1425 pop	r2
0ffd0000 //C 0f487  1426 pop	pc
0d0d0000 //C 0f488  1438 push	r0
//G check_uart
0700ff42 //C 0f489  1439 ld	r0,UART_RSTAT
//R 0f489 #16 UART_RSTAT 0000ff42
010c0001 //C 0f48a  1441 test	r0,1		; check if queue is not empty
020d0000 //C 0f48b  1442 clc
220c0000 //C 0f48c  1443 Z0 sec
0f0d0000 //C 0f48d  1444 pop	r0
30f00e00 //C 0f48e  1445 C1 ret
00f00e00 //C 0f48f  1446 ret
0700ff40 //C 0f490  1491 ld	r0,UART_DR
//R 0f490 #16 UART_DR 0000ff40
//G read
0600ff46 //C 0f491  1492 st	r0,UART_IRA
//R 0f491 #16 UART_IRA 0000ff46
00f00e00 //C 0f492  1493 ret
0400f488 //C 0f493  1525 call	check_uart
//R 0f493 #24 check_uart 0000f488
//G getchar
41f2f493 //C 0f494  1526 C0 jmp	getchar
//R 0f494 #16 getchar 0000f493
0400f490 //C 0f495  1527 call	read
//R 0f495 #24 read 0000f490
00f00e00 //C 0f496  1528 ret
0d9d0000 //C 0f497  1536 push	r9
//G putchar
0790ff43 //C 0f498  1543 ld	r9,UART_TSTAT
//R 0f498 #16 UART_TSTAT 0000ff43
//G wait_tc
019c0001 //C 0f499  1544 test	r9,1
11f2f498 //C 0f49a  1545 jz	wait_tc
//R 0f49a #16 wait_tc 0000f498
0600ff40 //C 0f49b  1546 st	r0,UART_DR
//R 0f49b #16 UART_DR 0000ff40
0f9d0000 //C 0f49c  1548 pop	r9
//G putchar_ret
00f00e00 //C 0f49d  1549 ret
0ded0000 //C 0f49e  1557 push	lr
//G prints
0d0d0000 //C 0f49f  1558 push	r0
0d3d0000 //C 0f4a0  1559 push	r3
0d4d0000 //C 0f4a1  1560 push	r4
0d2d0000 //C 0f4a2  1561 push	r2
0d1d0000 //C 0f4a3  1562 push	r1
0d5d0000 //C 0f4a4  1563 push	r5
01420000 //C 0f4a5  1565 mvzl	r4,0
020b0000 //C 0f4a6  1566 sz	r0
1102f6c8 //C 0f4a7  1567 Z1 mvzl	r0,null_str
//R 0f4a7 #16 null_str 0000f6c8
00200000 //C 0f4a8  1568 mov	r2,r0
0b148200 //C 0f4a9  1570 ld	r1,r4+,r2
//G prints_go
021b0000 //C 0f4aa  1571 sz	r1
01520000 //C 0f4ab  1572 mvzl	r5,0
11f2f4b5 //C 0f4ac  1573 jz	prints_done
//R 0f4ac #16 prints_done 0000f4b5
06014105 //C 0f4ad  1575 getbz	r0,r1,r5
//G prints_byte
020b0000 //C 0f4ae  1576 sz	r0
2400f497 //C 0f4af  1577 NZ call	putchar
//R 0f4af #24 putchar 0000f497
11f2f4a9 //C 0f4b0  1578 jz 	prints_go
//R 0f4b0 #16 prints_go 0000f4a9
01540001 //C 0f4b1  1579 inc	r5
01580004 //C 0f4b2  1580 cmp	r5,4
21f2f4ad //C 0f4b3  1581 jnz	prints_byte
//R 0f4b3 #16 prints_byte 0000f4ad
01f2f4a9 //C 0f4b4  1582 jmp	prints_go
//R 0f4b4 #16 prints_go 0000f4a9
0f5d0000 //C 0f4b5  1585 pop	r5
//G prints_done
0f1d0000 //C 0f4b6  1586 pop	r1
0f2d0000 //C 0f4b7  1587 pop	r2
0f4d0000 //C 0f4b8  1588 pop	r4
0f3d0000 //C 0f4b9  1589 pop	r3
0f0d0000 //C 0f4ba  1590 pop	r0
0ffd0000 //C 0f4bb  1591 pop	pc
00000000 //C 0f4bc  1599 dd	0
//G pes_ret_to
0ded0000 //C 0f4bd  1602 push	lr
//G pes
0d0d0000 //C 0f4be  1603 push	r0
0d1d0000 //C 0f4bf  1604 push	r1
0d2d0000 //C 0f4c0  1605 push	r2
0d3d0000 //C 0f4c1  1606 push	r3
00100e00 //C 0f4c2  1607 mov	r1,lr
0e210000 //C 0f4c3  1609 ld	r2,r1
//G pes_next
01140001 //C 0f4c4  1610 inc	r1
022b0000 //C 0f4c5  1611 sz	r2
11f2f4d0 //C 0f4c6  1612 jz	pes_done
//R 0f4c6 #16 pes_done 0000f4d0
01320000 //C 0f4c7  1613 mvzl	r3,0
06014203 //C 0f4c8  1615 getbz	r0,r2,r3
//G pes_byte
020b0000 //C 0f4c9  1616 sz	r0
2400f497 //C 0f4ca  1617 NZ call	putchar
//R 0f4ca #24 putchar 0000f497
11f2f4c3 //C 0f4cb  1618 jz	pes_next
//R 0f4cb #16 pes_next 0000f4c3
01340001 //C 0f4cc  1619 inc	r3
01380004 //C 0f4cd  1620 cmp	r3,4
21f2f4c8 //C 0f4ce  1621 jnz	pes_byte
//R 0f4ce #16 pes_byte 0000f4c8
01f2f4c3 //C 0f4cf  1622 jmp	pes_next
//R 0f4cf #16 pes_next 0000f4c3
0610f4bc //C 0f4d0  1624 st	r1,pes_ret_to
//R 0f4d0 #16 pes_ret_to 0000f4bc
//G pes_done
0f3d0000 //C 0f4d1  1625 pop	r3
0f2d0000 //C 0f4d2  1626 pop	r2
0f1d0000 //C 0f4d3  1627 pop	r1
0f0d0000 //C 0f4d4  1628 pop	r0
0fed0000 //C 0f4d5  1629 pop	lr
07f0f4bc //C 0f4d6  1630 ld	pc,pes_ret_to
//R 0f4d6 #16 pes_ret_to 0000f4bc
0ded0000 //C 0f4d7  1638 push	lr
//G printsnl
0400f49e //C 0f4d8  1639 call	prints
//R 0f4d8 #24 prints 0000f49e
0d0d0000 //C 0f4d9  1640 push	r0
0102000a //C 0f4da  1641 mvzl	r0,LF
//R 0f4da #16 LF 0000000a
0400f497 //C 0f4db  1642 call	putchar
//R 0f4db #24 putchar 0000f497
0f0d0000 //C 0f4dc  1643 pop	r0
0ffd0000 //C 0f4dd  1644 pop	pc
0ded0000 //C 0f4de  1652 push	lr
//G print_vhex
0d0d0000 //C 0f4df  1653 push	r0
0d1d0000 //C 0f4e0  1654 push	r1
0d2d0000 //C 0f4e1  1655 push	r2
0d3d0000 //C 0f4e2  1656 push	r3
0d4d0000 //C 0f4e3  1657 push	r4
00300000 //C 0f4e4  1658 mov	r3,r0
01220000 //C 0f4e5  1659 mvzl	r2,0
01420001 //C 0f4e6  1660 mvzl	r4,1
01020000 //C 0f4e7  1663 mvzl	r0,0
//G print_vhex_cyc
02380000 //C 0f4e8  1664 shl	r3
02070000 //C 0f4e9  1665 rol	r0
02380000 //C 0f4ea  1666 shl	r3
02070000 //C 0f4eb  1667 rol	r0
02380000 //C 0f4ec  1668 shl	r3
02070000 //C 0f4ed  1669 rol	r0
02380000 //C 0f4ee  1670 shl	r3
02070000 //C 0f4ef  1671 rol	r0
0400f43f //C 0f4f0  1672 call	value2Hexchar
//R 0f4f0 #24 value2Hexchar 0000f43f
0400f497 //C 0f4f1  1673 call	putchar
//R 0f4f1 #24 putchar 0000f497
01240001 //C 0f4f2  1674 add	r2,1
01280008 //C 0f4f3  1675 cmp	r2,8
11f2f4fe //C 0f4f4  1676 jz	print_vhex_ret
//R 0f4f4 #16 print_vhex_ret 0000f4fe
021b0000 //C 0f4f5  1677 sz	r1
11f2f4fc //C 0f4f6  1678 jz	print_vhex_nosep
//R 0f4f6 #16 print_vhex_nosep 0000f4fc
00480100 //C 0f4f7  1679 cmp	r4,r1
21f2f4fc //C 0f4f8  1680 jnz	print_vhex_nosep
//R 0f4f8 #16 print_vhex_nosep 0000f4fc
0102005f //C 0f4f9  1681 mvzl	r0,'_'
0400f497 //C 0f4fa  1682 call	putchar
//R 0f4fa #24 putchar 0000f497
01420000 //C 0f4fb  1683 mvzl	r4,0
01440001 //C 0f4fc  1685 add	r4,1
//G print_vhex_nosep
01f2f4e7 //C 0f4fd  1686 jmp	print_vhex_cyc
//R 0f4fd #16 print_vhex_cyc 0000f4e7
0f4d0000 //C 0f4fe  1688 pop	r4
//G print_vhex_ret
0f3d0000 //C 0f4ff  1689 pop	r3
0f2d0000 //C 0f500  1690 pop	r2
0f1d0000 //C 0f501  1691 pop	r1
0f0d0000 //C 0f502  1692 pop	r0
0ffd0000 //C 0f503  1693 pop	pc
0ded0000 //C 0f504  1701 push	lr
//G div
0d4d0000 //C 0f505  1702 push	r4
021b0000 //C 0f506  1704 sz	r1
21f2f50b //C 0f507  1705 NZ jmp	div_dok
//R 0f507 #16 div_dok 0000f50b
00200000 //C 0f508  1706 mov	r2,r0		; div by zero
01320000 //C 0f509  1707 mvzl	r3,0
01f2f51c //C 0f50a  1708 jmp	div_ret
//R 0f50a #16 div_ret 0000f51c
01220000 //C 0f50b  1710 mvzl	r2,0		; Q= 0
//G div_dok
01320000 //C 0f50c  1711 mvzl	r3,0		; R= 0
01418000 //C 0f50d  1712 mvh	r4,0x80000000	; m= 1<<31
01400000 //C 0f50e  1713 mvl	r4,0x80000000
024b0000 //C 0f50f  1715 sz	r4
//G div_cyc
11f2f51c //C 0f510  1716 Z jmp	div_ret
//R 0f510 #16 div_ret 0000f51c
02380000 //C 0f511  1717 shl	r3		; r<<= 1
000c0400 //C 0f512  1718 test	r0,r4		; if (n&m)
213d0001 //C 0f513  1719 NZ or	r3,1		; r|= 1
00380100 //C 0f514  1720 cmp	r3,r1		; if (r>=d)
41f2f51a //C 0f515  1721 LO jmp	div_cyc_next
//R 0f515 #16 div_cyc_next 0000f51a
00360100 //C 0f516  1722 sub	r3,r1		;r-= d
002d0400 //C 0f517  1723 or	r2,r4		;q|= m
01f2f51a //C 0f518  1724 jmp	div_cyc_next
//R 0f518 #16 div_cyc_next 0000f51a
01f2f50f //C 0f519  1725 jmp	div_cyc
//R 0f519 #16 div_cyc 0000f50f
02490000 //C 0f51a  1727 shr	r4		; m>>= 1
//G div_cyc_next
01f2f50f //C 0f51b  1728 jmp	div_cyc
//R 0f51b #16 div_cyc 0000f50f
0f4d0000 //C 0f51c  1730 pop	r4
//G div_ret
0ffd0000 //C 0f51d  1731 pop	pc
0ded0000 //C 0f51e  1739 push	lr
//G itoa
0d0d0000 //C 0f51f  1740 push	r0
0d1d0000 //C 0f520  1741 push	r1
0d2d0000 //C 0f521  1742 push	r2
0d3d0000 //C 0f522  1743 push	r3
0dad0000 //C 0f523  1744 push	r10
0dbd0000 //C 0f524  1745 push	r11
0dcd0000 //C 0f525  1746 push	r12
01c2f546 //C 0f526  1748 mvzl	r12,itoa_buffer	; pointer to output buffer
//R 0f526 #16 itoa_buffer 0000f546
01b2f551 //C 0f527  1749 mvzl	r11,itoa_divs	; pointer to dividers
//R 0f527 #16 itoa_divs 0000f551
01a20000 //C 0f528  1750 mvzl	r10,0		; bool: first non-zero char found
0e1b0000 //C 0f529  1752 ld	r1,r11		; get next divider
//G itoa_cyc
021b0000 //C 0f52a  1753 sz	r1		; if 0, then
11f2f53e //C 0f52b  1754 jz	itoa_ret	; finish
//R 0f52b #16 itoa_ret 0000f53e
01180001 //C 0f52c  1755 cmp	r1,1		; last divider?
11a20001 //C 0f52d  1756 EQ mvzl	r10,1		; always print last char
0400f504 //C 0f52e  1757 call	div		; R2,R3= R0/R1
//R 0f52e #24 div 0000f504
022b0000 //C 0f52f  1758 sz	r2		; is the result zero?
11f2f53b //C 0f530  1759 jz	itoa_f0
//R 0f530 #16 itoa_f0 0000f53b
01a20001 //C 0f531  1761 mvzl	r10,1		; non-zero: start to print
//G itoa_fno0
00000200 //C 0f532  1763 mov	r0,r2		; convert result to ASCII char
//G itoa_store
0400f456 //C 0f533  1764 call	value2hexchar
//R 0f533 #24 value2hexchar 0000f456
0c0c0000 //C 0f534  1765 st	r0,r12		; and store it in buffer
01c40001 //C 0f535  1766 inc	r12		; inc buf ptr
01020000 //C 0f536  1767 mvzl	r0,0		; put 0 after last char
0c0c0000 //C 0f537  1768 st	r0,r12
00000300 //C 0f538  1770 mov	r0,r3		; continue with the reminder
//G itoa_next
01b40001 //C 0f539  1771 inc	r11		; and next divider
01f2f529 //C 0f53a  1772 jmp	itoa_cyc
//R 0f53a #16 itoa_cyc 0000f529
02ab0000 //C 0f53b  1774 sz	r10		; just zeros so far?
//G itoa_f0
21f2f532 //C 0f53c  1775 jnz	itoa_store	; no, print
//R 0f53c #16 itoa_store 0000f532
01f2f538 //C 0f53d  1776 jmp	itoa_next
//R 0f53d #16 itoa_next 0000f538
0fcd0000 //C 0f53e  1778 pop	r12
//G itoa_ret
0fbd0000 //C 0f53f  1779 pop	r11
0fad0000 //C 0f540  1780 pop	r10
0f3d0000 //C 0f541  1781 pop	r3
0f2d0000 //C 0f542  1782 pop	r2
0f1d0000 //C 0f543  1783 pop	r1
0f0d0000 //C 0f544  1784 pop	r0
0ffd0000 //C 0f545  1785 pop	pc
00000000 //C 0f546  1787 itoa_buffer:	ds	11
//+ 0000000b
//G itoa_buffer
3b9aca00 //C 0f551  1789 dd	1000000000
//G itoa_divs
05f5e100 //C 0f552  1790 dd	100000000
00989680 //C 0f553  1791 dd	10000000
000f4240 //C 0f554  1792 dd	1000000
000186a0 //C 0f555  1793 dd	100000
00002710 //C 0f556  1794 dd	10000
000003e8 //C 0f557  1795 dd	1000
00000064 //C 0f558  1796 dd	100
0000000a //C 0f559  1797 dd	10
00000001 //C 0f55a  1798 dd	1
00000000 //C 0f55b  1799 dd	0
0ded0000 //C 0f55c  1806 push	lr
//G itobcd
0d1d0000 //C 0f55d  1807 push	r1
0d2d0000 //C 0f55e  1808 push	r2
0108e0ff //C 0f55f  1809 cmp	r0,99999999
91f2f56f //C 0f560  1810 UGT jmp	itobcd_bad
//R 0f560 #16 itobcd_bad 0000f56f
0400f51e //C 0f561  1811 call	itoa
//R 0f561 #24 itoa 0000f51e
01020000 //C 0f562  1812 mvzl	r0,0
0112f546 //C 0f563  1813 mvzl	r1,itoa_buffer
//R 0f563 #16 itoa_buffer 0000f546
0e210000 //C 0f564  1815 ld	r2,r1
//G itobcd_cyc
022b0000 //C 0f565  1816 sz	r2
11f2f570 //C 0f566  1817 jz	itobcd_ret
//R 0f566 #16 itobcd_ret 0000f570
01260030 //C 0f567  1818 sub	r2,'0'
02080000 //C 0f568  1819 shl	r0
02080000 //C 0f569  1820 shl	r0
02080000 //C 0f56a  1821 shl	r0
02080000 //C 0f56b  1822 shl	r0
000d0200 //C 0f56c  1823 or	r0,r2
01140001 //C 0f56d  1824 inc	r1
01f2f564 //C 0f56e  1825 jmp	itobcd_cyc
//R 0f56e #16 itobcd_cyc 0000f564
01020000 //C 0f56f  1827 mvzl	r0,0
//G itobcd_bad
0f2d0000 //C 0f570  1829 pop	r2
//G itobcd_ret
0f1d0000 //C 0f571  1830 pop	r1
0ffd0000 //C 0f572  1831 pop	pc
0ded0000 //C 0f573  1838 push	lr
//G printd
0400f51e //C 0f574  1839 call	itoa
//R 0f574 #24 itoa 0000f51e
0102f546 //C 0f575  1840 mvzl	r0,itoa_buffer
//R 0f575 #16 itoa_buffer 0000f546
0400f49e //C 0f576  1841 call	prints
//R 0f576 #24 prints 0000f49e
0ffd0000 //C 0f577  1842 pop	pc
0ded0000 //C 0f578  1851 push	lr
//G printf
0d0d0000 //C 0f579  1852 push	r0
0d1d0000 //C 0f57a  1853 push	r1
0d3d0000 //C 0f57b  1854 push	r3
0610f67e //C 0f57c  1856 st	r1,reg1
//R 0f57c #16 reg1 0000f67e
0620f67f //C 0f57d  1857 st	r2,reg2
//R 0f57d #16 reg2 0000f67f
0630f680 //C 0f57e  1858 st	r3,reg3
//R 0f57e #16 reg3 0000f680
0640f681 //C 0f57f  1859 st	r4,reg4
//R 0f57f #16 reg4 0000f681
0650f682 //C 0f580  1860 st	r5,reg5
//R 0f580 #16 reg5 0000f682
0660f683 //C 0f581  1861 st	r6,reg6
//R 0f581 #16 reg6 0000f683
0670f684 //C 0f582  1862 st	r7,reg7
//R 0f582 #16 reg7 0000f684
0680f685 //C 0f583  1863 st	r8,reg8
//R 0f583 #16 reg8 0000f685
0690f686 //C 0f584  1864 st	r9,reg9
//R 0f584 #16 reg9 0000f686
06a0f687 //C 0f585  1865 st	r10,reg10
//R 0f585 #16 reg10 0000f687
06b0f688 //C 0f586  1866 st	r11,reg11
//R 0f586 #16 reg11 0000f688
06c0f689 //C 0f587  1867 st	r12,reg12
//R 0f587 #16 reg12 0000f689
00200000 //C 0f588  1869 mov	r2,r0		; pointer to format string
0112f67e //C 0f589  1870 mvzl	r1,reg1		; pointer to params
//R 0f589 #16 reg1 0000f67e
01320000 //C 0f58a  1871 mvzl	r3,0		; byte idx in packed str
0e020000 //C 0f58b  1873 ld	r0,r2		; get next char
//G printf_cyc
020b0000 //C 0f58c  1874 sz	r0		; is it EOS?
11f2f5f2 //C 0f58d  1875 jz	printf_ret
//R 0f58d #16 printf_ret 0000f5f2
06014003 //C 0f58e  1876 getbz	r0,r0,r3	; pick next byte
020b0000 //C 0f58f  1877 sz	r0		; is it null?
11f2f5ef //C 0f590  1878 jz	printf_nextword	; no more non-nulls
//R 0f590 #16 printf_nextword 0000f5ef
0108005c //C 0f591  1880 cmp	r0,'\\'
21f2f5bd //C 0f592  1881 jnz	printf_notescape
//R 0f592 #16 printf_notescape 0000f5bd
01340001 //C 0f593  1883 inc	r3
01380004 //C 0f594  1884 cmp	r3,4
21f2f59b //C 0f595  1885 jnz	printf_l1
//R 0f595 #16 printf_l1 0000f59b
01320000 //C 0f596  1887 mvzl	r3,0
//G printf_l2
01240001 //C 0f597  1888 inc	r2
0e020000 //C 0f598  1889 ld	r0,r2
020b0000 //C 0f599  1890 sz	r0
11f2f5f2 //C 0f59a  1891 jz	printf_ret
//R 0f59a #16 printf_ret 0000f5f2
0e020000 //C 0f59b  1893 ld	r0,r2
//G printf_l1
06014003 //C 0f59c  1894 getbz	r0,r0,r3
020b0000 //C 0f59d  1895 sz	r0
11f2f596 //C 0f59e  1896 jz	printf_l2
//R 0f59e #16 printf_l2 0000f596
01080061 //C 0f59f  1898 cmp	r0,'a'
11020007 //C 0f5a0  1899 Z mvzl	r0,7
11f2f5eb //C 0f5a1  1900 Z jmp	printf_print
//R 0f5a1 #16 printf_print 0000f5eb
01080062 //C 0f5a2  1901 cmp	r0,'b'
11020008 //C 0f5a3  1902 Z mvzl	r0,8
11f2f5eb //C 0f5a4  1903 Z jmp	printf_print
//R 0f5a4 #16 printf_print 0000f5eb
01080065 //C 0f5a5  1904 cmp	r0,'e'
1102001b //C 0f5a6  1905 Z mvzl	r0,0x1b
11f2f5eb //C 0f5a7  1906 Z jmp	printf_print
//R 0f5a7 #16 printf_print 0000f5eb
01080066 //C 0f5a8  1907 cmp	r0,'f'
1102000c //C 0f5a9  1908 Z mvzl	r0,0xc
11f2f5eb //C 0f5aa  1909 Z jmp	printf_print
//R 0f5aa #16 printf_print 0000f5eb
0108006e //C 0f5ab  1910 cmp	r0,'n'
1102000a //C 0f5ac  1911 Z mvzl	r0,0xa
11f2f5eb //C 0f5ad  1912 Z jmp	printf_print
//R 0f5ad #16 printf_print 0000f5eb
01080072 //C 0f5ae  1913 cmp	r0,'r'
1102000d //C 0f5af  1914 Z mvzl	r0,0xd
11f2f5eb //C 0f5b0  1915 Z jmp	printf_print
//R 0f5b0 #16 printf_print 0000f5eb
01080074 //C 0f5b1  1916 cmp	r0,'t'
11020009 //C 0f5b2  1917 Z mvzl	r0,9
11f2f5eb //C 0f5b3  1918 Z jmp	printf_print
//R 0f5b3 #16 printf_print 0000f5eb
01080076 //C 0f5b4  1919 cmp	r0,'v'
1102000b //C 0f5b5  1920 Z mvzl	r0,0xb
11f2f5eb //C 0f5b6  1921 Z jmp	printf_print
//R 0f5b6 #16 printf_print 0000f5eb
0108005c //C 0f5b7  1922 cmp	r0,0x5c
11f2f5eb //C 0f5b8  1923 Z jmp	printf_print
//R 0f5b8 #16 printf_print 0000f5eb
01080030 //C 0f5b9  1924 cmp	r0,'0'
11020000 //C 0f5ba  1925 Z mvzl	r0,0
11f2f5eb //C 0f5bb  1926 Z jmp	printf_print
//R 0f5bb #16 printf_print 0000f5eb
01f2f5eb //C 0f5bc  1928 jmp	printf_print
//R 0f5bc #16 printf_print 0000f5eb
01080025 //C 0f5bd  1931 cmp	r0,'%'		; is it a format char?
//G printf_notescape
21f2f5eb //C 0f5be  1932 jnz	printf_print
//R 0f5be #16 printf_print 0000f5eb
01340001 //C 0f5bf  1934 inc	r3
01380004 //C 0f5c0  1935 cmp	r3,4
21f2f5c7 //C 0f5c1  1936 jnz	printf_l3
//R 0f5c1 #16 printf_l3 0000f5c7
01320000 //C 0f5c2  1938 mvzl	r3,0
//G printf_l4
01240001 //C 0f5c3  1939 inc	r2		; go to format char
0e020000 //C 0f5c4  1940 ld	r0,r2
022b0000 //C 0f5c5  1941 sz	r2		; is it EOS?
11f2f5f2 //C 0f5c6  1942 jz	printf_ret
//R 0f5c6 #16 printf_ret 0000f5f2
0e020000 //C 0f5c7  1944 ld	r0,r2
//G printf_l3
06014003 //C 0f5c8  1945 getbz	r0,r0,r3
020b0000 //C 0f5c9  1946 sz	r0
11f2f5c2 //C 0f5ca  1947 jz	printf_l4
//R 0f5ca #16 printf_l4 0000f5c2
01080025 //C 0f5cb  1949 cmp	r0,'%'		; % is used to print %
11f2f5eb //C 0f5cc  1950 jz	printf_print
//R 0f5cc #16 printf_print 0000f5eb
01080075 //C 0f5cd  1952 cmp	r0,'u'		; u,d print in decimal
11f2f5d1 //C 0f5ce  1953 jz	printf_d
//R 0f5ce #16 printf_d 0000f5d1
01080064 //C 0f5cf  1954 cmp	r0,'d'
21f2f5d5 //C 0f5d0  1955 jnz	printf_notd
//R 0f5d0 #16 printf_notd 0000f5d5
0e010000 //C 0f5d1  1957 ld	r0,r1
//G printf_d
01140001 //C 0f5d2  1958 inc	r1
0400f573 //C 0f5d3  1959 call	printd
//R 0f5d3 #24 printd 0000f573
01f2f5ec //C 0f5d4  1960 jmp	printf_next
//R 0f5d4 #16 printf_next 0000f5ec
01080078 //C 0f5d5  1963 cmp	r0,'x'
//G printf_notd
21f2f5de //C 0f5d6  1964 jnz	printf_notx
//R 0f5d6 #16 printf_notx 0000f5de
0e010000 //C 0f5d7  1966 ld	r0,r1
//G printf_x
01140001 //C 0f5d8  1967 inc	r1
0d1d0000 //C 0f5d9  1968 push	r1
01120000 //C 0f5da  1969 mvzl	r1,0
0400f4de //C 0f5db  1970 call	print_vhex
//R 0f5db #24 print_vhex 0000f4de
0f1d0000 //C 0f5dc  1971 pop	r1
01f2f5ec //C 0f5dd  1972 jmp	printf_next
//R 0f5dd #16 printf_next 0000f5ec
01080073 //C 0f5de  1975 cmp	r0,'s'
//G printf_notx
21f2f5e4 //C 0f5df  1976 jnz	printf_nots
//R 0f5df #16 printf_nots 0000f5e4
0e010000 //C 0f5e0  1978 ld	r0,r1
//G printf_s
01140001 //C 0f5e1  1979 inc	r1
0400f49e //C 0f5e2  1980 call	prints
//R 0f5e2 #24 prints 0000f49e
01f2f5ec //C 0f5e3  1981 jmp	printf_next
//R 0f5e3 #16 printf_next 0000f5ec
01080063 //C 0f5e4  1984 cmp	r0,'c'
//G printf_nots
21f2f5ea //C 0f5e5  1985 jnz	printf_notc
//R 0f5e5 #16 printf_notc 0000f5ea
0e010000 //C 0f5e6  1986 ld	r0,r1
01140001 //C 0f5e7  1987 inc	r1
0400f497 //C 0f5e8  1988 call	putchar
//R 0f5e8 #24 putchar 0000f497
01f2f5ec //C 0f5e9  1989 jmp	printf_next
//R 0f5e9 #16 printf_next 0000f5ec
01f2f5ec //C 0f5ea  1992 jmp	printf_next
//R 0f5ea #16 printf_next 0000f5ec
//G printf_notc
0400f497 //C 0f5eb  1994 call	putchar		; print actual char
//R 0f5eb #24 putchar 0000f497
//G printf_print
01340001 //C 0f5ec  1996 inc	r3		; next byte in word
//G printf_next
01380004 //C 0f5ed  1997 cmp	r3,4		; all 4 processed?
21f2f58b //C 0f5ee  1998 jnz	printf_cyc
//R 0f5ee #16 printf_cyc 0000f58b
01240001 //C 0f5ef  2000 inc	r2		; inc string ptr
//G printf_nextword
01320000 //C 0f5f0  2001 mvzl	r3,0		; restart byte idx
01f2f58b //C 0f5f1  2002 jmp	printf_cyc
//R 0f5f1 #16 printf_cyc 0000f58b
0f3d0000 //C 0f5f2  2005 pop	r3
//G printf_ret
0f1d0000 //C 0f5f3  2006 pop	r1
0f0d0000 //C 0f5f4  2007 pop	r0
0ffd0000 //C 0f5f5  2008 pop	pc
0d0d0000 //C 0f5f6  2013 push	r0
//G pesf
0d2d0000 //C 0f5f7  2014 push	r2
00000e00 //C 0f5f8  2015 mov	r0,LR
0400f578 //C 0f5f9  2016 call	printf
//R 0f5f9 #24 printf 0000f578
01240001 //C 0f5fa  2017 inc	r2
0620f67f //C 0f5fb  2018 st	r2,reg2
//R 0f5fb #16 reg2 0000f67f
0f2d0000 //C 0f5fc  2019 pop	r2
0f0d0000 //C 0f5fd  2020 pop	r0
07f0f67f //C 0f5fe  2021 ld	PC,reg2
//R 0f5fe #16 reg2 0000f67f
0d1d0000 //C 0f5ff  2025 push	r1
//G version
01020002 //C 0f600  2026 mvzl	r0,version_sub
//R 0f600 #16 version_sub 00000002
01120001 //C 0f601  2027 mvzl	r1,version_main
//R 0f601 #16 version_main 00000001
07018101 //C 0f602  2028 putb	r0,r1,1
0f1d0000 //C 0f603  2029 pop	r1
00f00e00 //C 0f604  2030 ret
0d0d0000 //C 0f605  2036 push	r0
//G ascii2seg
0d1d0000 //C 0f606  2037 push	r1
02090000 //C 0f607  2038 shr	r0
02090000 //C 0f608  2039 shr	r0
0112f8a0 //C 0f609  2040 mvzl	r1,ascii2seg_table
//R 0f609 #16 ascii2seg_table 0000f8a0
0a400100 //C 0f60a  2041 ld	r4,r0,r1
0f1d0000 //C 0f60b  2042 pop	r1
0f0d0000 //C 0f60c  2043 pop	r0
06414400 //C 0f60d  2044 getbz	r4,r4,r0
00f00e00 //C 0f60e  2045 ret
00000000 //C 0f60f  2050 line:		ds	100		; line buffer
//+ 00000064
//G line
00000000 //C 0f673  2051 line_ptr:	ds	1		; line pointer (index)
//+ 00000001
//G line_ptr
00000000 //C 0f674  2052 at_eol:		ds	1		; bool, true if EOL arrived
//+ 00000001
//G at_eol
00000000 //C 0f675  2053 words:		ds	5		; Tokens of line
//+ 00000005
//G words
00000000 //C 0f67a  2054 echo:		ds	1		; bool, do echo or not
//+ 00000001
//G echo
00000000 //C 0f67b  2055 dd	0
//G called
00000000 //C 0f67c  2056 dd	0
//G nuof_reg
00000000 //C 0f67d  2058 dd	0
//G reg0
00000000 //C 0f67e  2059 dd	0
//G reg1
00000000 //C 0f67f  2060 dd	0
//G reg2
00000000 //C 0f680  2061 dd	0
//G reg3
00000000 //C 0f681  2062 dd	0
//G reg4
00000000 //C 0f682  2063 dd	0
//G reg5
00000000 //C 0f683  2064 dd	0
//G reg6
00000000 //C 0f684  2065 dd	0
//G reg7
00000000 //C 0f685  2066 dd	0
//G reg8
00000000 //C 0f686  2067 dd	0
//G reg9
00000000 //C 0f687  2068 dd	0
//G reg10
00000000 //C 0f688  2069 dd	0
//G reg11
00000000 //C 0f689  2070 dd	0
//G reg12
00000000 //C 0f68a  2071 dd	0
//G reg13
00000000 //C 0f68b  2072 dd	0
//G reg14
00000000 //C 0f68c  2073 dd	0
//G reg15
00000000 //C 0f68d  2074 dd	0
//G regf
00000050 //C 0f68e  2076 db	80
//G msg_start
0000004d //C 0f68f  2076 db	77
0000006f //C 0f690  2076 db	111
0000006e //C 0f691  2076 db	110
00000069 //C 0f692  2076 db	105
00000074 //C 0f693  2076 db	116
0000006f //C 0f694  2076 db	111
00000072 //C 0f695  2076 db	114
00000020 //C 0f696  2076 db	32
00000076 //C 0f697  2076 db	118
00000025 //C 0f698  2076 db	37
00000064 //C 0f699  2076 db	100
0000002e //C 0f69a  2076 db	46
00000025 //C 0f69b  2076 db	37
00000064 //C 0f69c  2076 db	100
00000020 //C 0f69d  2076 db	32
00000028 //C 0f69e  2076 db	40
00000063 //C 0f69f  2076 db	99
00000070 //C 0f6a0  2076 db	112
00000075 //C 0f6a1  2076 db	117
00000020 //C 0f6a2  2076 db	32
00000076 //C 0f6a3  2076 db	118
00000025 //C 0f6a4  2076 db	37
00000064 //C 0f6a5  2076 db	100
0000002e //C 0f6a6  2076 db	46
00000025 //C 0f6a7  2076 db	37
00000064 //C 0f6a8  2076 db	100
0000002e //C 0f6a9  2076 db	46
00000025 //C 0f6aa  2076 db	37
00000064 //C 0f6ab  2076 db	100
00000029 //C 0f6ac  2076 db	41
0000000a //C 0f6ad  2076 db	10
00000000 //C 0f6ae  2076 db
00000053 //C 0f6af  2077 db	83
//G msg_stopat
00000074 //C 0f6b0  2077 db	116
0000006f //C 0f6b1  2077 db	111
00000070 //C 0f6b2  2077 db	112
00000020 //C 0f6b3  2077 db	32
00000061 //C 0f6b4  2077 db	97
00000074 //C 0f6b5  2077 db	116
0000003a //C 0f6b6  2077 db	58
00000020 //C 0f6b7  2077 db	32
00000000 //C 0f6b8  2077 db
00000008 //C 0f6b9  2078 db	8
//G msg_BS
00000020 //C 0f6ba  2078 db	32
00000008 //C 0f6bb  2078 db	8
00000000 //C 0f6bc  2078 db	0
0000003a //C 0f6bd  2079 db	58
//G prompt
00000000 //C 0f6be  2079 db
00000020 //C 0f6bf  2080 db	32
//G delimiters
0000003b //C 0f6c0  2080 db	59
00000009 //C 0f6c1  2080 db	9
0000000b //C 0f6c2  2080 db	11
0000002c //C 0f6c3  2080 db	44
0000003d //C 0f6c4  2080 db	61
0000005b //C 0f6c5  2080 db	91
0000005d //C 0f6c6  2080 db	93
00000000 //C 0f6c7  2080 db
00000028 //C 0f6c8  2081 db	40
//G null_str
0000006e //C 0f6c9  2081 db	110
00000075 //C 0f6ca  2081 db	117
0000006c //C 0f6cb  2081 db	108
0000006c //C 0f6cc  2081 db	108
00000029 //C 0f6cd  2081 db	41
00000000 //C 0f6ce  2081 db
00000000 //C 0f6cf  2082 db	0
//G sc_active
00000000 //C 0f6d0  2083 db	0
//G sc_ptr
00000000 //C 0f6d1  2084 sc_buffer:	ds	10
//+ 0000000a
//G sc_buffer
0000f197 //C 0f6db  2088 dd	cmd_sm
//R 0f6db d32 cmd_sm 0000f197
//G commands
00000073 //C 0f6dc  2089 db	115
0000006d //C 0f6dd  2089 db	109
00000000 //C 0f6de  2089 db
0000f13e //C 0f6df  2090 dd	cmd_m
//R 0f6df d32 cmd_m 0000f13e
0000006d //C 0f6e0  2091 db	109
00000000 //C 0f6e1  2091 db
0000f13e //C 0f6e2  2092 dd	cmd_m
//R 0f6e2 d32 cmd_m 0000f13e
0000006d //C 0f6e3  2093 db	109
00000065 //C 0f6e4  2093 db	101
0000006d //C 0f6e5  2093 db	109
00000000 //C 0f6e6  2093 db
0000f1ba //C 0f6e7  2094 dd	cmd_d
//R 0f6e7 d32 cmd_d 0000f1ba
00000064 //C 0f6e8  2095 db	100
00000000 //C 0f6e9  2095 db
0000f1ba //C 0f6ea  2096 dd	cmd_d
//R 0f6ea d32 cmd_d 0000f1ba
00000064 //C 0f6eb  2097 db	100
00000075 //C 0f6ec  2097 db	117
0000006d //C 0f6ed  2097 db	109
00000070 //C 0f6ee  2097 db	112
00000000 //C 0f6ef  2097 db
0000f1ed //C 0f6f0  2098 dd	cmd_l
//R 0f6f0 d32 cmd_l 0000f1ed
0000006c //C 0f6f1  2099 db	108
00000000 //C 0f6f2  2099 db
0000f1ed //C 0f6f3  2100 dd	cmd_l
//R 0f6f3 d32 cmd_l 0000f1ed
0000006c //C 0f6f4  2101 db	108
0000006f //C 0f6f5  2101 db	111
00000061 //C 0f6f6  2101 db	97
00000064 //C 0f6f7  2101 db	100
00000000 //C 0f6f8  2101 db
0000f263 //C 0f6f9  2102 dd	cmd_g
//R 0f6f9 d32 cmd_g 0000f263
00000067 //C 0f6fa  2103 db	103
00000000 //C 0f6fb  2103 db
0000f263 //C 0f6fc  2104 dd	cmd_g
//R 0f6fc d32 cmd_g 0000f263
00000067 //C 0f6fd  2105 db	103
0000006f //C 0f6fe  2105 db	111
00000000 //C 0f6ff  2105 db
0000f263 //C 0f700  2106 dd	cmd_g
//R 0f700 d32 cmd_g 0000f263
00000072 //C 0f701  2107 db	114
00000075 //C 0f702  2107 db	117
0000006e //C 0f703  2107 db	110
00000000 //C 0f704  2107 db
0000f2a2 //C 0f705  2108 dd	cmd_h
//R 0f705 d32 cmd_h 0000f2a2
0000003f //C 0f706  2109 db	63
00000000 //C 0f707  2109 db
0000f2a2 //C 0f708  2110 dd	cmd_h
//R 0f708 d32 cmd_h 0000f2a2
00000068 //C 0f709  2111 db	104
00000000 //C 0f70a  2111 db
0000f2a2 //C 0f70b  2112 dd	cmd_h
//R 0f70b d32 cmd_h 0000f2a2
00000068 //C 0f70c  2113 db	104
00000065 //C 0f70d  2113 db	101
0000006c //C 0f70e  2113 db	108
00000070 //C 0f70f  2113 db	112
00000000 //C 0f710  2113 db
0000f309 //C 0f711  2114 dd	cmd_r
//R 0f711 d32 cmd_r 0000f309
00000072 //C 0f712  2115 db	114
00000000 //C 0f713  2115 db
0000f309 //C 0f714  2116 dd	cmd_r
//R 0f714 d32 cmd_r 0000f309
00000072 //C 0f715  2117 db	114
00000065 //C 0f716  2117 db	101
00000067 //C 0f717  2117 db	103
00000000 //C 0f718  2117 db
0000f309 //C 0f719  2118 dd	cmd_r
//R 0f719 d32 cmd_r 0000f309
00000072 //C 0f71a  2119 db	114
00000065 //C 0f71b  2119 db	101
00000067 //C 0f71c  2119 db	103
00000073 //C 0f71d  2119 db	115
00000000 //C 0f71e  2119 db
0000f399 //C 0f71f  2120 dd	cmd_sp
//R 0f71f d32 cmd_sp 0000f399
00000073 //C 0f720  2121 db	115
00000070 //C 0f721  2121 db	112
00000000 //C 0f722  2121 db
0000f39c //C 0f723  2122 dd	cmd_lr
//R 0f723 d32 cmd_lr 0000f39c
0000006c //C 0f724  2123 db	108
00000072 //C 0f725  2123 db	114
00000000 //C 0f726  2123 db
0000f39f //C 0f727  2124 dd	cmd_pc
//R 0f727 d32 cmd_pc 0000f39f
00000070 //C 0f728  2125 db	112
00000063 //C 0f729  2125 db	99
00000000 //C 0f72a  2125 db
0000f3a2 //C 0f72b  2126 dd	cmd_f
//R 0f72b d32 cmd_f 0000f3a2
00000066 //C 0f72c  2127 db	102
00000000 //C 0f72d  2127 db
00000000 //C 0f72e  2128 dd	0
00000000 //C 0f72f  2129 dd	0
0000006d //C 0f730  2131 db	109
//G helps
0000005b //C 0f731  2131 db	91
00000065 //C 0f732  2131 db	101
0000006d //C 0f733  2131 db	109
0000005d //C 0f734  2131 db	93
00000020 //C 0f735  2131 db	32
00000061 //C 0f736  2131 db	97
00000064 //C 0f737  2131 db	100
00000064 //C 0f738  2131 db	100
00000072 //C 0f739  2131 db	114
00000020 //C 0f73a  2131 db	32
0000005b //C 0f73b  2131 db	91
00000076 //C 0f73c  2131 db	118
00000061 //C 0f73d  2131 db	97
0000006c //C 0f73e  2131 db	108
0000005d //C 0f73f  2131 db	93
00000020 //C 0f740  2131 db	32
00000020 //C 0f741  2131 db	32
00000047 //C 0f742  2131 db	71
00000065 //C 0f743  2131 db	101
00000074 //C 0f744  2131 db	116
0000002f //C 0f745  2131 db	47
00000073 //C 0f746  2131 db	115
00000065 //C 0f747  2131 db	101
00000074 //C 0f748  2131 db	116
00000020 //C 0f749  2131 db	32
0000006d //C 0f74a  2131 db	109
00000065 //C 0f74b  2131 db	101
0000006d //C 0f74c  2131 db	109
0000006f //C 0f74d  2131 db	111
00000072 //C 0f74e  2131 db	114
00000079 //C 0f74f  2131 db	121
0000000a //C 0f750  2131 db	10
00000000 //C 0f751  2131 db
00000064 //C 0f752  2132 db	100
0000005b //C 0f753  2132 db	91
00000075 //C 0f754  2132 db	117
0000006d //C 0f755  2132 db	109
00000070 //C 0f756  2132 db	112
0000005d //C 0f757  2132 db	93
00000020 //C 0f758  2132 db	32
00000073 //C 0f759  2132 db	115
00000074 //C 0f75a  2132 db	116
00000061 //C 0f75b  2132 db	97
00000072 //C 0f75c  2132 db	114
00000074 //C 0f75d  2132 db	116
00000020 //C 0f75e  2132 db	32
00000065 //C 0f75f  2132 db	101
0000006e //C 0f760  2132 db	110
00000064 //C 0f761  2132 db	100
00000020 //C 0f762  2132 db	32
00000020 //C 0f763  2132 db	32
00000044 //C 0f764  2132 db	68
00000075 //C 0f765  2132 db	117
0000006d //C 0f766  2132 db	109
00000070 //C 0f767  2132 db	112
00000020 //C 0f768  2132 db	32
0000006d //C 0f769  2132 db	109
00000065 //C 0f76a  2132 db	101
0000006d //C 0f76b  2132 db	109
0000006f //C 0f76c  2132 db	111
00000072 //C 0f76d  2132 db	114
00000079 //C 0f76e  2132 db	121
00000020 //C 0f76f  2132 db	32
00000063 //C 0f770  2132 db	99
0000006f //C 0f771  2132 db	111
0000006e //C 0f772  2132 db	110
00000074 //C 0f773  2132 db	116
00000065 //C 0f774  2132 db	101
0000006e //C 0f775  2132 db	110
00000074 //C 0f776  2132 db	116
0000000a //C 0f777  2132 db	10
00000000 //C 0f778  2132 db
0000006c //C 0f779  2133 db	108
0000005b //C 0f77a  2133 db	91
0000006f //C 0f77b  2133 db	111
00000061 //C 0f77c  2133 db	97
00000064 //C 0f77d  2133 db	100
0000005d //C 0f77e  2133 db	93
00000020 //C 0f77f  2133 db	32
00000020 //C 0f780  2133 db	32
00000020 //C 0f781  2133 db	32
00000020 //C 0f782  2133 db	32
00000020 //C 0f783  2133 db	32
00000020 //C 0f784  2133 db	32
00000020 //C 0f785  2133 db	32
00000020 //C 0f786  2133 db	32
00000020 //C 0f787  2133 db	32
00000020 //C 0f788  2133 db	32
00000020 //C 0f789  2133 db	32
00000020 //C 0f78a  2133 db	32
0000004c //C 0f78b  2133 db	76
0000006f //C 0f78c  2133 db	111
00000061 //C 0f78d  2133 db	97
00000064 //C 0f78e  2133 db	100
00000020 //C 0f78f  2133 db	32
00000068 //C 0f790  2133 db	104
00000065 //C 0f791  2133 db	101
00000078 //C 0f792  2133 db	120
00000020 //C 0f793  2133 db	32
00000066 //C 0f794  2133 db	102
00000069 //C 0f795  2133 db	105
0000006c //C 0f796  2133 db	108
00000065 //C 0f797  2133 db	101
00000020 //C 0f798  2133 db	32
00000074 //C 0f799  2133 db	116
0000006f //C 0f79a  2133 db	111
00000020 //C 0f79b  2133 db	32
0000006d //C 0f79c  2133 db	109
00000065 //C 0f79d  2133 db	101
0000006d //C 0f79e  2133 db	109
0000006f //C 0f79f  2133 db	111
00000072 //C 0f7a0  2133 db	114
00000079 //C 0f7a1  2133 db	121
0000000a //C 0f7a2  2133 db	10
00000000 //C 0f7a3  2133 db
00000067 //C 0f7a4  2134 db	103
0000005b //C 0f7a5  2134 db	91
0000006f //C 0f7a6  2134 db	111
0000005d //C 0f7a7  2134 db	93
0000007c //C 0f7a8  2134 db	124
00000072 //C 0f7a9  2134 db	114
00000075 //C 0f7aa  2134 db	117
0000006e //C 0f7ab  2134 db	110
00000020 //C 0f7ac  2134 db	32
0000005b //C 0f7ad  2134 db	91
00000061 //C 0f7ae  2134 db	97
00000064 //C 0f7af  2134 db	100
00000064 //C 0f7b0  2134 db	100
00000072 //C 0f7b1  2134 db	114
0000005d //C 0f7b2  2134 db	93
00000020 //C 0f7b3  2134 db	32
00000020 //C 0f7b4  2134 db	32
00000020 //C 0f7b5  2134 db	32
00000052 //C 0f7b6  2134 db	82
00000075 //C 0f7b7  2134 db	117
0000006e //C 0f7b8  2134 db	110
00000020 //C 0f7b9  2134 db	32
00000066 //C 0f7ba  2134 db	102
00000072 //C 0f7bb  2134 db	114
0000006f //C 0f7bc  2134 db	111
0000006d //C 0f7bd  2134 db	109
00000020 //C 0f7be  2134 db	32
00000061 //C 0f7bf  2134 db	97
00000064 //C 0f7c0  2134 db	100
00000064 //C 0f7c1  2134 db	100
00000072 //C 0f7c2  2134 db	114
00000065 //C 0f7c3  2134 db	101
00000073 //C 0f7c4  2134 db	115
00000073 //C 0f7c5  2134 db	115
0000000a //C 0f7c6  2134 db	10
00000000 //C 0f7c7  2134 db
00000072 //C 0f7c8  2135 db	114
0000005b //C 0f7c9  2135 db	91
00000065 //C 0f7ca  2135 db	101
00000067 //C 0f7cb  2135 db	103
0000005b //C 0f7cc  2135 db	91
00000073 //C 0f7cd  2135 db	115
0000005d //C 0f7ce  2135 db	93
0000005d //C 0f7cf  2135 db	93
00000020 //C 0f7d0  2135 db	32
00000020 //C 0f7d1  2135 db	32
00000020 //C 0f7d2  2135 db	32
00000020 //C 0f7d3  2135 db	32
00000020 //C 0f7d4  2135 db	32
00000020 //C 0f7d5  2135 db	32
00000020 //C 0f7d6  2135 db	32
00000020 //C 0f7d7  2135 db	32
00000020 //C 0f7d8  2135 db	32
00000020 //C 0f7d9  2135 db	32
00000050 //C 0f7da  2135 db	80
00000072 //C 0f7db  2135 db	114
00000069 //C 0f7dc  2135 db	105
0000006e //C 0f7dd  2135 db	110
00000074 //C 0f7de  2135 db	116
00000020 //C 0f7df  2135 db	32
00000072 //C 0f7e0  2135 db	114
00000065 //C 0f7e1  2135 db	101
00000067 //C 0f7e2  2135 db	103
00000069 //C 0f7e3  2135 db	105
00000073 //C 0f7e4  2135 db	115
00000074 //C 0f7e5  2135 db	116
00000065 //C 0f7e6  2135 db	101
00000072 //C 0f7e7  2135 db	114
00000073 //C 0f7e8  2135 db	115
0000000a //C 0f7e9  2135 db	10
00000000 //C 0f7ea  2135 db
00000072 //C 0f7eb  2136 db	114
00000058 //C 0f7ec  2136 db	88
00000020 //C 0f7ed  2136 db	32
0000005b //C 0f7ee  2136 db	91
00000076 //C 0f7ef  2136 db	118
00000061 //C 0f7f0  2136 db	97
0000006c //C 0f7f1  2136 db	108
0000005d //C 0f7f2  2136 db	93
00000020 //C 0f7f3  2136 db	32
00000020 //C 0f7f4  2136 db	32
00000020 //C 0f7f5  2136 db	32
00000020 //C 0f7f6  2136 db	32
00000020 //C 0f7f7  2136 db	32
00000020 //C 0f7f8  2136 db	32
00000020 //C 0f7f9  2136 db	32
00000020 //C 0f7fa  2136 db	32
00000020 //C 0f7fb  2136 db	32
00000020 //C 0f7fc  2136 db	32
00000047 //C 0f7fd  2136 db	71
00000065 //C 0f7fe  2136 db	101
00000074 //C 0f7ff  2136 db	116
0000002f //C 0f800  2136 db	47
00000073 //C 0f801  2136 db	115
00000065 //C 0f802  2136 db	101
00000074 //C 0f803  2136 db	116
00000020 //C 0f804  2136 db	32
00000052 //C 0f805  2136 db	82
00000058 //C 0f806  2136 db	88
0000000a //C 0f807  2136 db	10
00000000 //C 0f808  2136 db
00000073 //C 0f809  2137 db	115
00000070 //C 0f80a  2137 db	112
00000020 //C 0f80b  2137 db	32
0000005b //C 0f80c  2137 db	91
00000076 //C 0f80d  2137 db	118
00000061 //C 0f80e  2137 db	97
0000006c //C 0f80f  2137 db	108
0000005d //C 0f810  2137 db	93
00000020 //C 0f811  2137 db	32
00000020 //C 0f812  2137 db	32
00000020 //C 0f813  2137 db	32
00000020 //C 0f814  2137 db	32
00000020 //C 0f815  2137 db	32
00000020 //C 0f816  2137 db	32
00000020 //C 0f817  2137 db	32
00000020 //C 0f818  2137 db	32
00000020 //C 0f819  2137 db	32
00000020 //C 0f81a  2137 db	32
00000047 //C 0f81b  2137 db	71
00000065 //C 0f81c  2137 db	101
00000074 //C 0f81d  2137 db	116
0000002f //C 0f81e  2137 db	47
00000073 //C 0f81f  2137 db	115
00000065 //C 0f820  2137 db	101
00000074 //C 0f821  2137 db	116
00000020 //C 0f822  2137 db	32
00000052 //C 0f823  2137 db	82
00000031 //C 0f824  2137 db	49
00000033 //C 0f825  2137 db	51
0000000a //C 0f826  2137 db	10
00000000 //C 0f827  2137 db
0000006c //C 0f828  2138 db	108
00000072 //C 0f829  2138 db	114
00000020 //C 0f82a  2138 db	32
0000005b //C 0f82b  2138 db	91
00000076 //C 0f82c  2138 db	118
00000061 //C 0f82d  2138 db	97
0000006c //C 0f82e  2138 db	108
0000005d //C 0f82f  2138 db	93
00000020 //C 0f830  2138 db	32
00000020 //C 0f831  2138 db	32
00000020 //C 0f832  2138 db	32
00000020 //C 0f833  2138 db	32
00000020 //C 0f834  2138 db	32
00000020 //C 0f835  2138 db	32
00000020 //C 0f836  2138 db	32
00000020 //C 0f837  2138 db	32
00000020 //C 0f838  2138 db	32
00000020 //C 0f839  2138 db	32
00000047 //C 0f83a  2138 db	71
00000065 //C 0f83b  2138 db	101
00000074 //C 0f83c  2138 db	116
0000002f //C 0f83d  2138 db	47
00000073 //C 0f83e  2138 db	115
00000065 //C 0f83f  2138 db	101
00000074 //C 0f840  2138 db	116
00000020 //C 0f841  2138 db	32
00000052 //C 0f842  2138 db	82
00000031 //C 0f843  2138 db	49
00000034 //C 0f844  2138 db	52
0000000a //C 0f845  2138 db	10
00000000 //C 0f846  2138 db
00000070 //C 0f847  2139 db	112
00000063 //C 0f848  2139 db	99
00000020 //C 0f849  2139 db	32
0000005b //C 0f84a  2139 db	91
00000076 //C 0f84b  2139 db	118
00000061 //C 0f84c  2139 db	97
0000006c //C 0f84d  2139 db	108
0000005d //C 0f84e  2139 db	93
00000020 //C 0f84f  2139 db	32
00000020 //C 0f850  2139 db	32
00000020 //C 0f851  2139 db	32
00000020 //C 0f852  2139 db	32
00000020 //C 0f853  2139 db	32
00000020 //C 0f854  2139 db	32
00000020 //C 0f855  2139 db	32
00000020 //C 0f856  2139 db	32
00000020 //C 0f857  2139 db	32
00000020 //C 0f858  2139 db	32
00000047 //C 0f859  2139 db	71
00000065 //C 0f85a  2139 db	101
00000074 //C 0f85b  2139 db	116
0000002f //C 0f85c  2139 db	47
00000073 //C 0f85d  2139 db	115
00000065 //C 0f85e  2139 db	101
00000074 //C 0f85f  2139 db	116
00000020 //C 0f860  2139 db	32
00000052 //C 0f861  2139 db	82
00000031 //C 0f862  2139 db	49
00000035 //C 0f863  2139 db	53
0000000a //C 0f864  2139 db	10
00000000 //C 0f865  2139 db
00000066 //C 0f866  2140 db	102
00000020 //C 0f867  2140 db	32
0000005b //C 0f868  2140 db	91
00000076 //C 0f869  2140 db	118
00000061 //C 0f86a  2140 db	97
0000006c //C 0f86b  2140 db	108
0000005d //C 0f86c  2140 db	93
00000020 //C 0f86d  2140 db	32
00000020 //C 0f86e  2140 db	32
00000020 //C 0f86f  2140 db	32
00000020 //C 0f870  2140 db	32
00000020 //C 0f871  2140 db	32
00000020 //C 0f872  2140 db	32
00000020 //C 0f873  2140 db	32
00000020 //C 0f874  2140 db	32
00000020 //C 0f875  2140 db	32
00000020 //C 0f876  2140 db	32
00000020 //C 0f877  2140 db	32
00000047 //C 0f878  2140 db	71
00000065 //C 0f879  2140 db	101
00000074 //C 0f87a  2140 db	116
0000002f //C 0f87b  2140 db	47
00000073 //C 0f87c  2140 db	115
00000065 //C 0f87d  2140 db	101
00000074 //C 0f87e  2140 db	116
00000020 //C 0f87f  2140 db	32
00000066 //C 0f880  2140 db	102
0000006c //C 0f881  2140 db	108
00000061 //C 0f882  2140 db	97
00000067 //C 0f883  2140 db	103
00000073 //C 0f884  2140 db	115
0000000a //C 0f885  2140 db	10
00000000 //C 0f886  2140 db
00000068 //C 0f887  2141 db	104
0000005b //C 0f888  2141 db	91
00000065 //C 0f889  2141 db	101
0000006c //C 0f88a  2141 db	108
00000070 //C 0f88b  2141 db	112
0000005d //C 0f88c  2141 db	93
0000002c //C 0f88d  2141 db	44
0000003f //C 0f88e  2141 db	63
00000020 //C 0f88f  2141 db	32
00000020 //C 0f890  2141 db	32
00000020 //C 0f891  2141 db	32
00000020 //C 0f892  2141 db	32
00000020 //C 0f893  2141 db	32
00000020 //C 0f894  2141 db	32
00000020 //C 0f895  2141 db	32
00000020 //C 0f896  2141 db	32
00000020 //C 0f897  2141 db	32
00000020 //C 0f898  2141 db	32
00000048 //C 0f899  2141 db	72
00000065 //C 0f89a  2141 db	101
0000006c //C 0f89b  2141 db	108
00000070 //C 0f89c  2141 db	112
0000000a //C 0f89d  2141 db	10
00000000 //C 0f89e  2141 db
00000000 //C 0f89f  2142 dd	0
00000000 //C 0f8a0  2146 dd	0
//G ascii2seg_table
00000000 //C 0f8a1  2147 dd	0
00000000 //C 0f8a2  2148 dd	0
00000000 //C 0f8a3  2149 dd	0
00000000 //C 0f8a4  2150 dd	0
00000000 //C 0f8a5  2151 dd	0
00000000 //C 0f8a6  2152 dd	0
00000000 //C 0f8a7  2153 dd	0
00220000 //C 0f8a8  2154 dd	0x00220000
02000000 //C 0f8a9  2155 dd	0x02000000
00000000 //C 0f8aa  2156 dd	0x00000000
00004000 //C 0f8ab  2157 dd	0x00004000
4f5b063f //C 0f8ac  2158 dd	0x4f5b063f
277d6d66 //C 0f8ad  2159 dd	0x277d6d66
00006fff //C 0f8ae  2160 dd	0x00006fff
00004800 //C 0f8af  2161 dd	0x00004800
397c7700 //C 0f8b0  2162 dd	0x397c7700
3d71795e //C 0f8b1  2163 dd	0x3d71795e
001e3076 //C 0f8b2  2164 dd	0x001e3076
3f543738 //C 0f8b3  2165 dd	0x3f543738
6d500073 //C 0f8b4  2166 dd	0x6d500073
00003e78 //C 0f8b5  2167 dd	0x00003e78
39006e00 //C 0f8b6  2168 dd	0x39006e00
08000f00 //C 0f8b7  2169 dd	0x08000f00
587c7700 //C 0f8b8  2170 dd	0x587c7700
3d71795e //C 0f8b9  2171 dd	0x3d71795e
001e0474 //C 0f8ba  2172 dd	0x001e0474
5c540038 //C 0f8bb  2173 dd	0x5c540038
6d500073 //C 0f8bc  2174 dd	0x6d500073
00001c78 //C 0f8bd  2175 dd	0x00001c78
00000000 //C 0f8be  2176 dd	0x00000000
00000000 //C 0f8bf  2177 dd	0x00000000
00000000 //C 0f8c0  2182 ds	0x40
//+ 00000040
//G stack
00000000 //C 0f900  2184 dd	0
//G stack_end
//F eof_pmon.asm
00000000 //C 0f901     3 
//G the_end
//H c74d6a9f
//E
