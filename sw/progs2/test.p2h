//U P2

//; SEGMENTS
//T S293d8fdbaa47 _lib_segment_div noload=0 abs=0
//T S8e7b3d203072 _lib_segment_rand noload=0 abs=0
//T Sbe1a78b9d15e _lib_segment_str_chr noload=0 abs=0
//T S035d1872e63c _lib_segment_regs_of_clock noload=0 abs=0
//T S0e483de54bb5 _lib_segment_regs_of_gpio noload=0 abs=0
//T S33927ab86900 _lib_segment_regs_of_uart noload=0 abs=0
//T S602f0726a14b _lib_segment_character_fn noload=0 abs=0
//T S847a5c4e618b _lib_segment_isdigit noload=0 abs=0
//T S9a7f1c151839 _lib_segment_islower noload=0 abs=0
//T S154e11ca77b1 _lib_segment_isupper noload=0 abs=0
//T Sf1f3b6b1f10a _lib_segment_isalpha noload=0 abs=0
//T Sb95a2b17779b _lib_segment_isalnum noload=0 abs=0
//T S503b4c87a8c4 _lib_segment_putchar noload=0 abs=0
//T S23554af9f140 _lib_segment_eprints noload=0 abs=0
//T Sff63d250b521 _lib_segment_printf noload=0 abs=0
//T Sb401aee44acb _lib_segment_eprintf noload=0 abs=0
//T Sedd6b6695436 _lib_segment_input_avail noload=0 abs=0
//T S84a19e8ae015 _lib_segment_read noload=0 abs=0
//T Sd14c348df59b _lib_segment_pmon noload=0 abs=0
//T S45ec84dfaab0 _lib_segment_nr_to_mask noload=0 abs=0
//T S38738b71c88c _lib_segment_edge noload=0 abs=0
//T Saed5ad4c4c92 _lib_segment_btn noload=0 abs=0

//; SYMBOLS
//L stop stop 00000016 - _
//L s s 00000030 - _
//L s2 s2 0000004e - _
//L aa aa 00000061 - _
//S leds leds 0000ff01 - _
//S sw sw 0000ff10 - _
//L cikl cikl 00000072 - _
//L egyik egyik 00000075 - _
//L masik masik 0000007b - _
//L div div 00000080 S293d8fdbaa47 _
//L S293d8fdbaa47div_dok div_dok 00000087 s S293d8fdbaa47
//L S293d8fdbaa47div_dummy div_dummy 00000087 s S293d8fdbaa47
//L S293d8fdbaa47div_cyc div_cyc 0000008b s S293d8fdbaa47
//L S293d8fdbaa47div_cyc_next div_cyc_next 00000096 s S293d8fdbaa47
//L S293d8fdbaa47div_ret div_ret 00000098 s S293d8fdbaa47
//L S8e7b3d203072seed seed 0000009a s S8e7b3d203072
//L srand srand 0000009b S8e7b3d203072 _
//L rand rand 0000009d S8e7b3d203072 _
//L S8e7b3d203072c1 c1 000000a3 s S8e7b3d203072
//L S8e7b3d203072c2 c2 000000a9 s S8e7b3d203072
//L S8e7b3d203072c3 c3 000000af s S8e7b3d203072
//L str_chr str_chr 000000b8 Sbe1a78b9d15e _
//= CLOCK.CLOCK CLOCK.CLOCK 0000ff50 S035d1872e63c _
//= CLOCK.CLK CLOCK.CLK 0000ff50 S035d1872e63c _
//= CLOCK.PRE CLOCK.PRE 0000ff51 S035d1872e63c _
//= CLOCK.BCNT2 CLOCK.BCNT2 0000ff52 S035d1872e63c _
//= CLOCK.BCNT3 CLOCK.BCNT3 0000ff53 S035d1872e63c _
//= CLOCK.BCNT4 CLOCK.BCNT4 0000ff54 S035d1872e63c _
//= CLOCK.BCNT5 CLOCK.BCNT5 0000ff55 S035d1872e63c _
//= CLOCK.BCNT6 CLOCK.BCNT6 0000ff56 S035d1872e63c _
//= CLOCK.BCNT7 CLOCK.BCNT7 0000ff57 S035d1872e63c _
//= CLOCK.BCNT8 CLOCK.BCNT8 0000ff58 S035d1872e63c _
//= CLOCK.BCNT9 CLOCK.BCNT9 0000ff59 S035d1872e63c _
//= CLOCK.BCNT10 CLOCK.BCNT10 0000ff5a S035d1872e63c _
//= CLOCK.BCNT11 CLOCK.BCNT11 0000ff5b S035d1872e63c _
//= CLOCK.BCNT12 CLOCK.BCNT12 0000ff5c S035d1872e63c _
//= CLOCK.BCNT13 CLOCK.BCNT13 0000ff5d S035d1872e63c _
//= CLOCK.BCNT14 CLOCK.BCNT14 0000ff5e S035d1872e63c _
//= CLOCK.BCNT15 CLOCK.BCNT15 0000ff5f S035d1872e63c _
//= GPIO.PORTA GPIO.PORTA 0000ff00 S0e483de54bb5 _
//= GPIO.PORTB GPIO.PORTB 0000ff01 S0e483de54bb5 _
//= GPIO.PORTC GPIO.PORTC 0000ff02 S0e483de54bb5 _
//= GPIO.PORTD GPIO.PORTD 0000ff03 S0e483de54bb5 _
//= GPIOA.ODR GPIOA.ODR 0000ff00 S0e483de54bb5 _
//= GPIOB.ODR GPIOB.ODR 0000ff01 S0e483de54bb5 _
//= GPIOC.ODR GPIOC.ODR 0000ff02 S0e483de54bb5 _
//= GPIOD.ODR GPIOD.ODR 0000ff03 S0e483de54bb5 _
//= GPIO.7SEG GPIO.7SEG 0000ff00 S0e483de54bb5 _
//= GPIO.LED GPIO.LED 0000ff01 S0e483de54bb5 _
//= GPIO.PORTI GPIO.PORTI 0000ff20 S0e483de54bb5 _
//= GPIO.PORTJ GPIO.PORTJ 0000ff10 S0e483de54bb5 _
//= GPIOI.IDR GPIOI.IDR 0000ff20 S0e483de54bb5 _
//= GPIOJ.IDR GPIOJ.IDR 0000ff10 S0e483de54bb5 _
//= GPIO.BTN GPIO.BTN 0000ff20 S0e483de54bb5 _
//= GPIO.SW GPIO.SW 0000ff10 S0e483de54bb5 _
//= UART.DR UART.DR 0000ff40 S33927ab86900 _
//= UART.CTRL UART.CTRL 0000ff41 S33927ab86900 _
//= UART.RSTAT UART.RSTAT 0000ff42 S33927ab86900 _
//= UART.TSTAT UART.TSTAT 0000ff43 S33927ab86900 _
//= UART.CPB UART.CPB 0000ff44 S33927ab86900 _
//= UART.SREG0 UART.SREG0 0000ff4c S33927ab86900 _
//= UART.SREG1 UART.SREG1 0000ff4d S33927ab86900 _
//= UART.SREG2 UART.SREG2 0000ff4e S33927ab86900 _
//= UART.SREG3 UART.SREG3 0000ff4f S33927ab86900 _
//L _char_is_true _char_is_true 000000c8 S602f0726a14b _
//L _char_is_false _char_is_false 000000ca S602f0726a14b _
//L isdigit isdigit 000000cc S847a5c4e618b _
//L islower islower 000000d1 S9a7f1c151839 _
//L isupper isupper 000000d6 S154e11ca77b1 _
//L isalpha isalpha 000000db Sf1f3b6b1f10a _
//L isalnum isalnum 000000e0 Sb95a2b17779b _
//L putchar putchar 000000e5 S503b4c87a8c4 _
//L eprints eprints 000000e6 S23554af9f140 _
//L printf printf 000000e7 Sff63d250b521 _
//L eprintf eprintf 000000e8 Sb401aee44acb _
//L input_avail input_avail 000000e9 Sedd6b6695436 _
//L read read 000000ea S84a19e8ae015 _
//= _pm_callin _pm_callin 0000f000 Sd14c348df59b _
//= _pm_enter_by_uart _pm_enter_by_uart 0000f001 Sd14c348df59b _
//= _pm_getchar _pm_getchar 0000f002 Sd14c348df59b _
//= _pm_version _pm_version 0000f003 Sd14c348df59b _
//= _pm_itobcd _pm_itobcd 0000f004 Sd14c348df59b _
//= _pm_cold_start _pm_cold_start 0000f005 Sd14c348df59b _
//= _pm_strchr _pm_strchr 0000f006 Sd14c348df59b _
//= _pm_streq _pm_streq 0000f007 Sd14c348df59b _
//= _pm_check_uart _pm_check_uart 0000f008 Sd14c348df59b _
//= _pm_input_avail _pm_input_avail 0000f008 Sd14c348df59b _
//= _pm_hexchar2value _pm_hexchar2value 0000f009 Sd14c348df59b _
//= _pm_value2hexchar _pm_value2hexchar 0000f00a Sd14c348df59b _
//= _pm_htoi _pm_htoi 0000f00b Sd14c348df59b _
//= _pm_strieq _pm_strieq 0000f00c Sd14c348df59b _
//= _pm_read _pm_read 0000f00d Sd14c348df59b _
//= _pm_putchar _pm_putchar 0000f00e Sd14c348df59b _
//= _pm_prints _pm_prints 0000f00f Sd14c348df59b _
//= _pm_printsnl _pm_printsnl 0000f010 Sd14c348df59b _
//= _pm_print_vhex _pm_print_vhex 0000f011 Sd14c348df59b _
//= _pm_pes _pm_pes 0000f012 Sd14c348df59b _
//= _pm_printd _pm_printd 0000f013 Sd14c348df59b _
//= _pm_printf _pm_printf 0000f014 Sd14c348df59b _
//= _pm_pesf _pm_pesf 0000f015 Sd14c348df59b _
//= _pm_ascii2seg _pm_ascii2seg 0000f016 Sd14c348df59b _
//L monitor monitor 000000ec Sd14c348df59b _
//L monitor_by_uart monitor_by_uart 000000ed Sd14c348df59b _
//L monitor_by_button monitor_by_button 000000ee Sd14c348df59b _
//L monitor_version monitor_version 000000f4 Sd14c348df59b _
//L _nr_to_mask _nr_to_mask 000000fa S45ec84dfaab0 _
//L S45ec84dfaab0nr_to_mask_cyc nr_to_mask_cyc 000000fd s S45ec84dfaab0
//L S45ec84dfaab0nr_to_mask_ret nr_to_mask_ret 00000102 s S45ec84dfaab0
//L S38738b71c88clast_btn last_btn 00000105 s S38738b71c88c
//L S38738b71c88clast_sw last_sw 00000106 s S38738b71c88c
//L S38738b71c88clast_btn_down last_btn_down 00000107 s S38738b71c88c
//L S38738b71c88clast_sw_down last_sw_down 00000108 s S38738b71c88c
//L S38738b71c88clast_btn_inited last_btn_inited 00000109 s S38738b71c88c
//L S38738b71c88clast_sw_inited last_sw_inited 0000010a s S38738b71c88c
//L _lib_edge_detect _lib_edge_detect 0000010b S38738b71c88c _
//L S38738b71c88cinit_btn init_btn 00000113 s S38738b71c88c
//L S38738b71c88cinit_sw init_sw 0000011c s S38738b71c88c
//L S38738b71c88cpressed_inited pressed_inited 00000125 s S38738b71c88c
//L S38738b71c88cch_btn ch_btn 00000128 s S38738b71c88c
//L S38738b71c88cch_sw ch_sw 0000012b s S38738b71c88c
//L S38738b71c88ccheck_push check_push 0000013b s S38738b71c88c
//L S38738b71c88ccheck_release check_release 0000013e s S38738b71c88c
//L S38738b71c88cpressed_true pressed_true 00000140 s S38738b71c88c
//L S38738b71c88cpressed_false pressed_false 00000142 s S38738b71c88c
//L S38738b71c88cpressed_end pressed_end 00000143 s S38738b71c88c
//L btn_restart btn_restart 00000149 S38738b71c88c _
//L sw_restart sw_restart 0000014e S38738b71c88c _
//L btn_posedge btn_posedge 00000153 Saed5ad4c4c92 _
//L btn_negedge btn_negedge 0000015b Saed5ad4c4c92 _
//L btn_get btn_get 00000163 Saed5ad4c4c92 _

//; CODE
//P -
//F test.asm
f112abcd //C 00001     4 UN mvzl	r1,0xabcd
01d2efff //C 00002     5 mvzl	r13,0xefff
01020003 //C 00003     6 mvzl	r0,3
0600ff41 //C 00004     7 st	r0,0xff41
f40000e8 //C 00005     9 ces	eprintf
//R 00005 #24 eprintf 000000e8
00000048 //C 00006    10 db	72
00000065 //C 00007    10 db	101
0000006c //C 00008    10 db	108
0000006c //C 00009    10 db	108
0000006f //C 0000a    10 db	111
00000057 //C 0000b    10 db	87
0000006f //C 0000c    10 db	111
00000072 //C 0000d    10 db	114
0000006c //C 0000e    10 db	108
00000064 //C 0000f    10 db	100
00000021 //C 00010    10 db	33
0000000a //C 00011    10 db	10
00000000 //C 00012    10 db
f40000e8 //C 00013    12 ces	eprintf
//R 00013 #24 eprintf 000000e8
00000042 //C 00014    13 db	66
00000000 //C 00015    13 db
01f20016 //C 00016    15 stop:	jmp	stop
//R 00016 #16 stop 00000016
//G stop
01020001 //C 00017    17 mvzl	r0,1
0600ff51 //C 00018    18 st	r0,CLOCK.PRE
//R 00018 #16 CLOCK.PRE 0000ff51
0100ffff //C 00019    20 mvl	r0,0xffffffff
0101ffff //C 0001a    21 mvh	r0,0xffffffff
0400f013 //C 0001b    22 call	0xf013
0102000a //C 0001c    23 mvzl	r0,10
0400f00e //C 0001d    24 call	0xf00e
01020030 //C 0001e    26 mvzl	r0,s
//R 0001e #16 s 00000030
01123039 //C 0001f    27 mvzl	r1,12345
0120beef //C 00020    28 mvl	r2,0xdeadbeef
0121dead //C 00021    29 mvh	r2,0xdeadbeef
0132004e //C 00022    30 mvzl	r3,s2
//R 00022 #16 s2 0000004e
01420041 //C 00023    31 mvzl	r4,'A'
040000e7 //C 00024    32 call	printf
//R 00024 #24 printf 000000e7
0112ffff //C 00025    34 mvzl	r1,65535
f400f015 //C 00026    35 ces	0xf015
00000064 //C 00027    36 db	100
0000003d //C 00028    36 db	61
00000025 //C 00029    36 db	37
00000078 //C 0002a    36 db	120
0000000a //C 0002b    36 db	10
00000000 //C 0002c    36 db
01020042 //C 0002d    37 mvzl	r0,'B'
0400f00e //C 0002e    38 call	0xf00e
01f2f000 //C 0002f    40 jmp	0xf000
00000064 //C 00030    42 db	100
//G s
00000065 //C 00031    42 db	101
00000063 //C 00032    42 db	99
0000003d //C 00033    42 db	61
00000025 //C 00034    42 db	37
00000064 //C 00035    42 db	100
0000000a //C 00036    42 db	10
00000068 //C 00037    42 db	104
00000065 //C 00038    42 db	101
00000078 //C 00039    42 db	120
0000003d //C 0003a    42 db	61
00000025 //C 0003b    42 db	37
00000078 //C 0003c    42 db	120
0000000a //C 0003d    42 db	10
00000073 //C 0003e    42 db	115
00000074 //C 0003f    42 db	116
00000072 //C 00040    42 db	114
0000003d //C 00041    42 db	61
00000025 //C 00042    42 db	37
00000073 //C 00043    42 db	115
0000000a //C 00044    42 db	10
00000063 //C 00045    42 db	99
00000068 //C 00046    42 db	104
00000061 //C 00047    42 db	97
00000072 //C 00048    42 db	114
0000003d //C 00049    42 db	61
00000025 //C 0004a    42 db	37
00000063 //C 0004b    42 db	99
0000000a //C 0004c    42 db	10
00000000 //C 0004d    42 db
00000074 //C 0004e    43 db	116
//G s2
00000068 //C 0004f    43 db	104
00000069 //C 00050    43 db	105
00000073 //C 00051    43 db	115
00000020 //C 00052    43 db	32
00000069 //C 00053    43 db	105
00000073 //C 00054    43 db	115
00000020 //C 00055    43 db	32
00000061 //C 00056    43 db	97
00000020 //C 00057    43 db	32
00000073 //C 00058    43 db	115
00000074 //C 00059    43 db	116
00000072 //C 0005a    43 db	114
00000069 //C 0005b    43 db	105
0000006e //C 0005c    43 db	110
00000067 //C 0005d    43 db	103
00000000 //C 0005e    43 db
00000400 //C 0005f    47 mov	r0,r4
06e00061 //C 00060    48 st	aa,r14
//R 00060 #16 aa 00000061
01f20061 //C 00061    50 jmp	aa
//R 00061 #16 aa 00000061
//G aa
00000041 //C 00062    52 db	65
00000042 //C 00063    52 db	66
00000043 //C 00064    52 db	67
00000044 //C 00065    52 db	68
00000045 //C 00066    52 db	69
00000046 //C 00067    52 db	70
00000047 //C 00068    52 db	71
00000048 //C 00069    52 db	72
00000000 //C 0006a    52 db
0102ff10 //C 0006b    58 ldl0	r0,sw
//R 0006b #16 sw 0000ff10
0112ff01 //C 0006c    59 ldl0	r1,leds
//R 0006c #16 leds 0000ff01
01320001 //C 0006d    60 ldl0	r3,1
01400000 //C 0006e    61 ldl	r4,0x00010000
01410001 //C 0006f    62 ldh	r4,0x00010000
01a20001 //C 00070    63 ldl0	r10,1
0ca10000 //C 00071    64 st	r10,r1
0ec00000 //C 00072    66 ld	r12,r0
//G cikl
00cf0300 //C 00073    67 and	r12,r3
21f2007b //C 00074    68 jnz	masik
//R 00074 #16 masik 0000007b
0ea10000 //C 00075    71 ld	r10,r1
//G egyik
02a80000 //C 00076    72 shl	r10
00a80400 //C 00077    73 cmp	r10,r4
11a20001 //C 00078    74 z1 ldl0	r10,1
0ca10000 //C 00079    75 st	r10,r1
01f20072 //C 0007a    76 jmp	cikl
//R 0007a #16 cikl 00000072
0e910000 //C 0007b    79 ld	r9,r1
//G masik
02990000 //C 0007c    80 shr	r9
11928000 //C 0007d    81 z ldl0	r9,0x8000
0c910000 //C 0007e    82 st	r9,r1
01f20072 //C 0007f    83 jmp	cikl
//R 0007f #16 cikl 00000072
//F math.asm
//P S293d8fdbaa47 _lib_segment_div
0ded0000 //C 00080    15 push	lr
//G div
0d6d0000 //C 00081    16 push	r6
021b0000 //C 00082    18 sz	r1
21f20087 //C 00083    19 NZ jmp	div_dok
//R 00083 #16 div_dok 00000087
00400000 //C 00084    20 mov	r4,r0		; div by zero
01520000 //C 00085    21 mvzl	r5,0x0
01f20098 //C 00086    22 jmp	div_ret
//R 00086 #16 div_ret 00000098
01420000 //C 00087    25 mvzl	r4,0		; Q= 0
//N div_dok S293d8fdbaa47
//N div_dummy S293d8fdbaa47
01520000 //C 00088    26 mvzl	r5,0		; R= 0
01618000 //C 00089    27 mvh	r6,0x80000000	; m= 1<<31
01600000 //C 0008a    28 mvl	r6,0x80000000
026b0000 //C 0008b    30 sz	r6
//N div_cyc S293d8fdbaa47
11f20098 //C 0008c    31 Z jmp	div_ret
//R 0008c #16 div_ret 00000098
02580000 //C 0008d    32 shl	r5		; r<<= 1
000c0600 //C 0008e    33 test	r0,r6		; if (n&m)
215d0001 //C 0008f    34 NZ or	r5,1		; r|= 1
00580100 //C 00090    35 cmp	r5,r1		; if (r>=d)
41f20096 //C 00091    36 LO jmp	div_cyc_next
//R 00091 #16 div_cyc_next 00000096
00560100 //C 00092    37 sub	r5,r1		; r-= d
004d0600 //C 00093    38 or	r4,r6		; q|= m
01f20096 //C 00094    39 jmp	div_cyc_next
//R 00094 #16 div_cyc_next 00000096
01f2008b //C 00095    40 jmp	div_cyc
//R 00095 #16 div_cyc 0000008b
02690000 //C 00096    42 shr	r6		; m>>= 1
//N div_cyc_next S293d8fdbaa47
01f2008b //C 00097    43 jmp	div_cyc
//R 00097 #16 div_cyc 0000008b
0f6d0000 //C 00098    45 pop	r6
//N div_ret S293d8fdbaa47
0ffd0000 //C 00099    46 pop	pc
//P S8e7b3d203072 _lib_segment_rand
00000049 //C 0009a    58 db	2127401289
//N seed S8e7b3d203072
0600009a //C 0009b    65 st	r0,seed
//R 0009b #16 seed 0000009a
//G srand
00f00e00 //C 0009c    66 ret
0ded0000 //C 0009d    72 push	lr
//G rand
0d0d0000 //C 0009e    73 push	r0
0d2d0000 //C 0009f    74 push	r2
0700009a //C 000a0    76 ld	r0,seed
//R 000a0 #16 seed 0000009a
00400000 //C 000a1    77 mov	r4,r0
0122000d //C 000a2    78 mvzl	r2,13
02480000 //C 000a3    79 c1:	shl	r4
//N c1 S8e7b3d203072
0124ffff //C 000a4    80 dec	r2
21f200a3 //C 000a5    81 jnz	c1
//R 000a5 #16 c1 000000a3
000e0400 //C 000a6    82 xor	r0,r4
00400000 //C 000a7    83 mov	r4,r0
01220011 //C 000a8    84 mvzl	r2,17
02490000 //C 000a9    85 c2:	shr	r4
//N c2 S8e7b3d203072
0124ffff //C 000aa    86 dec	r2
21f200a9 //C 000ab    87 jnz	c2
//R 000ab #16 c2 000000a9
000e0400 //C 000ac    88 xor	r0,r4
00400000 //C 000ad    89 mov	r4,r0
01220005 //C 000ae    90 mvzl	r2,5
02480000 //C 000af    91 c3:	shl	r4
//N c3 S8e7b3d203072
0124ffff //C 000b0    92 dec	r2
21f200af //C 000b1    93 jnz	c3
//R 000b1 #16 c3 000000af
000e0400 //C 000b2    94 xor	r0,r4
0600009a //C 000b3    95 st	r0,seed
//R 000b3 #16 seed 0000009a
00400000 //C 000b4    97 mov	r4,r0
0f2d0000 //C 000b5    99 pop	r2
0f0d0000 //C 000b6   100 pop	r0
0ffd0000 //C 000b7   101 pop	pc
//F str.asm
//P Sbe1a78b9d15e _lib_segment_str_chr
020b0000 //C 000b8    94 sz	r0		; check NULL pointer
//G str_chr
120d0000 //C 000b9    95 Z clc
10f00e00 //C 000ba    96 Z ret
02100000 //C 000bb    97 zeb	r1		; prepare character
0ded0000 //C 000bc    98 push	lr
0d1d0000 //C 000bd    99 push	r1
0d2d0000 //C 000be   100 push	r2
00400000 //C 000bf   101 mov	r4,r0
00000100 //C 000c0   102 mov	r0,r1
00100400 //C 000c1   103 mov	r1,r4
0400f006 //C 000c2   104 call	_pm_strchr
//R 000c2 #24 _pm_strchr 0000f006
00400100 //C 000c3   105 mov	r4,r1
00500200 //C 000c4   106 mov	r5,r2
0f2d0000 //C 000c5   107 pop	r2
0f1d0000 //C 000c6   108 pop	r1
0ffd0000 //C 000c7   109 pop	pc
//F char.asm
//P S602f0726a14b _lib_segment_character_fn
020c0000 //C 000c8    22 sec
//G _char_is_true
00f00e00 //C 000c9    23 ret
020d0000 //C 000ca    25 clc
//G _char_is_false
00f00e00 //C 000cb    26 ret
//P S847a5c4e618b _lib_segment_isdigit
01080030 //C 000cc    37 cmp	R0,'0'
//G isdigit
41f200ca //C 000cd    38 ULT jmp	_char_is_false
//R 000cd #16 _char_is_false 000000ca
01080039 //C 000ce    39 cmp	R0,'9'
91f200ca //C 000cf    40 UGT jmp	_char_is_false
//R 000cf #16 _char_is_false 000000ca
01f200c8 //C 000d0    41 jmp _char_is_true
//R 000d0 #16 _char_is_true 000000c8
//P S9a7f1c151839 _lib_segment_islower
01080061 //C 000d1    53 cmp	r0,'a'
//G islower
41f200ca //C 000d2    54 ULT jmp	_char_is_false
//R 000d2 #16 _char_is_false 000000ca
0108007a //C 000d3    55 cmp	r0,'z'
91f200ca //C 000d4    56 UGT jmp	_char_is_false
//R 000d4 #16 _char_is_false 000000ca
01f200c8 //C 000d5    57 jmp	_char_is_true
//R 000d5 #16 _char_is_true 000000c8
//P S154e11ca77b1 _lib_segment_isupper
01080041 //C 000d6    69 cmp	r0,'A'
//G isupper
41f200ca //C 000d7    70 ULT jmp	_char_is_false
//R 000d7 #16 _char_is_false 000000ca
0108005a //C 000d8    71 cmp	r0,'Z'
91f200ca //C 000d9    72 UGT jmp	_char_is_false
//R 000d9 #16 _char_is_false 000000ca
01f200c8 //C 000da    73 jmp	_char_is_true
//R 000da #16 _char_is_true 000000c8
//P Sf1f3b6b1f10a _lib_segment_isalpha
0ded0000 //C 000db    85 push	lr
//G isalpha
040000d1 //C 000dc    86 call	islower
//R 000dc #24 islower 000000d1
3ffd0000 //C 000dd    87 C pop	pc
040000d6 //C 000de    88 call	isupper
//R 000de #24 isupper 000000d6
0ffd0000 //C 000df    89 pop	pc
//P Sb95a2b17779b _lib_segment_isalnum
0ded0000 //C 000e0   101 push	lr
//G isalnum
040000db //C 000e1   102 call	isalpha
//R 000e1 #24 isalpha 000000db
3ffd0000 //C 000e2   103 C pop	pc
040000cc //C 000e3   104 call	isdigit
//R 000e3 #24 isdigit 000000cc
0ffd0000 //C 000e4   105 pop	pc
//F inout.asm
//P S503b4c87a8c4 _lib_segment_putchar
01f2f00e //C 000e5    24 jmp	_pm_putchar
//R 000e5 #16 _pm_putchar 0000f00e
//G putchar
//P S23554af9f140 _lib_segment_eprints
01f2f012 //C 000e6    54 jmp	_pm_pes
//R 000e6 #16 _pm_pes 0000f012
//G eprints
//P Sff63d250b521 _lib_segment_printf
01f2f014 //C 000e7    60 jmp	_pm_printf
//R 000e7 #16 _pm_printf 0000f014
//G printf
//P Sb401aee44acb _lib_segment_eprintf
01f2f015 //C 000e8    66 jmp	_pm_pesf
//R 000e8 #16 _pm_pesf 0000f015
//G eprintf
//P Sedd6b6695436 _lib_segment_input_avail
01f2f008 //C 000e9    72 jmp	_pm_check_uart
//R 000e9 #16 _pm_check_uart 0000f008
//G input_avail
//P S84a19e8ae015 _lib_segment_read
0740ff40 //C 000ea    89 ld	r4,UART.DR
//R 000ea #16 UART.DR 0000ff40
//G read
00f00e00 //C 000eb    90 ret
//F mon.asm
//P Sd14c348df59b _lib_segment_pmon
01f2f000 //C 000ec    40 jmp	_pm_callin
//R 000ec #16 _pm_callin 0000f000
//G monitor
01f2f001 //C 000ed    44 jmp	_pm_enter_by_uart
//R 000ed #16 _pm_enter_by_uart 0000f001
//G monitor_by_uart
0ded0000 //C 000ee    48 push	lr
//G monitor_by_button
04000153 //C 000ef    49 call	btn_posedge
//R 000ef #24 btn_posedge 00000153
4ffd0000 //C 000f0    50 NC pop	pc
040000ec //C 000f1    51 call	monitor
//R 000f1 #24 monitor 000000ec
04000149 //C 000f2    52 call	btn_restart
//R 000f2 #24 btn_restart 00000149
0ffd0000 //C 000f3    53 pop	pc
0ded0000 //C 000f4    57 push	lr
//G monitor_version
0d0d0000 //C 000f5    58 push	r0
0400f003 //C 000f6    59 call	_pm_version
//R 000f6 #24 _pm_version 0000f003
00400000 //C 000f7    60 mov	r4,r0
0f0d0000 //C 000f8    61 pop	r0
0ffd0000 //C 000f9    62 pop	pc
//F bsp.asm
//P S45ec84dfaab0 _lib_segment_nr_to_mask
0d1d0000 //C 000fa    26 push	r1
//G _nr_to_mask
010b001f //C 000fb    27 btst	r0,0x1f		; max nr is 31
01120001 //C 000fc    28 mvzl	r1,1		; mask for nr==0
020b0000 //C 000fd    30 sz	r0		; is nr zero?
//N nr_to_mask_cyc S45ec84dfaab0
11f20102 //C 000fe    31 jz	nr_to_mask_ret	; if yes, go out
//R 000fe #16 nr_to_mask_ret 00000102
02180000 //C 000ff    32 shl	r1		; shift mask up
0104ffff //C 00100    33 dec	r0		; decrement nr
01f200fd //C 00101    34 jmp	nr_to_mask_cyc	; check for zero
//R 00101 #16 nr_to_mask_cyc 000000fd
00000100 //C 00102    36 mov	r0,r1		; return mask in R0
//N nr_to_mask_ret S45ec84dfaab0
0f1d0000 //C 00103    37 pop	r1
00f00e00 //C 00104    38 ret
//P S38738b71c88c _lib_segment_edge
00000000 //C 00105   120 ds	1
//+ 00000001
//N last_btn S38738b71c88c
00000000 //C 00106   122 ds	1
//+ 00000001
//N last_sw S38738b71c88c
00000000 //C 00107   124 ds	1
//+ 00000001
//N last_btn_down S38738b71c88c
00000000 //C 00108   126 ds	1
//+ 00000001
//N last_sw_down S38738b71c88c
00000000 //C 00109   128 db	0
//N last_btn_inited S38738b71c88c
00000000 //C 0010a   130 db	0
//N last_sw_inited S38738b71c88c
0ded0000 //C 0010b   141 push	lr
//G _lib_edge_detect
0d1d0000 //C 0010c   142 push	r1
0d2d0000 //C 0010d   143 push	r2
0d3d0000 //C 0010e   144 push	r3
0d4d0000 //C 0010f   145 push	r4
0d5d0000 //C 00110   146 push	r5
00500100 //C 00111   148 mov	r5,r1		; what edge to check
31f2011c //C 00112   149 C jmp	init_sw
//R 00112 #16 init_sw 0000011c
07100109 //C 00113   151 ld	r1,last_btn_inited
//R 00113 #16 last_btn_inited 00000109
//N init_btn S38738b71c88c
021b0000 //C 00114   152 sz	r1
21f20125 //C 00115   153 jnz	pressed_inited
//R 00115 #16 pressed_inited 00000125
01120001 //C 00116   154 mvzl	r1,1
06100109 //C 00117   155 st	r1,last_btn_inited
//R 00117 #16 last_btn_inited 00000109
0710ff20 //C 00118   156 ld	r1,GPIO.BTN
//R 00118 #16 GPIO.BTN 0000ff20
06100105 //C 00119   157 st	r1,last_btn
//R 00119 #16 last_btn 00000105
06100107 //C 0011a   158 st	r1,last_btn_down
//R 0011a #16 last_btn_down 00000107
01f20142 //C 0011b   159 jmp	pressed_false
//R 0011b #16 pressed_false 00000142
0710010a //C 0011c   161 ld	r1,last_sw_inited
//R 0011c #16 last_sw_inited 0000010a
//N init_sw S38738b71c88c
021b0000 //C 0011d   162 sz	r1
21f20125 //C 0011e   163 jnz	pressed_inited
//R 0011e #16 pressed_inited 00000125
01120001 //C 0011f   164 mvzl	r1,1
0610010a //C 00120   165 st	r1,last_sw_inited
//R 00120 #16 last_sw_inited 0000010a
0710ff10 //C 00121   166 ld	r1,GPIO.SW
//R 00121 #16 GPIO.SW 0000ff10
06100106 //C 00122   167 st	r1,last_sw
//R 00122 #16 last_sw 00000106
06100108 //C 00123   168 st	r1,last_sw_down
//R 00123 #16 last_sw_down 00000108
01f20142 //C 00124   169 jmp	pressed_false
//R 00124 #16 pressed_false 00000142
4122ff20 //C 00125   173 NC mvzl	r2,GPIO.BTN
//R 00125 #16 GPIO.BTN 0000ff20
//N pressed_inited S38738b71c88c
3122ff10 //C 00126   174 C mvzl	r2,GPIO.SW
//R 00126 #16 GPIO.SW 0000ff10
31f2012b //C 00127   175 jc	ch_sw
//R 00127 #16 ch_sw 0000012b
025b0000 //C 00128   177 sz	r5
//N ch_btn S38738b71c88c
11120105 //C 00129   178 Z mvzl	r1,last_btn
//R 00129 #16 last_btn 00000105
21120107 //C 0012a   179 NZ mvzl	r1,last_btn_down
//R 0012a #16 last_btn_down 00000107
025b0000 //C 0012b   181 sz	r5
//N ch_sw S38738b71c88c
11120106 //C 0012c   182 Z mvzl	r1,last_sw
//R 0012c #16 last_sw 00000106
21120108 //C 0012d   183 NZ mvzl	r1,last_sw_down
//R 0012d #16 last_sw_down 00000108
0e310000 //C 0012e   187 ld	r3,r1
0e420000 //C 0012f   188 ld	r4,r2
003f0000 //C 00130   190 and	r3,r0		; masked last
004f0000 //C 00131   191 and	r4,r0		; masked port
00380400 //C 00132   192 cmp	r3,r4
11f20142 //C 00133   193 EQ jmp	pressed_false
//R 00133 #16 pressed_false 00000142
02040000 //C 00134   194 not	r0		; negated mask
0e310000 //C 00135   195 ld	r3,r1		; original last
003f0000 //C 00136   196 and	r3,r0		; clear checked bit
003d0400 //C 00137   197 or	r3,r4		; or with masked port
0c310000 //C 00138   198 st	r3,r1		; store new last value
025b0000 //C 00139   199 sz	r5
21f2013e //C 0013a   200 jnz	check_release
//R 0013a #16 check_release 0000013e
024b0000 //C 0013b   202 sz	r4		; check new port value
//N check_push S38738b71c88c
11f20142 //C 0013c   203 jz	pressed_false
//R 0013c #16 pressed_false 00000142
21f20140 //C 0013d   204 jnz	pressed_true
//R 0013d #16 pressed_true 00000140
024b0000 //C 0013e   206 sz	r4
//N check_release S38738b71c88c
21f20142 //C 0013f   207 jnz	pressed_false
//R 0013f #16 pressed_false 00000142
020c0000 //C 00140   210 sec
//N pressed_true S38738b71c88c
01f20143 //C 00141   211 jmp	pressed_end
//R 00141 #16 pressed_end 00000143
020d0000 //C 00142   213 clc
//N pressed_false S38738b71c88c
0f5d0000 //C 00143   215 pop	r5
//N pressed_end S38738b71c88c
0f4d0000 //C 00144   216 pop	r4
0f3d0000 //C 00145   217 pop	r3
0f2d0000 //C 00146   218 pop	r2
0f1d0000 //C 00147   219 pop	r1
0ffd0000 //C 00148   220 pop	pc
0d1d0000 //C 00149   225 push	r1
//G btn_restart
0710ff20 //C 0014a   226 ld	r1,GPIO.BTN
//R 0014a #16 GPIO.BTN 0000ff20
06100105 //C 0014b   227 st	r1,last_btn
//R 0014b #16 last_btn 00000105
0f1d0000 //C 0014c   228 pop	r1
00f00e00 //C 0014d   229 ret
0d1d0000 //C 0014e   233 push	r1
//G sw_restart
0710ff10 //C 0014f   234 ld	r1,GPIO.SW
//R 0014f #16 GPIO.SW 0000ff10
06100106 //C 00150   235 st	r1,last_sw
//R 00150 #16 last_sw 00000106
0f1d0000 //C 00151   236 pop	r1
00f00e00 //C 00152   237 ret
//P Saed5ad4c4c92 _lib_segment_btn
0ded0000 //C 00153   250 push	lr
//G btn_posedge
040000fa //C 00154   251 call	_nr_to_mask
//R 00154 #24 _nr_to_mask 000000fa
0d1d0000 //C 00155   252 push	r1
01120000 //C 00156   253 mvzl	r1,0
020d0000 //C 00157   254 clc
0400010b //C 00158   255 call	_lib_edge_detect
//R 00158 #24 _lib_edge_detect 0000010b
0f1d0000 //C 00159   256 pop	r1
0ffd0000 //C 0015a   257 pop	pc
0ded0000 //C 0015b   266 push	lr
//G btn_negedge
040000fa //C 0015c   267 call	_nr_to_mask
//R 0015c #24 _nr_to_mask 000000fa
0d1d0000 //C 0015d   268 push	r1
01120001 //C 0015e   269 mvzl	r1,1
020d0000 //C 0015f   270 clc
0400010b //C 00160   271 call	_lib_edge_detect
//R 00160 #24 _lib_edge_detect 0000010b
0f1d0000 //C 00161   272 pop	r1
0ffd0000 //C 00162   273 pop	pc
0ded0000 //C 00163   282 push	lr
//G btn_get
0d1d0000 //C 00164   283 push	r1
040000fa //C 00165   284 call	_nr_to_mask
//R 00165 #24 _nr_to_mask 000000fa
0710ff20 //C 00166   285 ld	r1,GPIO.BTN
//R 00166 #16 GPIO.BTN 0000ff20
001f0000 //C 00167   286 and	r1,r0
120d0000 //C 00168   287 Z clc
220c0000 //C 00169   288 NZ sec
0f1d0000 //C 0016a   289 pop	r1
0ffd0000 //C 0016b   290 pop	pc
//H fe957f77
//E
