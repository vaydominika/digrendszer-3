//U P2

//; SEGMENTS
//T S293d8fdbaa47 _lib_segment_div noload=0 abs=0
//T S8e7b3d203072 _lib_segment_rand noload=0 abs=0
//T Sbe1a78b9d15e _lib_segment_str_chr noload=0 abs=0
//T S0e483de54bb5 _lib_segment_regs_of_gpio noload=0 abs=0
//T S33927ab86900 _lib_segment_regs_of_uart noload=0 abs=0
//T Scb89bb6e89e9 _lib_segment_brd_ctrl noload=0 abs=0
//T S602f0726a14b _lib_segment_character_fn noload=0 abs=0
//T S847a5c4e618b _lib_segment_isdigit noload=0 abs=0
//T S9a7f1c151839 _lib_segment_islower noload=0 abs=0
//T S154e11ca77b1 _lib_segment_isupper noload=0 abs=0
//T Sf1f3b6b1f10a _lib_segment_isalpha noload=0 abs=0
//T Sb95a2b17779b _lib_segment_isalnum noload=0 abs=0
//T S503b4c87a8c4 _lib_segment_putchar noload=0 abs=0
//T S23554af9f140 _lib_segment_eprints noload=0 abs=0
//T Sb401aee44acb _lib_segment_eprintf noload=0 abs=0
//T Sedd6b6695436 _lib_segment_input_avail noload=0 abs=0
//T S84a19e8ae015 _lib_segment_read noload=0 abs=0
//T Sd14c348df59b _lib_segment_pmon noload=0 abs=0
//T S45ec84dfaab0 _lib_segment_nr_to_mask noload=0 abs=0
//T S38738b71c88c _lib_segment_edge noload=0 abs=0
//T Saed5ad4c4c92 _lib_segment_btn noload=0 abs=0

//; SYMBOLS
//= btn btn 00000000 - _
//= dummy dummy 0000000c - _
//L start start 00000003 - _
//L real_start real_start 0000000d - _
//L cyc cyc 0000000f - _
//L eof_stack eof_stack 00000084 - _
//L div div 00000085 S293d8fdbaa47 _
//L S293d8fdbaa47div_dok div_dok 0000008c s S293d8fdbaa47
//L S293d8fdbaa47div_dummy div_dummy 0000008c s S293d8fdbaa47
//L S293d8fdbaa47div_cyc div_cyc 00000090 s S293d8fdbaa47
//L S293d8fdbaa47div_cyc_next div_cyc_next 0000009b s S293d8fdbaa47
//L S293d8fdbaa47div_ret div_ret 0000009d s S293d8fdbaa47
//L S8e7b3d203072seed seed 0000009f s S8e7b3d203072
//L srand srand 000000a0 S8e7b3d203072 _
//L rand rand 000000a2 S8e7b3d203072 _
//L S8e7b3d203072c1 c1 000000a8 s S8e7b3d203072
//L S8e7b3d203072c2 c2 000000ae s S8e7b3d203072
//L S8e7b3d203072c3 c3 000000b4 s S8e7b3d203072
//L str_chr str_chr 000000bd Sbe1a78b9d15e _
//= GPIO.PORTA GPIO.PORTA 0000ff00 S0e483de54bb5 _
//= GPIO.PORTB GPIO.PORTB 0000ff01 S0e483de54bb5 _
//= GPIO.PORTC GPIO.PORTC 0000ff02 S0e483de54bb5 _
//= GPIO.PORTD GPIO.PORTD 0000ff03 S0e483de54bb5 _
//= GPIOA.ODR GPIOA.ODR 0000ff00 S0e483de54bb5 _
//= GPIOB.ODR GPIOB.ODR 0000ff01 S0e483de54bb5 _
//= GPIOC.ODR GPIOC.ODR 0000ff02 S0e483de54bb5 _
//= GPIOD.ODR GPIOD.ODR 0000ff03 S0e483de54bb5 _
//= GPIO.7SEG GPIO.7SEG 0000ff00 S0e483de54bb5 _
//= GPIO.LED GPIO.LED 0000ff01 S0e483de54bb5 _
//= GPIO.PORTI GPIO.PORTI 0000ff20 S0e483de54bb5 _
//= GPIO.PORTJ GPIO.PORTJ 0000ff10 S0e483de54bb5 _
//= GPIOI.IDR GPIOI.IDR 0000ff20 S0e483de54bb5 _
//= GPIOJ.IDR GPIOJ.IDR 0000ff10 S0e483de54bb5 _
//= GPIO.BTN GPIO.BTN 0000ff20 S0e483de54bb5 _
//= GPIO.SW GPIO.SW 0000ff10 S0e483de54bb5 _
//= UART.DR UART.DR 0000ff40 S33927ab86900 _
//= UART.CTRL UART.CTRL 0000ff41 S33927ab86900 _
//= UART.RSTAT UART.RSTAT 0000ff42 S33927ab86900 _
//= UART.TSTAT UART.TSTAT 0000ff43 S33927ab86900 _
//= UART.CPB UART.CPB 0000ff44 S33927ab86900 _
//= UART.SREG0 UART.SREG0 0000ff4c S33927ab86900 _
//= UART.SREG1 UART.SREG1 0000ff4d S33927ab86900 _
//= UART.SREG2 UART.SREG2 0000ff4e S33927ab86900 _
//= UART.SREG3 UART.SREG3 0000ff4f S33927ab86900 _
//= BRD_CTRL.OUT BRD_CTRL.OUT 0000fff0 Scb89bb6e89e9 _
//L _char_is_true _char_is_true 000000cd S602f0726a14b _
//L _char_is_false _char_is_false 000000cf S602f0726a14b _
//L isdigit isdigit 000000d1 S847a5c4e618b _
//L islower islower 000000d6 S9a7f1c151839 _
//L isupper isupper 000000db S154e11ca77b1 _
//L isalpha isalpha 000000e0 Sf1f3b6b1f10a _
//L isalnum isalnum 000000e5 Sb95a2b17779b _
//L putchar putchar 000000ea S503b4c87a8c4 _
//L eprints eprints 000000eb S23554af9f140 _
//L eprintf eprintf 000000ec Sb401aee44acb _
//L input_avail input_avail 000000ed Sedd6b6695436 _
//L read read 000000ee S84a19e8ae015 _
//= _pm_callin _pm_callin 0000f000 Sd14c348df59b _
//= _pm_enter_by_uart _pm_enter_by_uart 0000f001 Sd14c348df59b _
//= _pm_getchar _pm_getchar 0000f002 Sd14c348df59b _
//= _pm_version _pm_version 0000f003 Sd14c348df59b _
//= _pm_itobcd _pm_itobcd 0000f004 Sd14c348df59b _
//= _pm_cold_start _pm_cold_start 0000f005 Sd14c348df59b _
//= _pm_strchr _pm_strchr 0000f006 Sd14c348df59b _
//= _pm_streq _pm_streq 0000f007 Sd14c348df59b _
//= _pm_check_uart _pm_check_uart 0000f008 Sd14c348df59b _
//= _pm_input_avail _pm_input_avail 0000f008 Sd14c348df59b _
//= _pm_hexchar2value _pm_hexchar2value 0000f009 Sd14c348df59b _
//= _pm_value2hexchar _pm_value2hexchar 0000f00a Sd14c348df59b _
//= _pm_htoi _pm_htoi 0000f00b Sd14c348df59b _
//= _pm_strieq _pm_strieq 0000f00c Sd14c348df59b _
//= _pm_read _pm_read 0000f00d Sd14c348df59b _
//= _pm_putchar _pm_putchar 0000f00e Sd14c348df59b _
//= _pm_prints _pm_prints 0000f00f Sd14c348df59b _
//= _pm_printsnl _pm_printsnl 0000f010 Sd14c348df59b _
//= _pm_print_vhex _pm_print_vhex 0000f011 Sd14c348df59b _
//= _pm_pes _pm_pes 0000f012 Sd14c348df59b _
//= _pm_printd _pm_printd 0000f013 Sd14c348df59b _
//= _pm_printf _pm_printf 0000f014 Sd14c348df59b _
//= _pm_pesf _pm_pesf 0000f015 Sd14c348df59b _
//= _pm_ascii2seg _pm_ascii2seg 0000f016 Sd14c348df59b _
//L monitor monitor 000000f0 Sd14c348df59b _
//L monitor_by_uart monitor_by_uart 000000f1 Sd14c348df59b _
//L monitor_by_button monitor_by_button 000000f2 Sd14c348df59b _
//L monitor_version monitor_version 000000f8 Sd14c348df59b _
//L _nr_to_mask _nr_to_mask 000000fe S45ec84dfaab0 _
//L S45ec84dfaab0nr_to_mask_cyc nr_to_mask_cyc 00000101 s S45ec84dfaab0
//L S45ec84dfaab0nr_to_mask_ret nr_to_mask_ret 00000106 s S45ec84dfaab0
//L S38738b71c88clast_btn last_btn 00000109 s S38738b71c88c
//L S38738b71c88clast_sw last_sw 0000010a s S38738b71c88c
//L S38738b71c88clast_btn_down last_btn_down 0000010b s S38738b71c88c
//L S38738b71c88clast_sw_down last_sw_down 0000010c s S38738b71c88c
//L S38738b71c88clast_btn_inited last_btn_inited 0000010d s S38738b71c88c
//L S38738b71c88clast_sw_inited last_sw_inited 0000010e s S38738b71c88c
//L _lib_edge_detect _lib_edge_detect 0000010f S38738b71c88c _
//L S38738b71c88cinit_btn init_btn 00000117 s S38738b71c88c
//L S38738b71c88cinit_sw init_sw 00000120 s S38738b71c88c
//L S38738b71c88cpressed_inited pressed_inited 00000129 s S38738b71c88c
//L S38738b71c88cch_btn ch_btn 0000012c s S38738b71c88c
//L S38738b71c88cch_sw ch_sw 0000012f s S38738b71c88c
//L S38738b71c88ccheck_push check_push 0000013f s S38738b71c88c
//L S38738b71c88ccheck_release check_release 00000142 s S38738b71c88c
//L S38738b71c88cpressed_true pressed_true 00000144 s S38738b71c88c
//L S38738b71c88cpressed_false pressed_false 00000146 s S38738b71c88c
//L S38738b71c88cpressed_end pressed_end 00000147 s S38738b71c88c
//L btn_restart btn_restart 0000014d S38738b71c88c _
//L sw_restart sw_restart 00000152 S38738b71c88c _
//L btn_posedge btn_posedge 00000157 Saed5ad4c4c92 _
//L btn_negedge btn_negedge 0000015f Saed5ad4c4c92 _
//L btn_get btn_get 00000167 Saed5ad4c4c92 _

//; CODE
//P -
//F counter3.asm
01f20003 //C 00001     7 jmp	start		;start
//R 00001 #16 start 00000003
0000000c //C 00002     8 db	dummy
//R 00002 d8 dummy 0000000c
011200d9 //C 00003    10 mvzl	r1,217
//G start
0610ff44 //C 00004    11 st	r1,UART.CPB
//R 00004 #16 UART.CPB 0000ff44
01120003 //C 00005    12 mvzl	r1,3		; turn on rx and tx
0610ff41 //C 00006    13 st	r1,UART.CTRL
//R 00006 #16 UART.CTRL 0000ff41
01d20084 //C 00007    15 mvzl	r13,eof_stack
//R 00007 #16 eof_stack 00000084
01a20000 //C 00008    16 mvzl	r10,0
01f2000d //C 00009    17 jmp	real_start	 ;try_himem
//R 00009 #16 real_start 0000000d
0000000c //C 0000a    38 db	dummy
//R 0000a d8 dummy 0000000c
01f2000f //C 0000b    46 jmp	cyc
//R 0000b #16 cyc 0000000f
0000000c //C 0000c    47 db	dummy
//R 0000c d8 dummy 0000000c
01021234 //C 0000d    50 mvzl	r0,0x1234
//G real_start
0600fff0 //C 0000e    51 st	r0,BRD_CTRL.OUT
//R 0000e #16 BRD_CTRL.OUT 0000fff0
040000f1 //C 0000f    53 call	monitor_by_uart		; enter monitor by uart
//R 0000f #24 monitor_by_uart 000000f1
//G cyc
01020000 //C 00010    54 mvzl	r0,0			; number of checked button
040000f2 //C 00011    55 call	monitor_by_button
//R 00011 #24 monitor_by_button 000000f2
06a0ff00 //C 00012    56 st	r10,GPIO.PORTA
//R 00012 #16 GPIO.PORTA 0000ff00
06a0ff01 //C 00013    57 st	r10,GPIO.PORTB
//R 00013 #16 GPIO.PORTB 0000ff01
00100a00 //C 00014    58 mov	r1,r10
00200a00 //C 00015    59 mov	r2,r10
f40000ec //C 00016    60 ces	eprintf
//R 00016 #24 eprintf 000000ec
00000025 //C 00017    61 db	37
00000078 //C 00018    61 db	120
00000020 //C 00019    61 db	32
00000025 //C 0001a    61 db	37
00000064 //C 0001b    61 db	100
0000000a //C 0001c    61 db	10
00000000 //C 0001d    61 db
01a40001 //C 0001e    62 add	r10,1
01f2000f //C 0001f    63 jmp	cyc
//R 0001f #16 cyc 0000000f
00000000 //C 00020    70 ds	100
//+ 00000064
00000000 //C 00084    72 db	0
//G eof_stack
//F math.asm
//P S293d8fdbaa47 _lib_segment_div
0ded0000 //C 00085    15 push	lr
//G div
0d6d0000 //C 00086    16 push	r6
021b0000 //C 00087    18 sz	r1
21f2008c //C 00088    19 NZ jmp	div_dok
//R 00088 #16 div_dok 0000008c
00400000 //C 00089    20 mov	r4,r0		; div by zero
01520000 //C 0008a    21 mvzl	r5,0x0
01f2009d //C 0008b    22 jmp	div_ret
//R 0008b #16 div_ret 0000009d
01420000 //C 0008c    25 mvzl	r4,0		; Q= 0
//N div_dok S293d8fdbaa47
//N div_dummy S293d8fdbaa47
01520000 //C 0008d    26 mvzl	r5,0		; R= 0
01618000 //C 0008e    27 mvh	r6,0x80000000	; m= 1<<31
01600000 //C 0008f    28 mvl	r6,0x80000000
026b0000 //C 00090    30 sz	r6
//N div_cyc S293d8fdbaa47
11f2009d //C 00091    31 Z jmp	div_ret
//R 00091 #16 div_ret 0000009d
02580000 //C 00092    32 shl	r5		; r<<= 1
000c0600 //C 00093    33 test	r0,r6		; if (n&m)
215d0001 //C 00094    34 NZ or	r5,1		; r|= 1
00580100 //C 00095    35 cmp	r5,r1		; if (r>=d)
41f2009b //C 00096    36 LO jmp	div_cyc_next
//R 00096 #16 div_cyc_next 0000009b
00560100 //C 00097    37 sub	r5,r1		; r-= d
004d0600 //C 00098    38 or	r4,r6		; q|= m
01f2009b //C 00099    39 jmp	div_cyc_next
//R 00099 #16 div_cyc_next 0000009b
01f20090 //C 0009a    40 jmp	div_cyc
//R 0009a #16 div_cyc 00000090
02690000 //C 0009b    42 shr	r6		; m>>= 1
//N div_cyc_next S293d8fdbaa47
01f20090 //C 0009c    43 jmp	div_cyc
//R 0009c #16 div_cyc 00000090
0f6d0000 //C 0009d    45 pop	r6
//N div_ret S293d8fdbaa47
0ffd0000 //C 0009e    46 pop	pc
//P S8e7b3d203072 _lib_segment_rand
00000049 //C 0009f    58 db	2127401289
//N seed S8e7b3d203072
0600009f //C 000a0    65 st	r0,seed
//R 000a0 #16 seed 0000009f
//G srand
00f00e00 //C 000a1    66 ret
0ded0000 //C 000a2    72 push	lr
//G rand
0d0d0000 //C 000a3    73 push	r0
0d2d0000 //C 000a4    74 push	r2
0700009f //C 000a5    76 ld	r0,seed
//R 000a5 #16 seed 0000009f
00400000 //C 000a6    77 mov	r4,r0
0122000d //C 000a7    78 mvzl	r2,13
02480000 //C 000a8    79 c1:	shl	r4
//N c1 S8e7b3d203072
0124ffff //C 000a9    80 dec	r2
21f200a8 //C 000aa    81 jnz	c1
//R 000aa #16 c1 000000a8
000e0400 //C 000ab    82 xor	r0,r4
00400000 //C 000ac    83 mov	r4,r0
01220011 //C 000ad    84 mvzl	r2,17
02490000 //C 000ae    85 c2:	shr	r4
//N c2 S8e7b3d203072
0124ffff //C 000af    86 dec	r2
21f200ae //C 000b0    87 jnz	c2
//R 000b0 #16 c2 000000ae
000e0400 //C 000b1    88 xor	r0,r4
00400000 //C 000b2    89 mov	r4,r0
01220005 //C 000b3    90 mvzl	r2,5
02480000 //C 000b4    91 c3:	shl	r4
//N c3 S8e7b3d203072
0124ffff //C 000b5    92 dec	r2
21f200b4 //C 000b6    93 jnz	c3
//R 000b6 #16 c3 000000b4
000e0400 //C 000b7    94 xor	r0,r4
0600009f //C 000b8    95 st	r0,seed
//R 000b8 #16 seed 0000009f
00400000 //C 000b9    97 mov	r4,r0
0f2d0000 //C 000ba    99 pop	r2
0f0d0000 //C 000bb   100 pop	r0
0ffd0000 //C 000bc   101 pop	pc
//F str.asm
//P Sbe1a78b9d15e _lib_segment_str_chr
020b0000 //C 000bd    94 sz	r0		; check NULL pointer
//G str_chr
120d0000 //C 000be    95 Z clc
10f00e00 //C 000bf    96 Z ret
02100000 //C 000c0    97 zeb	r1		; prepare character
0ded0000 //C 000c1    98 push	lr
0d1d0000 //C 000c2    99 push	r1
0d2d0000 //C 000c3   100 push	r2
00400000 //C 000c4   101 mov	r4,r0
00000100 //C 000c5   102 mov	r0,r1
00100400 //C 000c6   103 mov	r1,r4
0400f006 //C 000c7   104 call	_pm_strchr
//R 000c7 #24 _pm_strchr 0000f006
00400100 //C 000c8   105 mov	r4,r1
00500200 //C 000c9   106 mov	r5,r2
0f2d0000 //C 000ca   107 pop	r2
0f1d0000 //C 000cb   108 pop	r1
0ffd0000 //C 000cc   109 pop	pc
//F char.asm
//P S602f0726a14b _lib_segment_character_fn
020c0000 //C 000cd    22 sec
//G _char_is_true
00f00e00 //C 000ce    23 ret
020d0000 //C 000cf    25 clc
//G _char_is_false
00f00e00 //C 000d0    26 ret
//P S847a5c4e618b _lib_segment_isdigit
01080030 //C 000d1    37 cmp	R0,'0'
//G isdigit
41f200cf //C 000d2    38 ULT jmp	_char_is_false
//R 000d2 #16 _char_is_false 000000cf
01080039 //C 000d3    39 cmp	R0,'9'
91f200cf //C 000d4    40 UGT jmp	_char_is_false
//R 000d4 #16 _char_is_false 000000cf
01f200cd //C 000d5    41 jmp _char_is_true
//R 000d5 #16 _char_is_true 000000cd
//P S9a7f1c151839 _lib_segment_islower
01080061 //C 000d6    53 cmp	r0,'a'
//G islower
41f200cf //C 000d7    54 ULT jmp	_char_is_false
//R 000d7 #16 _char_is_false 000000cf
0108007a //C 000d8    55 cmp	r0,'z'
91f200cf //C 000d9    56 UGT jmp	_char_is_false
//R 000d9 #16 _char_is_false 000000cf
01f200cd //C 000da    57 jmp	_char_is_true
//R 000da #16 _char_is_true 000000cd
//P S154e11ca77b1 _lib_segment_isupper
01080041 //C 000db    69 cmp	r0,'A'
//G isupper
41f200cf //C 000dc    70 ULT jmp	_char_is_false
//R 000dc #16 _char_is_false 000000cf
0108005a //C 000dd    71 cmp	r0,'Z'
91f200cf //C 000de    72 UGT jmp	_char_is_false
//R 000de #16 _char_is_false 000000cf
01f200cd //C 000df    73 jmp	_char_is_true
//R 000df #16 _char_is_true 000000cd
//P Sf1f3b6b1f10a _lib_segment_isalpha
0ded0000 //C 000e0    85 push	lr
//G isalpha
040000d6 //C 000e1    86 call	islower
//R 000e1 #24 islower 000000d6
3ffd0000 //C 000e2    87 C pop	pc
040000db //C 000e3    88 call	isupper
//R 000e3 #24 isupper 000000db
0ffd0000 //C 000e4    89 pop	pc
//P Sb95a2b17779b _lib_segment_isalnum
0ded0000 //C 000e5   101 push	lr
//G isalnum
040000e0 //C 000e6   102 call	isalpha
//R 000e6 #24 isalpha 000000e0
3ffd0000 //C 000e7   103 C pop	pc
040000d1 //C 000e8   104 call	isdigit
//R 000e8 #24 isdigit 000000d1
0ffd0000 //C 000e9   105 pop	pc
//F inout.asm
//P S503b4c87a8c4 _lib_segment_putchar
01f2f00e //C 000ea    24 jmp	_pm_putchar
//R 000ea #16 _pm_putchar 0000f00e
//G putchar
//P S23554af9f140 _lib_segment_eprints
01f2f012 //C 000eb    54 jmp	_pm_pes
//R 000eb #16 _pm_pes 0000f012
//G eprints
//P Sb401aee44acb _lib_segment_eprintf
01f2f015 //C 000ec    66 jmp	_pm_pesf
//R 000ec #16 _pm_pesf 0000f015
//G eprintf
//P Sedd6b6695436 _lib_segment_input_avail
01f2f008 //C 000ed    72 jmp	_pm_check_uart
//R 000ed #16 _pm_check_uart 0000f008
//G input_avail
//P S84a19e8ae015 _lib_segment_read
0740ff40 //C 000ee    89 ld	r4,UART.DR
//R 000ee #16 UART.DR 0000ff40
//G read
00f00e00 //C 000ef    90 ret
//F mon.asm
//P Sd14c348df59b _lib_segment_pmon
01f2f000 //C 000f0    40 jmp	_pm_callin
//R 000f0 #16 _pm_callin 0000f000
//G monitor
01f2f001 //C 000f1    44 jmp	_pm_enter_by_uart
//R 000f1 #16 _pm_enter_by_uart 0000f001
//G monitor_by_uart
0ded0000 //C 000f2    48 push	lr
//G monitor_by_button
04000157 //C 000f3    49 call	btn_posedge
//R 000f3 #24 btn_posedge 00000157
4ffd0000 //C 000f4    50 NC pop	pc
040000f0 //C 000f5    51 call	monitor
//R 000f5 #24 monitor 000000f0
0400014d //C 000f6    52 call	btn_restart
//R 000f6 #24 btn_restart 0000014d
0ffd0000 //C 000f7    53 pop	pc
0ded0000 //C 000f8    57 push	lr
//G monitor_version
0d0d0000 //C 000f9    58 push	r0
0400f003 //C 000fa    59 call	_pm_version
//R 000fa #24 _pm_version 0000f003
00400000 //C 000fb    60 mov	r4,r0
0f0d0000 //C 000fc    61 pop	r0
0ffd0000 //C 000fd    62 pop	pc
//F bsp.asm
//P S45ec84dfaab0 _lib_segment_nr_to_mask
0d1d0000 //C 000fe    26 push	r1
//G _nr_to_mask
010b001f //C 000ff    27 btst	r0,0x1f		; max nr is 31
01120001 //C 00100    28 mvzl	r1,1		; mask for nr==0
020b0000 //C 00101    30 sz	r0		; is nr zero?
//N nr_to_mask_cyc S45ec84dfaab0
11f20106 //C 00102    31 jz	nr_to_mask_ret	; if yes, go out
//R 00102 #16 nr_to_mask_ret 00000106
02180000 //C 00103    32 shl	r1		; shift mask up
0104ffff //C 00104    33 dec	r0		; decrement nr
01f20101 //C 00105    34 jmp	nr_to_mask_cyc	; check for zero
//R 00105 #16 nr_to_mask_cyc 00000101
00000100 //C 00106    36 mov	r0,r1		; return mask in R0
//N nr_to_mask_ret S45ec84dfaab0
0f1d0000 //C 00107    37 pop	r1
00f00e00 //C 00108    38 ret
//P S38738b71c88c _lib_segment_edge
00000000 //C 00109   120 ds	1
//+ 00000001
//N last_btn S38738b71c88c
00000000 //C 0010a   122 ds	1
//+ 00000001
//N last_sw S38738b71c88c
00000000 //C 0010b   124 ds	1
//+ 00000001
//N last_btn_down S38738b71c88c
00000000 //C 0010c   126 ds	1
//+ 00000001
//N last_sw_down S38738b71c88c
00000000 //C 0010d   128 db	0
//N last_btn_inited S38738b71c88c
00000000 //C 0010e   130 db	0
//N last_sw_inited S38738b71c88c
0ded0000 //C 0010f   141 push	lr
//G _lib_edge_detect
0d1d0000 //C 00110   142 push	r1
0d2d0000 //C 00111   143 push	r2
0d3d0000 //C 00112   144 push	r3
0d4d0000 //C 00113   145 push	r4
0d5d0000 //C 00114   146 push	r5
00500100 //C 00115   148 mov	r5,r1		; what edge to check
31f20120 //C 00116   149 C jmp	init_sw
//R 00116 #16 init_sw 00000120
0710010d //C 00117   151 ld	r1,last_btn_inited
//R 00117 #16 last_btn_inited 0000010d
//N init_btn S38738b71c88c
021b0000 //C 00118   152 sz	r1
21f20129 //C 00119   153 jnz	pressed_inited
//R 00119 #16 pressed_inited 00000129
01120001 //C 0011a   154 mvzl	r1,1
0610010d //C 0011b   155 st	r1,last_btn_inited
//R 0011b #16 last_btn_inited 0000010d
0710ff20 //C 0011c   156 ld	r1,GPIO.BTN
//R 0011c #16 GPIO.BTN 0000ff20
06100109 //C 0011d   157 st	r1,last_btn
//R 0011d #16 last_btn 00000109
0610010b //C 0011e   158 st	r1,last_btn_down
//R 0011e #16 last_btn_down 0000010b
01f20146 //C 0011f   159 jmp	pressed_false
//R 0011f #16 pressed_false 00000146
0710010e //C 00120   161 ld	r1,last_sw_inited
//R 00120 #16 last_sw_inited 0000010e
//N init_sw S38738b71c88c
021b0000 //C 00121   162 sz	r1
21f20129 //C 00122   163 jnz	pressed_inited
//R 00122 #16 pressed_inited 00000129
01120001 //C 00123   164 mvzl	r1,1
0610010e //C 00124   165 st	r1,last_sw_inited
//R 00124 #16 last_sw_inited 0000010e
0710ff10 //C 00125   166 ld	r1,GPIO.SW
//R 00125 #16 GPIO.SW 0000ff10
0610010a //C 00126   167 st	r1,last_sw
//R 00126 #16 last_sw 0000010a
0610010c //C 00127   168 st	r1,last_sw_down
//R 00127 #16 last_sw_down 0000010c
01f20146 //C 00128   169 jmp	pressed_false
//R 00128 #16 pressed_false 00000146
4122ff20 //C 00129   173 NC mvzl	r2,GPIO.BTN
//R 00129 #16 GPIO.BTN 0000ff20
//N pressed_inited S38738b71c88c
3122ff10 //C 0012a   174 C mvzl	r2,GPIO.SW
//R 0012a #16 GPIO.SW 0000ff10
31f2012f //C 0012b   175 jc	ch_sw
//R 0012b #16 ch_sw 0000012f
025b0000 //C 0012c   177 sz	r5
//N ch_btn S38738b71c88c
11120109 //C 0012d   178 Z mvzl	r1,last_btn
//R 0012d #16 last_btn 00000109
2112010b //C 0012e   179 NZ mvzl	r1,last_btn_down
//R 0012e #16 last_btn_down 0000010b
025b0000 //C 0012f   181 sz	r5
//N ch_sw S38738b71c88c
1112010a //C 00130   182 Z mvzl	r1,last_sw
//R 00130 #16 last_sw 0000010a
2112010c //C 00131   183 NZ mvzl	r1,last_sw_down
//R 00131 #16 last_sw_down 0000010c
0e310000 //C 00132   187 ld	r3,r1
0e420000 //C 00133   188 ld	r4,r2
003f0000 //C 00134   190 and	r3,r0		; masked last
004f0000 //C 00135   191 and	r4,r0		; masked port
00380400 //C 00136   192 cmp	r3,r4
11f20146 //C 00137   193 EQ jmp	pressed_false
//R 00137 #16 pressed_false 00000146
02040000 //C 00138   194 not	r0		; negated mask
0e310000 //C 00139   195 ld	r3,r1		; original last
003f0000 //C 0013a   196 and	r3,r0		; clear checked bit
003d0400 //C 0013b   197 or	r3,r4		; or with masked port
0c310000 //C 0013c   198 st	r3,r1		; store new last value
025b0000 //C 0013d   199 sz	r5
21f20142 //C 0013e   200 jnz	check_release
//R 0013e #16 check_release 00000142
024b0000 //C 0013f   202 sz	r4		; check new port value
//N check_push S38738b71c88c
11f20146 //C 00140   203 jz	pressed_false
//R 00140 #16 pressed_false 00000146
21f20144 //C 00141   204 jnz	pressed_true
//R 00141 #16 pressed_true 00000144
024b0000 //C 00142   206 sz	r4
//N check_release S38738b71c88c
21f20146 //C 00143   207 jnz	pressed_false
//R 00143 #16 pressed_false 00000146
020c0000 //C 00144   210 sec
//N pressed_true S38738b71c88c
01f20147 //C 00145   211 jmp	pressed_end
//R 00145 #16 pressed_end 00000147
020d0000 //C 00146   213 clc
//N pressed_false S38738b71c88c
0f5d0000 //C 00147   215 pop	r5
//N pressed_end S38738b71c88c
0f4d0000 //C 00148   216 pop	r4
0f3d0000 //C 00149   217 pop	r3
0f2d0000 //C 0014a   218 pop	r2
0f1d0000 //C 0014b   219 pop	r1
0ffd0000 //C 0014c   220 pop	pc
0d1d0000 //C 0014d   225 push	r1
//G btn_restart
0710ff20 //C 0014e   226 ld	r1,GPIO.BTN
//R 0014e #16 GPIO.BTN 0000ff20
06100109 //C 0014f   227 st	r1,last_btn
//R 0014f #16 last_btn 00000109
0f1d0000 //C 00150   228 pop	r1
00f00e00 //C 00151   229 ret
0d1d0000 //C 00152   233 push	r1
//G sw_restart
0710ff10 //C 00153   234 ld	r1,GPIO.SW
//R 00153 #16 GPIO.SW 0000ff10
0610010a //C 00154   235 st	r1,last_sw
//R 00154 #16 last_sw 0000010a
0f1d0000 //C 00155   236 pop	r1
00f00e00 //C 00156   237 ret
//P Saed5ad4c4c92 _lib_segment_btn
0ded0000 //C 00157   250 push	lr
//G btn_posedge
040000fe //C 00158   251 call	_nr_to_mask
//R 00158 #24 _nr_to_mask 000000fe
0d1d0000 //C 00159   252 push	r1
01120000 //C 0015a   253 mvzl	r1,0
020d0000 //C 0015b   254 clc
0400010f //C 0015c   255 call	_lib_edge_detect
//R 0015c #24 _lib_edge_detect 0000010f
0f1d0000 //C 0015d   256 pop	r1
0ffd0000 //C 0015e   257 pop	pc
0ded0000 //C 0015f   266 push	lr
//G btn_negedge
040000fe //C 00160   267 call	_nr_to_mask
//R 00160 #24 _nr_to_mask 000000fe
0d1d0000 //C 00161   268 push	r1
01120001 //C 00162   269 mvzl	r1,1
020d0000 //C 00163   270 clc
0400010f //C 00164   271 call	_lib_edge_detect
//R 00164 #24 _lib_edge_detect 0000010f
0f1d0000 //C 00165   272 pop	r1
0ffd0000 //C 00166   273 pop	pc
0ded0000 //C 00167   282 push	lr
//G btn_get
0d1d0000 //C 00168   283 push	r1
040000fe //C 00169   284 call	_nr_to_mask
//R 00169 #24 _nr_to_mask 000000fe
0710ff20 //C 0016a   285 ld	r1,GPIO.BTN
//R 0016a #16 GPIO.BTN 0000ff20
001f0000 //C 0016b   286 and	r1,r0
120d0000 //C 0016c   287 Z clc
220c0000 //C 0016d   288 NZ sec
0f1d0000 //C 0016e   289 pop	r1
0ffd0000 //C 0016f   290 pop	pc
//H 7ac1fae0
//E
