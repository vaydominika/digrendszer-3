//U P2

//; SEGMENTS
//T S293d8fdbaa47 _lib_segment_div noload=0 abs=0
//T S8e7b3d203072 _lib_segment_rand noload=0 abs=0
//T Sbe1a78b9d15e _lib_segment_str_chr noload=0 abs=0
//T S0e483de54bb5 _lib_segment_regs_of_gpio noload=0 abs=0
//T S33927ab86900 _lib_segment_regs_of_uart noload=0 abs=0
//T S602f0726a14b _lib_segment_character_fn noload=0 abs=0
//T S847a5c4e618b _lib_segment_isdigit noload=0 abs=0
//T S9a7f1c151839 _lib_segment_islower noload=0 abs=0
//T S154e11ca77b1 _lib_segment_isupper noload=0 abs=0
//T Sf1f3b6b1f10a _lib_segment_isalpha noload=0 abs=0
//T Sb95a2b17779b _lib_segment_isalnum noload=0 abs=0
//T S503b4c87a8c4 _lib_segment_putchar noload=0 abs=0
//T S23554af9f140 _lib_segment_eprints noload=0 abs=0
//T Sb401aee44acb _lib_segment_eprintf noload=0 abs=0
//T Sedd6b6695436 _lib_segment_input_avail noload=0 abs=0
//T S84a19e8ae015 _lib_segment_read noload=0 abs=0
//T Sd14c348df59b _lib_segment_pmon noload=0 abs=0
//T S45ec84dfaab0 _lib_segment_nr_to_mask noload=0 abs=0
//T S38738b71c88c _lib_segment_edge noload=0 abs=0
//T Saed5ad4c4c92 _lib_segment_btn noload=0 abs=0

//; SYMBOLS
//= N N 0505e9a0 - _
//= D D 000003e8 - _
//L div_begin div_begin 00000001 - _
//L div_end div_end 00000006 - _
//L div_stack div_stack 00000107 - _
//L div div 00000108 S293d8fdbaa47 _
//L S293d8fdbaa47div_dok div_dok 0000010f s S293d8fdbaa47
//L S293d8fdbaa47div_dummy div_dummy 0000010f s S293d8fdbaa47
//L S293d8fdbaa47div_cyc div_cyc 00000113 s S293d8fdbaa47
//L S293d8fdbaa47div_cyc_next div_cyc_next 0000011e s S293d8fdbaa47
//L S293d8fdbaa47div_ret div_ret 00000120 s S293d8fdbaa47
//L S8e7b3d203072seed seed 00000122 s S8e7b3d203072
//L srand srand 00000123 S8e7b3d203072 _
//L rand rand 00000125 S8e7b3d203072 _
//L S8e7b3d203072c1 c1 0000012b s S8e7b3d203072
//L S8e7b3d203072c2 c2 00000131 s S8e7b3d203072
//L S8e7b3d203072c3 c3 00000137 s S8e7b3d203072
//L str_chr str_chr 00000140 Sbe1a78b9d15e _
//= GPIO.PORTA GPIO.PORTA 0000ff00 S0e483de54bb5 _
//= GPIO.PORTB GPIO.PORTB 0000ff01 S0e483de54bb5 _
//= GPIO.PORTC GPIO.PORTC 0000ff02 S0e483de54bb5 _
//= GPIO.PORTD GPIO.PORTD 0000ff03 S0e483de54bb5 _
//= GPIOA.ODR GPIOA.ODR 0000ff00 S0e483de54bb5 _
//= GPIOB.ODR GPIOB.ODR 0000ff01 S0e483de54bb5 _
//= GPIOC.ODR GPIOC.ODR 0000ff02 S0e483de54bb5 _
//= GPIOD.ODR GPIOD.ODR 0000ff03 S0e483de54bb5 _
//= GPIO.7SEG GPIO.7SEG 0000ff00 S0e483de54bb5 _
//= GPIO.LED GPIO.LED 0000ff01 S0e483de54bb5 _
//= GPIO.PORTI GPIO.PORTI 0000ff20 S0e483de54bb5 _
//= GPIO.PORTJ GPIO.PORTJ 0000ff10 S0e483de54bb5 _
//= GPIOI.IDR GPIOI.IDR 0000ff20 S0e483de54bb5 _
//= GPIOJ.IDR GPIOJ.IDR 0000ff10 S0e483de54bb5 _
//= GPIO.BTN GPIO.BTN 0000ff20 S0e483de54bb5 _
//= GPIO.SW GPIO.SW 0000ff10 S0e483de54bb5 _
//= UART.DR UART.DR 0000ff40 S33927ab86900 _
//= UART.CTRL UART.CTRL 0000ff41 S33927ab86900 _
//= UART.RSTAT UART.RSTAT 0000ff42 S33927ab86900 _
//= UART.TSTAT UART.TSTAT 0000ff43 S33927ab86900 _
//= UART.CPB UART.CPB 0000ff44 S33927ab86900 _
//= UART.SREG0 UART.SREG0 0000ff4c S33927ab86900 _
//= UART.SREG1 UART.SREG1 0000ff4d S33927ab86900 _
//= UART.SREG2 UART.SREG2 0000ff4e S33927ab86900 _
//= UART.SREG3 UART.SREG3 0000ff4f S33927ab86900 _
//L _char_is_true _char_is_true 00000150 S602f0726a14b _
//L _char_is_false _char_is_false 00000152 S602f0726a14b _
//L isdigit isdigit 00000154 S847a5c4e618b _
//L islower islower 00000159 S9a7f1c151839 _
//L isupper isupper 0000015e S154e11ca77b1 _
//L isalpha isalpha 00000163 Sf1f3b6b1f10a _
//L isalnum isalnum 00000168 Sb95a2b17779b _
//L putchar putchar 0000016d S503b4c87a8c4 _
//L eprints eprints 0000016e S23554af9f140 _
//L eprintf eprintf 0000016f Sb401aee44acb _
//L input_avail input_avail 00000170 Sedd6b6695436 _
//L read read 00000171 S84a19e8ae015 _
//= _pm_callin _pm_callin 0000f000 Sd14c348df59b _
//= _pm_enter_by_uart _pm_enter_by_uart 0000f001 Sd14c348df59b _
//= _pm_getchar _pm_getchar 0000f002 Sd14c348df59b _
//= _pm_version _pm_version 0000f003 Sd14c348df59b _
//= _pm_itobcd _pm_itobcd 0000f004 Sd14c348df59b _
//= _pm_cold_start _pm_cold_start 0000f005 Sd14c348df59b _
//= _pm_strchr _pm_strchr 0000f006 Sd14c348df59b _
//= _pm_streq _pm_streq 0000f007 Sd14c348df59b _
//= _pm_check_uart _pm_check_uart 0000f008 Sd14c348df59b _
//= _pm_input_avail _pm_input_avail 0000f008 Sd14c348df59b _
//= _pm_hexchar2value _pm_hexchar2value 0000f009 Sd14c348df59b _
//= _pm_value2hexchar _pm_value2hexchar 0000f00a Sd14c348df59b _
//= _pm_htoi _pm_htoi 0000f00b Sd14c348df59b _
//= _pm_strieq _pm_strieq 0000f00c Sd14c348df59b _
//= _pm_read _pm_read 0000f00d Sd14c348df59b _
//= _pm_putchar _pm_putchar 0000f00e Sd14c348df59b _
//= _pm_prints _pm_prints 0000f00f Sd14c348df59b _
//= _pm_printsnl _pm_printsnl 0000f010 Sd14c348df59b _
//= _pm_print_vhex _pm_print_vhex 0000f011 Sd14c348df59b _
//= _pm_pes _pm_pes 0000f012 Sd14c348df59b _
//= _pm_printd _pm_printd 0000f013 Sd14c348df59b _
//= _pm_printf _pm_printf 0000f014 Sd14c348df59b _
//= _pm_pesf _pm_pesf 0000f015 Sd14c348df59b _
//= _pm_ascii2seg _pm_ascii2seg 0000f016 Sd14c348df59b _
//L monitor monitor 00000173 Sd14c348df59b _
//L monitor_by_uart monitor_by_uart 00000174 Sd14c348df59b _
//L monitor_by_button monitor_by_button 00000175 Sd14c348df59b _
//L monitor_version monitor_version 0000017b Sd14c348df59b _
//L _nr_to_mask _nr_to_mask 00000181 S45ec84dfaab0 _
//L S45ec84dfaab0nr_to_mask_cyc nr_to_mask_cyc 00000184 s S45ec84dfaab0
//L S45ec84dfaab0nr_to_mask_ret nr_to_mask_ret 00000189 s S45ec84dfaab0
//L S38738b71c88clast_btn last_btn 0000018c s S38738b71c88c
//L S38738b71c88clast_sw last_sw 0000018d s S38738b71c88c
//L S38738b71c88clast_btn_down last_btn_down 0000018e s S38738b71c88c
//L S38738b71c88clast_sw_down last_sw_down 0000018f s S38738b71c88c
//L S38738b71c88clast_btn_inited last_btn_inited 00000190 s S38738b71c88c
//L S38738b71c88clast_sw_inited last_sw_inited 00000191 s S38738b71c88c
//L _lib_edge_detect _lib_edge_detect 00000192 S38738b71c88c _
//L S38738b71c88cinit_btn init_btn 0000019a s S38738b71c88c
//L S38738b71c88cinit_sw init_sw 000001a3 s S38738b71c88c
//L S38738b71c88cpressed_inited pressed_inited 000001ac s S38738b71c88c
//L S38738b71c88cch_btn ch_btn 000001af s S38738b71c88c
//L S38738b71c88cch_sw ch_sw 000001b2 s S38738b71c88c
//L S38738b71c88ccheck_push check_push 000001c2 s S38738b71c88c
//L S38738b71c88ccheck_release check_release 000001c5 s S38738b71c88c
//L S38738b71c88cpressed_true pressed_true 000001c7 s S38738b71c88c
//L S38738b71c88cpressed_false pressed_false 000001c9 s S38738b71c88c
//L S38738b71c88cpressed_end pressed_end 000001ca s S38738b71c88c
//L btn_restart btn_restart 000001d0 S38738b71c88c _
//L sw_restart sw_restart 000001d5 S38738b71c88c _
//L btn_posedge btn_posedge 000001da Saed5ad4c4c92 _
//L btn_negedge btn_negedge 000001e2 Saed5ad4c4c92 _
//L btn_get btn_get 000001ea Saed5ad4c4c92 _

//; CODE
//P -
//F div.asm
01d20107 //C 00001     7 div_begin:	mvzl	sp,div_stack
//R 00001 #16 div_stack 00000107
//G div_begin
0100e9a0 //C 00002     8 mvl	r0,N
//R 00002 #16 N 0505e9a0
01010505 //C 00003     9 mvh	r0,N
//R 00003 h16 N 0505e9a0
011203e8 //C 00004    10 mvzl	r1,D
//R 00004 #16 D 000003e8
04000108 //C 00005    11 call	div
//R 00005 #24 div 00000108
01f20006 //C 00006    13 jmp	div_end
//R 00006 #16 div_end 00000006
//G div_end
00000000 //C 00007    15 ds	256
//+ 00000100
00000000 //C 00107    17 db	0
//G div_stack
//F math.asm
//P S293d8fdbaa47 _lib_segment_div
0ded0000 //C 00108    15 push	lr
//G div
0d6d0000 //C 00109    16 push	r6
021b0000 //C 0010a    18 sz	r1
21f2010f //C 0010b    19 NZ jmp	div_dok
//R 0010b #16 div_dok 0000010f
00400000 //C 0010c    20 mov	r4,r0		; div by zero
01520000 //C 0010d    21 mvzl	r5,0x0
01f20120 //C 0010e    22 jmp	div_ret
//R 0010e #16 div_ret 00000120
01420000 //C 0010f    25 mvzl	r4,0		; Q= 0
//N div_dok S293d8fdbaa47
//N div_dummy S293d8fdbaa47
01520000 //C 00110    26 mvzl	r5,0		; R= 0
01618000 //C 00111    27 mvh	r6,0x80000000	; m= 1<<31
01600000 //C 00112    28 mvl	r6,0x80000000
026b0000 //C 00113    30 sz	r6
//N div_cyc S293d8fdbaa47
11f20120 //C 00114    31 Z jmp	div_ret
//R 00114 #16 div_ret 00000120
02580000 //C 00115    32 shl	r5		; r<<= 1
000c0600 //C 00116    33 test	r0,r6		; if (n&m)
215d0001 //C 00117    34 NZ or	r5,1		; r|= 1
00580100 //C 00118    35 cmp	r5,r1		; if (r>=d)
41f2011e //C 00119    36 LO jmp	div_cyc_next
//R 00119 #16 div_cyc_next 0000011e
00560100 //C 0011a    37 sub	r5,r1		; r-= d
004d0600 //C 0011b    38 or	r4,r6		; q|= m
01f2011e //C 0011c    39 jmp	div_cyc_next
//R 0011c #16 div_cyc_next 0000011e
01f20113 //C 0011d    40 jmp	div_cyc
//R 0011d #16 div_cyc 00000113
02690000 //C 0011e    42 shr	r6		; m>>= 1
//N div_cyc_next S293d8fdbaa47
01f20113 //C 0011f    43 jmp	div_cyc
//R 0011f #16 div_cyc 00000113
0f6d0000 //C 00120    45 pop	r6
//N div_ret S293d8fdbaa47
0ffd0000 //C 00121    46 pop	pc
//P S8e7b3d203072 _lib_segment_rand
00000049 //C 00122    58 db	2127401289
//N seed S8e7b3d203072
06000122 //C 00123    65 st	r0,seed
//R 00123 #16 seed 00000122
//G srand
00f00e00 //C 00124    66 ret
0ded0000 //C 00125    72 push	lr
//G rand
0d0d0000 //C 00126    73 push	r0
0d2d0000 //C 00127    74 push	r2
07000122 //C 00128    76 ld	r0,seed
//R 00128 #16 seed 00000122
00400000 //C 00129    77 mov	r4,r0
0122000d //C 0012a    78 mvzl	r2,13
02480000 //C 0012b    79 c1:	shl	r4
//N c1 S8e7b3d203072
0124ffff //C 0012c    80 dec	r2
21f2012b //C 0012d    81 jnz	c1
//R 0012d #16 c1 0000012b
000e0400 //C 0012e    82 xor	r0,r4
00400000 //C 0012f    83 mov	r4,r0
01220011 //C 00130    84 mvzl	r2,17
02490000 //C 00131    85 c2:	shr	r4
//N c2 S8e7b3d203072
0124ffff //C 00132    86 dec	r2
21f20131 //C 00133    87 jnz	c2
//R 00133 #16 c2 00000131
000e0400 //C 00134    88 xor	r0,r4
00400000 //C 00135    89 mov	r4,r0
01220005 //C 00136    90 mvzl	r2,5
02480000 //C 00137    91 c3:	shl	r4
//N c3 S8e7b3d203072
0124ffff //C 00138    92 dec	r2
21f20137 //C 00139    93 jnz	c3
//R 00139 #16 c3 00000137
000e0400 //C 0013a    94 xor	r0,r4
06000122 //C 0013b    95 st	r0,seed
//R 0013b #16 seed 00000122
00400000 //C 0013c    97 mov	r4,r0
0f2d0000 //C 0013d    99 pop	r2
0f0d0000 //C 0013e   100 pop	r0
0ffd0000 //C 0013f   101 pop	pc
//F str.asm
//P Sbe1a78b9d15e _lib_segment_str_chr
020b0000 //C 00140    94 sz	r0		; check NULL pointer
//G str_chr
120d0000 //C 00141    95 Z clc
10f00e00 //C 00142    96 Z ret
02100000 //C 00143    97 zeb	r1		; prepare character
0ded0000 //C 00144    98 push	lr
0d1d0000 //C 00145    99 push	r1
0d2d0000 //C 00146   100 push	r2
00400000 //C 00147   101 mov	r4,r0
00000100 //C 00148   102 mov	r0,r1
00100400 //C 00149   103 mov	r1,r4
0400f006 //C 0014a   104 call	_pm_strchr
//R 0014a #24 _pm_strchr 0000f006
00400100 //C 0014b   105 mov	r4,r1
00500200 //C 0014c   106 mov	r5,r2
0f2d0000 //C 0014d   107 pop	r2
0f1d0000 //C 0014e   108 pop	r1
0ffd0000 //C 0014f   109 pop	pc
//F char.asm
//P S602f0726a14b _lib_segment_character_fn
020c0000 //C 00150    22 sec
//G _char_is_true
00f00e00 //C 00151    23 ret
020d0000 //C 00152    25 clc
//G _char_is_false
00f00e00 //C 00153    26 ret
//P S847a5c4e618b _lib_segment_isdigit
01080030 //C 00154    37 cmp	R0,'0'
//G isdigit
41f20152 //C 00155    38 ULT jmp	_char_is_false
//R 00155 #16 _char_is_false 00000152
01080039 //C 00156    39 cmp	R0,'9'
91f20152 //C 00157    40 UGT jmp	_char_is_false
//R 00157 #16 _char_is_false 00000152
01f20150 //C 00158    41 jmp _char_is_true
//R 00158 #16 _char_is_true 00000150
//P S9a7f1c151839 _lib_segment_islower
01080061 //C 00159    53 cmp	r0,'a'
//G islower
41f20152 //C 0015a    54 ULT jmp	_char_is_false
//R 0015a #16 _char_is_false 00000152
0108007a //C 0015b    55 cmp	r0,'z'
91f20152 //C 0015c    56 UGT jmp	_char_is_false
//R 0015c #16 _char_is_false 00000152
01f20150 //C 0015d    57 jmp	_char_is_true
//R 0015d #16 _char_is_true 00000150
//P S154e11ca77b1 _lib_segment_isupper
01080041 //C 0015e    69 cmp	r0,'A'
//G isupper
41f20152 //C 0015f    70 ULT jmp	_char_is_false
//R 0015f #16 _char_is_false 00000152
0108005a //C 00160    71 cmp	r0,'Z'
91f20152 //C 00161    72 UGT jmp	_char_is_false
//R 00161 #16 _char_is_false 00000152
01f20150 //C 00162    73 jmp	_char_is_true
//R 00162 #16 _char_is_true 00000150
//P Sf1f3b6b1f10a _lib_segment_isalpha
0ded0000 //C 00163    85 push	lr
//G isalpha
04000159 //C 00164    86 call	islower
//R 00164 #24 islower 00000159
3ffd0000 //C 00165    87 C pop	pc
0400015e //C 00166    88 call	isupper
//R 00166 #24 isupper 0000015e
0ffd0000 //C 00167    89 pop	pc
//P Sb95a2b17779b _lib_segment_isalnum
0ded0000 //C 00168   101 push	lr
//G isalnum
04000163 //C 00169   102 call	isalpha
//R 00169 #24 isalpha 00000163
3ffd0000 //C 0016a   103 C pop	pc
04000154 //C 0016b   104 call	isdigit
//R 0016b #24 isdigit 00000154
0ffd0000 //C 0016c   105 pop	pc
//F inout.asm
//P S503b4c87a8c4 _lib_segment_putchar
01f2f00e //C 0016d    24 jmp	_pm_putchar
//R 0016d #16 _pm_putchar 0000f00e
//G putchar
//P S23554af9f140 _lib_segment_eprints
01f2f012 //C 0016e    54 jmp	_pm_pes
//R 0016e #16 _pm_pes 0000f012
//G eprints
//P Sb401aee44acb _lib_segment_eprintf
01f2f015 //C 0016f    66 jmp	_pm_pesf
//R 0016f #16 _pm_pesf 0000f015
//G eprintf
//P Sedd6b6695436 _lib_segment_input_avail
01f2f008 //C 00170    72 jmp	_pm_check_uart
//R 00170 #16 _pm_check_uart 0000f008
//G input_avail
//P S84a19e8ae015 _lib_segment_read
0740ff40 //C 00171    89 ld	r4,UART.DR
//R 00171 #16 UART.DR 0000ff40
//G read
00f00e00 //C 00172    90 ret
//F mon.asm
//P Sd14c348df59b _lib_segment_pmon
01f2f000 //C 00173    40 jmp	_pm_callin
//R 00173 #16 _pm_callin 0000f000
//G monitor
01f2f001 //C 00174    44 jmp	_pm_enter_by_uart
//R 00174 #16 _pm_enter_by_uart 0000f001
//G monitor_by_uart
0ded0000 //C 00175    48 push	lr
//G monitor_by_button
040001da //C 00176    49 call	btn_posedge
//R 00176 #24 btn_posedge 000001da
4ffd0000 //C 00177    50 NC pop	pc
04000173 //C 00178    51 call	monitor
//R 00178 #24 monitor 00000173
040001d0 //C 00179    52 call	btn_restart
//R 00179 #24 btn_restart 000001d0
0ffd0000 //C 0017a    53 pop	pc
0ded0000 //C 0017b    57 push	lr
//G monitor_version
0d0d0000 //C 0017c    58 push	r0
0400f003 //C 0017d    59 call	_pm_version
//R 0017d #24 _pm_version 0000f003
00400000 //C 0017e    60 mov	r4,r0
0f0d0000 //C 0017f    61 pop	r0
0ffd0000 //C 00180    62 pop	pc
//F bsp.asm
//P S45ec84dfaab0 _lib_segment_nr_to_mask
0d1d0000 //C 00181    26 push	r1
//G _nr_to_mask
010b001f //C 00182    27 btst	r0,0x1f		; max nr is 31
01120001 //C 00183    28 mvzl	r1,1		; mask for nr==0
020b0000 //C 00184    30 sz	r0		; is nr zero?
//N nr_to_mask_cyc S45ec84dfaab0
11f20189 //C 00185    31 jz	nr_to_mask_ret	; if yes, go out
//R 00185 #16 nr_to_mask_ret 00000189
02180000 //C 00186    32 shl	r1		; shift mask up
0104ffff //C 00187    33 dec	r0		; decrement nr
01f20184 //C 00188    34 jmp	nr_to_mask_cyc	; check for zero
//R 00188 #16 nr_to_mask_cyc 00000184
00000100 //C 00189    36 mov	r0,r1		; return mask in R0
//N nr_to_mask_ret S45ec84dfaab0
0f1d0000 //C 0018a    37 pop	r1
00f00e00 //C 0018b    38 ret
//P S38738b71c88c _lib_segment_edge
00000000 //C 0018c   120 ds	1
//+ 00000001
//N last_btn S38738b71c88c
00000000 //C 0018d   122 ds	1
//+ 00000001
//N last_sw S38738b71c88c
00000000 //C 0018e   124 ds	1
//+ 00000001
//N last_btn_down S38738b71c88c
00000000 //C 0018f   126 ds	1
//+ 00000001
//N last_sw_down S38738b71c88c
00000000 //C 00190   128 db	0
//N last_btn_inited S38738b71c88c
00000000 //C 00191   130 db	0
//N last_sw_inited S38738b71c88c
0ded0000 //C 00192   141 push	lr
//G _lib_edge_detect
0d1d0000 //C 00193   142 push	r1
0d2d0000 //C 00194   143 push	r2
0d3d0000 //C 00195   144 push	r3
0d4d0000 //C 00196   145 push	r4
0d5d0000 //C 00197   146 push	r5
00500100 //C 00198   148 mov	r5,r1		; what edge to check
31f201a3 //C 00199   149 C jmp	init_sw
//R 00199 #16 init_sw 000001a3
07100190 //C 0019a   151 ld	r1,last_btn_inited
//R 0019a #16 last_btn_inited 00000190
//N init_btn S38738b71c88c
021b0000 //C 0019b   152 sz	r1
21f201ac //C 0019c   153 jnz	pressed_inited
//R 0019c #16 pressed_inited 000001ac
01120001 //C 0019d   154 mvzl	r1,1
06100190 //C 0019e   155 st	r1,last_btn_inited
//R 0019e #16 last_btn_inited 00000190
0710ff20 //C 0019f   156 ld	r1,GPIO.BTN
//R 0019f #16 GPIO.BTN 0000ff20
0610018c //C 001a0   157 st	r1,last_btn
//R 001a0 #16 last_btn 0000018c
0610018e //C 001a1   158 st	r1,last_btn_down
//R 001a1 #16 last_btn_down 0000018e
01f201c9 //C 001a2   159 jmp	pressed_false
//R 001a2 #16 pressed_false 000001c9
07100191 //C 001a3   161 ld	r1,last_sw_inited
//R 001a3 #16 last_sw_inited 00000191
//N init_sw S38738b71c88c
021b0000 //C 001a4   162 sz	r1
21f201ac //C 001a5   163 jnz	pressed_inited
//R 001a5 #16 pressed_inited 000001ac
01120001 //C 001a6   164 mvzl	r1,1
06100191 //C 001a7   165 st	r1,last_sw_inited
//R 001a7 #16 last_sw_inited 00000191
0710ff10 //C 001a8   166 ld	r1,GPIO.SW
//R 001a8 #16 GPIO.SW 0000ff10
0610018d //C 001a9   167 st	r1,last_sw
//R 001a9 #16 last_sw 0000018d
0610018f //C 001aa   168 st	r1,last_sw_down
//R 001aa #16 last_sw_down 0000018f
01f201c9 //C 001ab   169 jmp	pressed_false
//R 001ab #16 pressed_false 000001c9
4122ff20 //C 001ac   173 NC mvzl	r2,GPIO.BTN
//R 001ac #16 GPIO.BTN 0000ff20
//N pressed_inited S38738b71c88c
3122ff10 //C 001ad   174 C mvzl	r2,GPIO.SW
//R 001ad #16 GPIO.SW 0000ff10
31f201b2 //C 001ae   175 jc	ch_sw
//R 001ae #16 ch_sw 000001b2
025b0000 //C 001af   177 sz	r5
//N ch_btn S38738b71c88c
1112018c //C 001b0   178 Z mvzl	r1,last_btn
//R 001b0 #16 last_btn 0000018c
2112018e //C 001b1   179 NZ mvzl	r1,last_btn_down
//R 001b1 #16 last_btn_down 0000018e
025b0000 //C 001b2   181 sz	r5
//N ch_sw S38738b71c88c
1112018d //C 001b3   182 Z mvzl	r1,last_sw
//R 001b3 #16 last_sw 0000018d
2112018f //C 001b4   183 NZ mvzl	r1,last_sw_down
//R 001b4 #16 last_sw_down 0000018f
0e310000 //C 001b5   187 ld	r3,r1
0e420000 //C 001b6   188 ld	r4,r2
003f0000 //C 001b7   190 and	r3,r0		; masked last
004f0000 //C 001b8   191 and	r4,r0		; masked port
00380400 //C 001b9   192 cmp	r3,r4
11f201c9 //C 001ba   193 EQ jmp	pressed_false
//R 001ba #16 pressed_false 000001c9
02040000 //C 001bb   194 not	r0		; negated mask
0e310000 //C 001bc   195 ld	r3,r1		; original last
003f0000 //C 001bd   196 and	r3,r0		; clear checked bit
003d0400 //C 001be   197 or	r3,r4		; or with masked port
0c310000 //C 001bf   198 st	r3,r1		; store new last value
025b0000 //C 001c0   199 sz	r5
21f201c5 //C 001c1   200 jnz	check_release
//R 001c1 #16 check_release 000001c5
024b0000 //C 001c2   202 sz	r4		; check new port value
//N check_push S38738b71c88c
11f201c9 //C 001c3   203 jz	pressed_false
//R 001c3 #16 pressed_false 000001c9
21f201c7 //C 001c4   204 jnz	pressed_true
//R 001c4 #16 pressed_true 000001c7
024b0000 //C 001c5   206 sz	r4
//N check_release S38738b71c88c
21f201c9 //C 001c6   207 jnz	pressed_false
//R 001c6 #16 pressed_false 000001c9
020c0000 //C 001c7   210 sec
//N pressed_true S38738b71c88c
01f201ca //C 001c8   211 jmp	pressed_end
//R 001c8 #16 pressed_end 000001ca
020d0000 //C 001c9   213 clc
//N pressed_false S38738b71c88c
0f5d0000 //C 001ca   215 pop	r5
//N pressed_end S38738b71c88c
0f4d0000 //C 001cb   216 pop	r4
0f3d0000 //C 001cc   217 pop	r3
0f2d0000 //C 001cd   218 pop	r2
0f1d0000 //C 001ce   219 pop	r1
0ffd0000 //C 001cf   220 pop	pc
0d1d0000 //C 001d0   225 push	r1
//G btn_restart
0710ff20 //C 001d1   226 ld	r1,GPIO.BTN
//R 001d1 #16 GPIO.BTN 0000ff20
0610018c //C 001d2   227 st	r1,last_btn
//R 001d2 #16 last_btn 0000018c
0f1d0000 //C 001d3   228 pop	r1
00f00e00 //C 001d4   229 ret
0d1d0000 //C 001d5   233 push	r1
//G sw_restart
0710ff10 //C 001d6   234 ld	r1,GPIO.SW
//R 001d6 #16 GPIO.SW 0000ff10
0610018d //C 001d7   235 st	r1,last_sw
//R 001d7 #16 last_sw 0000018d
0f1d0000 //C 001d8   236 pop	r1
00f00e00 //C 001d9   237 ret
//P Saed5ad4c4c92 _lib_segment_btn
0ded0000 //C 001da   250 push	lr
//G btn_posedge
04000181 //C 001db   251 call	_nr_to_mask
//R 001db #24 _nr_to_mask 00000181
0d1d0000 //C 001dc   252 push	r1
01120000 //C 001dd   253 mvzl	r1,0
020d0000 //C 001de   254 clc
04000192 //C 001df   255 call	_lib_edge_detect
//R 001df #24 _lib_edge_detect 00000192
0f1d0000 //C 001e0   256 pop	r1
0ffd0000 //C 001e1   257 pop	pc
0ded0000 //C 001e2   266 push	lr
//G btn_negedge
04000181 //C 001e3   267 call	_nr_to_mask
//R 001e3 #24 _nr_to_mask 00000181
0d1d0000 //C 001e4   268 push	r1
01120001 //C 001e5   269 mvzl	r1,1
020d0000 //C 001e6   270 clc
04000192 //C 001e7   271 call	_lib_edge_detect
//R 001e7 #24 _lib_edge_detect 00000192
0f1d0000 //C 001e8   272 pop	r1
0ffd0000 //C 001e9   273 pop	pc
0ded0000 //C 001ea   282 push	lr
//G btn_get
0d1d0000 //C 001eb   283 push	r1
04000181 //C 001ec   284 call	_nr_to_mask
//R 001ec #24 _nr_to_mask 00000181
0710ff20 //C 001ed   285 ld	r1,GPIO.BTN
//R 001ed #16 GPIO.BTN 0000ff20
001f0000 //C 001ee   286 and	r1,r0
120d0000 //C 001ef   287 Z clc
220c0000 //C 001f0   288 NZ sec
0f1d0000 //C 001f1   289 pop	r1
0ffd0000 //C 001f2   290 pop	pc
//H 58fce6c0
//E
