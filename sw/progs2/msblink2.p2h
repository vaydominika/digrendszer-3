//U P2

//; SEGMENTS
//T S293d8fdbaa47 _lib_segment_div noload=0 abs=0
//T S8e7b3d203072 _lib_segment_rand noload=0 abs=0
//T Sbe1a78b9d15e _lib_segment_str_chr noload=0 abs=0
//T S0e483de54bb5 _lib_segment_regs_of_gpio noload=0 abs=0
//T S33927ab86900 _lib_segment_regs_of_uart noload=0 abs=0
//T S602f0726a14b _lib_segment_character_fn noload=0 abs=0
//T S847a5c4e618b _lib_segment_isdigit noload=0 abs=0
//T S9a7f1c151839 _lib_segment_islower noload=0 abs=0
//T S154e11ca77b1 _lib_segment_isupper noload=0 abs=0
//T Sf1f3b6b1f10a _lib_segment_isalpha noload=0 abs=0
//T Sb95a2b17779b _lib_segment_isalnum noload=0 abs=0
//T S503b4c87a8c4 _lib_segment_putchar noload=0 abs=0
//T S23554af9f140 _lib_segment_eprints noload=0 abs=0
//T Sb401aee44acb _lib_segment_eprintf noload=0 abs=0
//T Sedd6b6695436 _lib_segment_input_avail noload=0 abs=0
//T S84a19e8ae015 _lib_segment_read noload=0 abs=0
//T Sd14c348df59b _lib_segment_pmon noload=0 abs=0
//T S45ec84dfaab0 _lib_segment_nr_to_mask noload=0 abs=0
//T S38738b71c88c _lib_segment_edge noload=0 abs=0
//T Saed5ad4c4c92 _lib_segment_btn noload=0 abs=0

//; SYMBOLS
//= PRE PRE 0000ff51 - _
//= CLK CLK 0000ff50 - _
//= BCNT2 BCNT2 0000ff52 - _
//= PA PA 0000ff00 - _
//= PB PB 0000ff01 - _
//L cyc cyc 00000008 - _
//L elapsed0 elapsed0 00000015 - _
//L elapsed2 elapsed2 0000001a - _
//L last last 00000020 - _
//L period period 00000021 - _
//L period2 period2 00000022 - _
//L stack stack 00000087 - _
//L div div 00000088 S293d8fdbaa47 _
//L S293d8fdbaa47div_dok div_dok 0000008f s S293d8fdbaa47
//L S293d8fdbaa47div_dummy div_dummy 0000008f s S293d8fdbaa47
//L S293d8fdbaa47div_cyc div_cyc 00000093 s S293d8fdbaa47
//L S293d8fdbaa47div_cyc_next div_cyc_next 0000009e s S293d8fdbaa47
//L S293d8fdbaa47div_ret div_ret 000000a0 s S293d8fdbaa47
//L S8e7b3d203072seed seed 000000a2 s S8e7b3d203072
//L srand srand 000000a3 S8e7b3d203072 _
//L rand rand 000000a5 S8e7b3d203072 _
//L S8e7b3d203072c1 c1 000000ab s S8e7b3d203072
//L S8e7b3d203072c2 c2 000000b1 s S8e7b3d203072
//L S8e7b3d203072c3 c3 000000b7 s S8e7b3d203072
//L str_chr str_chr 000000c0 Sbe1a78b9d15e _
//= GPIO.PORTA GPIO.PORTA 0000ff00 S0e483de54bb5 _
//= GPIO.PORTB GPIO.PORTB 0000ff01 S0e483de54bb5 _
//= GPIO.PORTC GPIO.PORTC 0000ff02 S0e483de54bb5 _
//= GPIO.PORTD GPIO.PORTD 0000ff03 S0e483de54bb5 _
//= GPIOA.ODR GPIOA.ODR 0000ff00 S0e483de54bb5 _
//= GPIOB.ODR GPIOB.ODR 0000ff01 S0e483de54bb5 _
//= GPIOC.ODR GPIOC.ODR 0000ff02 S0e483de54bb5 _
//= GPIOD.ODR GPIOD.ODR 0000ff03 S0e483de54bb5 _
//= GPIO.7SEG GPIO.7SEG 0000ff00 S0e483de54bb5 _
//= GPIO.LED GPIO.LED 0000ff01 S0e483de54bb5 _
//= GPIO.PORTI GPIO.PORTI 0000ff20 S0e483de54bb5 _
//= GPIO.PORTJ GPIO.PORTJ 0000ff10 S0e483de54bb5 _
//= GPIOI.IDR GPIOI.IDR 0000ff20 S0e483de54bb5 _
//= GPIOJ.IDR GPIOJ.IDR 0000ff10 S0e483de54bb5 _
//= GPIO.BTN GPIO.BTN 0000ff20 S0e483de54bb5 _
//= GPIO.SW GPIO.SW 0000ff10 S0e483de54bb5 _
//= UART.DR UART.DR 0000ff40 S33927ab86900 _
//= UART.CTRL UART.CTRL 0000ff41 S33927ab86900 _
//= UART.RSTAT UART.RSTAT 0000ff42 S33927ab86900 _
//= UART.TSTAT UART.TSTAT 0000ff43 S33927ab86900 _
//= UART.CPB UART.CPB 0000ff44 S33927ab86900 _
//= UART.SREG0 UART.SREG0 0000ff4c S33927ab86900 _
//= UART.SREG1 UART.SREG1 0000ff4d S33927ab86900 _
//= UART.SREG2 UART.SREG2 0000ff4e S33927ab86900 _
//= UART.SREG3 UART.SREG3 0000ff4f S33927ab86900 _
//L _char_is_true _char_is_true 000000d0 S602f0726a14b _
//L _char_is_false _char_is_false 000000d2 S602f0726a14b _
//L isdigit isdigit 000000d4 S847a5c4e618b _
//L islower islower 000000d9 S9a7f1c151839 _
//L isupper isupper 000000de S154e11ca77b1 _
//L isalpha isalpha 000000e3 Sf1f3b6b1f10a _
//L isalnum isalnum 000000e8 Sb95a2b17779b _
//L putchar putchar 000000ed S503b4c87a8c4 _
//L eprints eprints 000000ee S23554af9f140 _
//L eprintf eprintf 000000ef Sb401aee44acb _
//L input_avail input_avail 000000f0 Sedd6b6695436 _
//L read read 000000f1 S84a19e8ae015 _
//= _pm_callin _pm_callin 0000f000 Sd14c348df59b _
//= _pm_enter_by_uart _pm_enter_by_uart 0000f001 Sd14c348df59b _
//= _pm_getchar _pm_getchar 0000f002 Sd14c348df59b _
//= _pm_version _pm_version 0000f003 Sd14c348df59b _
//= _pm_itobcd _pm_itobcd 0000f004 Sd14c348df59b _
//= _pm_cold_start _pm_cold_start 0000f005 Sd14c348df59b _
//= _pm_strchr _pm_strchr 0000f006 Sd14c348df59b _
//= _pm_streq _pm_streq 0000f007 Sd14c348df59b _
//= _pm_check_uart _pm_check_uart 0000f008 Sd14c348df59b _
//= _pm_input_avail _pm_input_avail 0000f008 Sd14c348df59b _
//= _pm_hexchar2value _pm_hexchar2value 0000f009 Sd14c348df59b _
//= _pm_value2hexchar _pm_value2hexchar 0000f00a Sd14c348df59b _
//= _pm_htoi _pm_htoi 0000f00b Sd14c348df59b _
//= _pm_strieq _pm_strieq 0000f00c Sd14c348df59b _
//= _pm_read _pm_read 0000f00d Sd14c348df59b _
//= _pm_putchar _pm_putchar 0000f00e Sd14c348df59b _
//= _pm_prints _pm_prints 0000f00f Sd14c348df59b _
//= _pm_printsnl _pm_printsnl 0000f010 Sd14c348df59b _
//= _pm_print_vhex _pm_print_vhex 0000f011 Sd14c348df59b _
//= _pm_pes _pm_pes 0000f012 Sd14c348df59b _
//= _pm_printd _pm_printd 0000f013 Sd14c348df59b _
//= _pm_printf _pm_printf 0000f014 Sd14c348df59b _
//= _pm_pesf _pm_pesf 0000f015 Sd14c348df59b _
//= _pm_ascii2seg _pm_ascii2seg 0000f016 Sd14c348df59b _
//L monitor monitor 000000f3 Sd14c348df59b _
//L monitor_by_uart monitor_by_uart 000000f4 Sd14c348df59b _
//L monitor_by_button monitor_by_button 000000f5 Sd14c348df59b _
//L monitor_version monitor_version 000000fb Sd14c348df59b _
//L _nr_to_mask _nr_to_mask 00000101 S45ec84dfaab0 _
//L S45ec84dfaab0nr_to_mask_cyc nr_to_mask_cyc 00000104 s S45ec84dfaab0
//L S45ec84dfaab0nr_to_mask_ret nr_to_mask_ret 00000109 s S45ec84dfaab0
//L S38738b71c88clast_btn last_btn 0000010c s S38738b71c88c
//L S38738b71c88clast_sw last_sw 0000010d s S38738b71c88c
//L S38738b71c88clast_btn_down last_btn_down 0000010e s S38738b71c88c
//L S38738b71c88clast_sw_down last_sw_down 0000010f s S38738b71c88c
//L S38738b71c88clast_btn_inited last_btn_inited 00000110 s S38738b71c88c
//L S38738b71c88clast_sw_inited last_sw_inited 00000111 s S38738b71c88c
//L _lib_edge_detect _lib_edge_detect 00000112 S38738b71c88c _
//L S38738b71c88cinit_btn init_btn 0000011a s S38738b71c88c
//L S38738b71c88cinit_sw init_sw 00000123 s S38738b71c88c
//L S38738b71c88cpressed_inited pressed_inited 0000012c s S38738b71c88c
//L S38738b71c88cch_btn ch_btn 0000012f s S38738b71c88c
//L S38738b71c88cch_sw ch_sw 00000132 s S38738b71c88c
//L S38738b71c88ccheck_push check_push 00000142 s S38738b71c88c
//L S38738b71c88ccheck_release check_release 00000145 s S38738b71c88c
//L S38738b71c88cpressed_true pressed_true 00000147 s S38738b71c88c
//L S38738b71c88cpressed_false pressed_false 00000149 s S38738b71c88c
//L S38738b71c88cpressed_end pressed_end 0000014a s S38738b71c88c
//L btn_restart btn_restart 00000150 S38738b71c88c _
//L sw_restart sw_restart 00000155 S38738b71c88c _
//L btn_posedge btn_posedge 0000015a Saed5ad4c4c92 _
//L btn_negedge btn_negedge 00000162 Saed5ad4c4c92 _
//L btn_get btn_get 0000016a Saed5ad4c4c92 _

//; CODE
//P -
//F msblink2.asm
01d20087 //C 00001    12 ldl0	sp,stack
//R 00001 #16 stack 00000087
010261a8 //C 00002    14 ldl0	r0,25000	; 25 MHz -> 1ms
0600ff51 //C 00003    15 st	r0,PRE		; start
//R 00003 #16 PRE 0000ff51
01020000 //C 00004    16 ldl0	r0,0		; turn OFF all LEDs
0600ff01 //C 00005    17 st	r0,PB
//R 00005 #16 PB 0000ff01
07000022 //C 00006    18 ld	r0,period2	; Setup back counter #2
//R 00006 #16 period2 00000022
0600ff52 //C 00007    19 st	r0,BCNT2
//R 00007 #16 BCNT2 0000ff52
0400f001 //C 00008    21 call	0xf001		; Check UART to return monitor
//G cyc
0700ff50 //C 00009    22 ld	r0,CLK		; r0=now
//R 00009 #16 CLK 0000ff50
0600ff00 //C 0000a    23 st	r0,PA		; display on seg7
//R 0000a #16 PA 0000ff00
07100020 //C 0000b    24 ld	r1,last		; r1=last
//R 0000b #16 last 00000020
00200000 //C 0000c    25 mov	r2,r0		; backup copy of now
00260100 //C 0000d    26 sub	r2,r1		; r2= now-last
07300021 //C 0000e    27 ld	r3,period	; compare to period
//R 0000e #16 period 00000021
00280300 //C 0000f    28 cmp	r2,r3		; now-last > period
91f20015 //C 00010    29 HI jmp	elapsed0
//R 00010 #16 elapsed0 00000015
0700ff52 //C 00011    31 ld	r0,BCNT2	; check back counter expiration
//R 00011 #16 BCNT2 0000ff52
020b0000 //C 00012    32 sz	r0
11f2001a //C 00013    33 jz	elapsed2
//R 00013 #16 elapsed2 0000001a
01f20008 //C 00014    35 jmp	cyc
//R 00014 #16 cyc 00000008
06000020 //C 00015    38 st	r0,last		; last= now
//R 00015 #16 last 00000020
//G elapsed0
0710ff01 //C 00016    39 ld	r1,PB		; blink LED0
//R 00016 #16 PB 0000ff01
011e0001 //C 00017    40 xor	r1,1
0610ff01 //C 00018    41 st	r1,PB
//R 00018 #16 PB 0000ff01
01f20008 //C 00019    42 jmp	cyc
//R 00019 #16 cyc 00000008
0710ff01 //C 0001a    45 ld	r1,PB		; blink LED1
//R 0001a #16 PB 0000ff01
//G elapsed2
011e0002 //C 0001b    46 xor	r1,2
0610ff01 //C 0001c    47 st	r1,PB
//R 0001c #16 PB 0000ff01
07100022 //C 0001d    48 ld	r1,period2
//R 0001d #16 period2 00000022
0610ff52 //C 0001e    49 st	r1,BCNT2
//R 0001e #16 BCNT2 0000ff52
01f20008 //C 0001f    50 jmp	cyc
//R 0001f #16 cyc 00000008
00000000 //C 00020    52 dd	0
//G last
000001f4 //C 00021    53 dd	500
//G period
000000c8 //C 00022    54 dd	200
//G period2
00000000 //C 00023    56 ds	100
//+ 00000064
00000000 //C 00087    58 db	0
//G stack
//F math.asm
//P S293d8fdbaa47 _lib_segment_div
0ded0000 //C 00088    15 push	lr
//G div
0d6d0000 //C 00089    16 push	r6
021b0000 //C 0008a    18 sz	r1
21f2008f //C 0008b    19 NZ jmp	div_dok
//R 0008b #16 div_dok 0000008f
00400000 //C 0008c    20 mov	r4,r0		; div by zero
01520000 //C 0008d    21 mvzl	r5,0x0
01f200a0 //C 0008e    22 jmp	div_ret
//R 0008e #16 div_ret 000000a0
01420000 //C 0008f    25 mvzl	r4,0		; Q= 0
//N div_dok S293d8fdbaa47
//N div_dummy S293d8fdbaa47
01520000 //C 00090    26 mvzl	r5,0		; R= 0
01618000 //C 00091    27 mvh	r6,0x80000000	; m= 1<<31
01600000 //C 00092    28 mvl	r6,0x80000000
026b0000 //C 00093    30 sz	r6
//N div_cyc S293d8fdbaa47
11f200a0 //C 00094    31 Z jmp	div_ret
//R 00094 #16 div_ret 000000a0
02580000 //C 00095    32 shl	r5		; r<<= 1
000c0600 //C 00096    33 test	r0,r6		; if (n&m)
215d0001 //C 00097    34 NZ or	r5,1		; r|= 1
00580100 //C 00098    35 cmp	r5,r1		; if (r>=d)
41f2009e //C 00099    36 LO jmp	div_cyc_next
//R 00099 #16 div_cyc_next 0000009e
00560100 //C 0009a    37 sub	r5,r1		; r-= d
004d0600 //C 0009b    38 or	r4,r6		; q|= m
01f2009e //C 0009c    39 jmp	div_cyc_next
//R 0009c #16 div_cyc_next 0000009e
01f20093 //C 0009d    40 jmp	div_cyc
//R 0009d #16 div_cyc 00000093
02690000 //C 0009e    42 shr	r6		; m>>= 1
//N div_cyc_next S293d8fdbaa47
01f20093 //C 0009f    43 jmp	div_cyc
//R 0009f #16 div_cyc 00000093
0f6d0000 //C 000a0    45 pop	r6
//N div_ret S293d8fdbaa47
0ffd0000 //C 000a1    46 pop	pc
//P S8e7b3d203072 _lib_segment_rand
00000049 //C 000a2    58 db	2127401289
//N seed S8e7b3d203072
060000a2 //C 000a3    65 st	r0,seed
//R 000a3 #16 seed 000000a2
//G srand
00f00e00 //C 000a4    66 ret
0ded0000 //C 000a5    72 push	lr
//G rand
0d0d0000 //C 000a6    73 push	r0
0d2d0000 //C 000a7    74 push	r2
070000a2 //C 000a8    76 ld	r0,seed
//R 000a8 #16 seed 000000a2
00400000 //C 000a9    77 mov	r4,r0
0122000d //C 000aa    78 mvzl	r2,13
02480000 //C 000ab    79 c1:	shl	r4
//N c1 S8e7b3d203072
0124ffff //C 000ac    80 dec	r2
21f200ab //C 000ad    81 jnz	c1
//R 000ad #16 c1 000000ab
000e0400 //C 000ae    82 xor	r0,r4
00400000 //C 000af    83 mov	r4,r0
01220011 //C 000b0    84 mvzl	r2,17
02490000 //C 000b1    85 c2:	shr	r4
//N c2 S8e7b3d203072
0124ffff //C 000b2    86 dec	r2
21f200b1 //C 000b3    87 jnz	c2
//R 000b3 #16 c2 000000b1
000e0400 //C 000b4    88 xor	r0,r4
00400000 //C 000b5    89 mov	r4,r0
01220005 //C 000b6    90 mvzl	r2,5
02480000 //C 000b7    91 c3:	shl	r4
//N c3 S8e7b3d203072
0124ffff //C 000b8    92 dec	r2
21f200b7 //C 000b9    93 jnz	c3
//R 000b9 #16 c3 000000b7
000e0400 //C 000ba    94 xor	r0,r4
060000a2 //C 000bb    95 st	r0,seed
//R 000bb #16 seed 000000a2
00400000 //C 000bc    97 mov	r4,r0
0f2d0000 //C 000bd    99 pop	r2
0f0d0000 //C 000be   100 pop	r0
0ffd0000 //C 000bf   101 pop	pc
//F str.asm
//P Sbe1a78b9d15e _lib_segment_str_chr
020b0000 //C 000c0    94 sz	r0		; check NULL pointer
//G str_chr
120d0000 //C 000c1    95 Z clc
10f00e00 //C 000c2    96 Z ret
02100000 //C 000c3    97 zeb	r1		; prepare character
0ded0000 //C 000c4    98 push	lr
0d1d0000 //C 000c5    99 push	r1
0d2d0000 //C 000c6   100 push	r2
00400000 //C 000c7   101 mov	r4,r0
00000100 //C 000c8   102 mov	r0,r1
00100400 //C 000c9   103 mov	r1,r4
0400f006 //C 000ca   104 call	_pm_strchr
//R 000ca #24 _pm_strchr 0000f006
00400100 //C 000cb   105 mov	r4,r1
00500200 //C 000cc   106 mov	r5,r2
0f2d0000 //C 000cd   107 pop	r2
0f1d0000 //C 000ce   108 pop	r1
0ffd0000 //C 000cf   109 pop	pc
//F char.asm
//P S602f0726a14b _lib_segment_character_fn
020c0000 //C 000d0    22 sec
//G _char_is_true
00f00e00 //C 000d1    23 ret
020d0000 //C 000d2    25 clc
//G _char_is_false
00f00e00 //C 000d3    26 ret
//P S847a5c4e618b _lib_segment_isdigit
01080030 //C 000d4    37 cmp	R0,'0'
//G isdigit
41f200d2 //C 000d5    38 ULT jmp	_char_is_false
//R 000d5 #16 _char_is_false 000000d2
01080039 //C 000d6    39 cmp	R0,'9'
91f200d2 //C 000d7    40 UGT jmp	_char_is_false
//R 000d7 #16 _char_is_false 000000d2
01f200d0 //C 000d8    41 jmp _char_is_true
//R 000d8 #16 _char_is_true 000000d0
//P S9a7f1c151839 _lib_segment_islower
01080061 //C 000d9    53 cmp	r0,'a'
//G islower
41f200d2 //C 000da    54 ULT jmp	_char_is_false
//R 000da #16 _char_is_false 000000d2
0108007a //C 000db    55 cmp	r0,'z'
91f200d2 //C 000dc    56 UGT jmp	_char_is_false
//R 000dc #16 _char_is_false 000000d2
01f200d0 //C 000dd    57 jmp	_char_is_true
//R 000dd #16 _char_is_true 000000d0
//P S154e11ca77b1 _lib_segment_isupper
01080041 //C 000de    69 cmp	r0,'A'
//G isupper
41f200d2 //C 000df    70 ULT jmp	_char_is_false
//R 000df #16 _char_is_false 000000d2
0108005a //C 000e0    71 cmp	r0,'Z'
91f200d2 //C 000e1    72 UGT jmp	_char_is_false
//R 000e1 #16 _char_is_false 000000d2
01f200d0 //C 000e2    73 jmp	_char_is_true
//R 000e2 #16 _char_is_true 000000d0
//P Sf1f3b6b1f10a _lib_segment_isalpha
0ded0000 //C 000e3    85 push	lr
//G isalpha
040000d9 //C 000e4    86 call	islower
//R 000e4 #24 islower 000000d9
3ffd0000 //C 000e5    87 C pop	pc
040000de //C 000e6    88 call	isupper
//R 000e6 #24 isupper 000000de
0ffd0000 //C 000e7    89 pop	pc
//P Sb95a2b17779b _lib_segment_isalnum
0ded0000 //C 000e8   101 push	lr
//G isalnum
040000e3 //C 000e9   102 call	isalpha
//R 000e9 #24 isalpha 000000e3
3ffd0000 //C 000ea   103 C pop	pc
040000d4 //C 000eb   104 call	isdigit
//R 000eb #24 isdigit 000000d4
0ffd0000 //C 000ec   105 pop	pc
//F inout.asm
//P S503b4c87a8c4 _lib_segment_putchar
01f2f00e //C 000ed    24 jmp	_pm_putchar
//R 000ed #16 _pm_putchar 0000f00e
//G putchar
//P S23554af9f140 _lib_segment_eprints
01f2f012 //C 000ee    54 jmp	_pm_pes
//R 000ee #16 _pm_pes 0000f012
//G eprints
//P Sb401aee44acb _lib_segment_eprintf
01f2f015 //C 000ef    66 jmp	_pm_pesf
//R 000ef #16 _pm_pesf 0000f015
//G eprintf
//P Sedd6b6695436 _lib_segment_input_avail
01f2f008 //C 000f0    72 jmp	_pm_check_uart
//R 000f0 #16 _pm_check_uart 0000f008
//G input_avail
//P S84a19e8ae015 _lib_segment_read
0740ff40 //C 000f1    89 ld	r4,UART.DR
//R 000f1 #16 UART.DR 0000ff40
//G read
00f00e00 //C 000f2    90 ret
//F mon.asm
//P Sd14c348df59b _lib_segment_pmon
01f2f000 //C 000f3    40 jmp	_pm_callin
//R 000f3 #16 _pm_callin 0000f000
//G monitor
01f2f001 //C 000f4    44 jmp	_pm_enter_by_uart
//R 000f4 #16 _pm_enter_by_uart 0000f001
//G monitor_by_uart
0ded0000 //C 000f5    48 push	lr
//G monitor_by_button
0400015a //C 000f6    49 call	btn_posedge
//R 000f6 #24 btn_posedge 0000015a
4ffd0000 //C 000f7    50 NC pop	pc
040000f3 //C 000f8    51 call	monitor
//R 000f8 #24 monitor 000000f3
04000150 //C 000f9    52 call	btn_restart
//R 000f9 #24 btn_restart 00000150
0ffd0000 //C 000fa    53 pop	pc
0ded0000 //C 000fb    57 push	lr
//G monitor_version
0d0d0000 //C 000fc    58 push	r0
0400f003 //C 000fd    59 call	_pm_version
//R 000fd #24 _pm_version 0000f003
00400000 //C 000fe    60 mov	r4,r0
0f0d0000 //C 000ff    61 pop	r0
0ffd0000 //C 00100    62 pop	pc
//F bsp.asm
//P S45ec84dfaab0 _lib_segment_nr_to_mask
0d1d0000 //C 00101    26 push	r1
//G _nr_to_mask
010b001f //C 00102    27 btst	r0,0x1f		; max nr is 31
01120001 //C 00103    28 mvzl	r1,1		; mask for nr==0
020b0000 //C 00104    30 sz	r0		; is nr zero?
//N nr_to_mask_cyc S45ec84dfaab0
11f20109 //C 00105    31 jz	nr_to_mask_ret	; if yes, go out
//R 00105 #16 nr_to_mask_ret 00000109
02180000 //C 00106    32 shl	r1		; shift mask up
0104ffff //C 00107    33 dec	r0		; decrement nr
01f20104 //C 00108    34 jmp	nr_to_mask_cyc	; check for zero
//R 00108 #16 nr_to_mask_cyc 00000104
00000100 //C 00109    36 mov	r0,r1		; return mask in R0
//N nr_to_mask_ret S45ec84dfaab0
0f1d0000 //C 0010a    37 pop	r1
00f00e00 //C 0010b    38 ret
//P S38738b71c88c _lib_segment_edge
00000000 //C 0010c   120 ds	1
//+ 00000001
//N last_btn S38738b71c88c
00000000 //C 0010d   122 ds	1
//+ 00000001
//N last_sw S38738b71c88c
00000000 //C 0010e   124 ds	1
//+ 00000001
//N last_btn_down S38738b71c88c
00000000 //C 0010f   126 ds	1
//+ 00000001
//N last_sw_down S38738b71c88c
00000000 //C 00110   128 db	0
//N last_btn_inited S38738b71c88c
00000000 //C 00111   130 db	0
//N last_sw_inited S38738b71c88c
0ded0000 //C 00112   141 push	lr
//G _lib_edge_detect
0d1d0000 //C 00113   142 push	r1
0d2d0000 //C 00114   143 push	r2
0d3d0000 //C 00115   144 push	r3
0d4d0000 //C 00116   145 push	r4
0d5d0000 //C 00117   146 push	r5
00500100 //C 00118   148 mov	r5,r1		; what edge to check
31f20123 //C 00119   149 C jmp	init_sw
//R 00119 #16 init_sw 00000123
07100110 //C 0011a   151 ld	r1,last_btn_inited
//R 0011a #16 last_btn_inited 00000110
//N init_btn S38738b71c88c
021b0000 //C 0011b   152 sz	r1
21f2012c //C 0011c   153 jnz	pressed_inited
//R 0011c #16 pressed_inited 0000012c
01120001 //C 0011d   154 mvzl	r1,1
06100110 //C 0011e   155 st	r1,last_btn_inited
//R 0011e #16 last_btn_inited 00000110
0710ff20 //C 0011f   156 ld	r1,GPIO.BTN
//R 0011f #16 GPIO.BTN 0000ff20
0610010c //C 00120   157 st	r1,last_btn
//R 00120 #16 last_btn 0000010c
0610010e //C 00121   158 st	r1,last_btn_down
//R 00121 #16 last_btn_down 0000010e
01f20149 //C 00122   159 jmp	pressed_false
//R 00122 #16 pressed_false 00000149
07100111 //C 00123   161 ld	r1,last_sw_inited
//R 00123 #16 last_sw_inited 00000111
//N init_sw S38738b71c88c
021b0000 //C 00124   162 sz	r1
21f2012c //C 00125   163 jnz	pressed_inited
//R 00125 #16 pressed_inited 0000012c
01120001 //C 00126   164 mvzl	r1,1
06100111 //C 00127   165 st	r1,last_sw_inited
//R 00127 #16 last_sw_inited 00000111
0710ff10 //C 00128   166 ld	r1,GPIO.SW
//R 00128 #16 GPIO.SW 0000ff10
0610010d //C 00129   167 st	r1,last_sw
//R 00129 #16 last_sw 0000010d
0610010f //C 0012a   168 st	r1,last_sw_down
//R 0012a #16 last_sw_down 0000010f
01f20149 //C 0012b   169 jmp	pressed_false
//R 0012b #16 pressed_false 00000149
4122ff20 //C 0012c   173 NC mvzl	r2,GPIO.BTN
//R 0012c #16 GPIO.BTN 0000ff20
//N pressed_inited S38738b71c88c
3122ff10 //C 0012d   174 C mvzl	r2,GPIO.SW
//R 0012d #16 GPIO.SW 0000ff10
31f20132 //C 0012e   175 jc	ch_sw
//R 0012e #16 ch_sw 00000132
025b0000 //C 0012f   177 sz	r5
//N ch_btn S38738b71c88c
1112010c //C 00130   178 Z mvzl	r1,last_btn
//R 00130 #16 last_btn 0000010c
2112010e //C 00131   179 NZ mvzl	r1,last_btn_down
//R 00131 #16 last_btn_down 0000010e
025b0000 //C 00132   181 sz	r5
//N ch_sw S38738b71c88c
1112010d //C 00133   182 Z mvzl	r1,last_sw
//R 00133 #16 last_sw 0000010d
2112010f //C 00134   183 NZ mvzl	r1,last_sw_down
//R 00134 #16 last_sw_down 0000010f
0e310000 //C 00135   187 ld	r3,r1
0e420000 //C 00136   188 ld	r4,r2
003f0000 //C 00137   190 and	r3,r0		; masked last
004f0000 //C 00138   191 and	r4,r0		; masked port
00380400 //C 00139   192 cmp	r3,r4
11f20149 //C 0013a   193 EQ jmp	pressed_false
//R 0013a #16 pressed_false 00000149
02040000 //C 0013b   194 not	r0		; negated mask
0e310000 //C 0013c   195 ld	r3,r1		; original last
003f0000 //C 0013d   196 and	r3,r0		; clear checked bit
003d0400 //C 0013e   197 or	r3,r4		; or with masked port
0c310000 //C 0013f   198 st	r3,r1		; store new last value
025b0000 //C 00140   199 sz	r5
21f20145 //C 00141   200 jnz	check_release
//R 00141 #16 check_release 00000145
024b0000 //C 00142   202 sz	r4		; check new port value
//N check_push S38738b71c88c
11f20149 //C 00143   203 jz	pressed_false
//R 00143 #16 pressed_false 00000149
21f20147 //C 00144   204 jnz	pressed_true
//R 00144 #16 pressed_true 00000147
024b0000 //C 00145   206 sz	r4
//N check_release S38738b71c88c
21f20149 //C 00146   207 jnz	pressed_false
//R 00146 #16 pressed_false 00000149
020c0000 //C 00147   210 sec
//N pressed_true S38738b71c88c
01f2014a //C 00148   211 jmp	pressed_end
//R 00148 #16 pressed_end 0000014a
020d0000 //C 00149   213 clc
//N pressed_false S38738b71c88c
0f5d0000 //C 0014a   215 pop	r5
//N pressed_end S38738b71c88c
0f4d0000 //C 0014b   216 pop	r4
0f3d0000 //C 0014c   217 pop	r3
0f2d0000 //C 0014d   218 pop	r2
0f1d0000 //C 0014e   219 pop	r1
0ffd0000 //C 0014f   220 pop	pc
0d1d0000 //C 00150   225 push	r1
//G btn_restart
0710ff20 //C 00151   226 ld	r1,GPIO.BTN
//R 00151 #16 GPIO.BTN 0000ff20
0610010c //C 00152   227 st	r1,last_btn
//R 00152 #16 last_btn 0000010c
0f1d0000 //C 00153   228 pop	r1
00f00e00 //C 00154   229 ret
0d1d0000 //C 00155   233 push	r1
//G sw_restart
0710ff10 //C 00156   234 ld	r1,GPIO.SW
//R 00156 #16 GPIO.SW 0000ff10
0610010d //C 00157   235 st	r1,last_sw
//R 00157 #16 last_sw 0000010d
0f1d0000 //C 00158   236 pop	r1
00f00e00 //C 00159   237 ret
//P Saed5ad4c4c92 _lib_segment_btn
0ded0000 //C 0015a   250 push	lr
//G btn_posedge
04000101 //C 0015b   251 call	_nr_to_mask
//R 0015b #24 _nr_to_mask 00000101
0d1d0000 //C 0015c   252 push	r1
01120000 //C 0015d   253 mvzl	r1,0
020d0000 //C 0015e   254 clc
04000112 //C 0015f   255 call	_lib_edge_detect
//R 0015f #24 _lib_edge_detect 00000112
0f1d0000 //C 00160   256 pop	r1
0ffd0000 //C 00161   257 pop	pc
0ded0000 //C 00162   266 push	lr
//G btn_negedge
04000101 //C 00163   267 call	_nr_to_mask
//R 00163 #24 _nr_to_mask 00000101
0d1d0000 //C 00164   268 push	r1
01120001 //C 00165   269 mvzl	r1,1
020d0000 //C 00166   270 clc
04000112 //C 00167   271 call	_lib_edge_detect
//R 00167 #24 _lib_edge_detect 00000112
0f1d0000 //C 00168   272 pop	r1
0ffd0000 //C 00169   273 pop	pc
0ded0000 //C 0016a   282 push	lr
//G btn_get
0d1d0000 //C 0016b   283 push	r1
04000101 //C 0016c   284 call	_nr_to_mask
//R 0016c #24 _nr_to_mask 00000101
0710ff20 //C 0016d   285 ld	r1,GPIO.BTN
//R 0016d #16 GPIO.BTN 0000ff20
001f0000 //C 0016e   286 and	r1,r0
120d0000 //C 0016f   287 Z clc
220c0000 //C 00170   288 NZ sec
0f1d0000 //C 00171   289 pop	r1
0ffd0000 //C 00172   290 pop	pc
//H 6d162395
//E
