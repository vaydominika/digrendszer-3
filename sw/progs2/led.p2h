//U P2

//; SEGMENTS
//T S293d8fdbaa47 _lib_segment_div noload=0 abs=0
//T S8e7b3d203072 _lib_segment_rand noload=0 abs=0
//T Sbe1a78b9d15e _lib_segment_str_chr noload=0 abs=0
//T S035d1872e63c _lib_segment_regs_of_clock noload=0 abs=0
//T S0e483de54bb5 _lib_segment_regs_of_gpio noload=0 abs=0
//T S33927ab86900 _lib_segment_regs_of_uart noload=0 abs=0
//T S602f0726a14b _lib_segment_character_fn noload=0 abs=0
//T S847a5c4e618b _lib_segment_isdigit noload=0 abs=0
//T S9a7f1c151839 _lib_segment_islower noload=0 abs=0
//T S154e11ca77b1 _lib_segment_isupper noload=0 abs=0
//T Sf1f3b6b1f10a _lib_segment_isalpha noload=0 abs=0
//T Sb95a2b17779b _lib_segment_isalnum noload=0 abs=0
//T S503b4c87a8c4 _lib_segment_putchar noload=0 abs=0
//T S23554af9f140 _lib_segment_eprints noload=0 abs=0
//T Sb401aee44acb _lib_segment_eprintf noload=0 abs=0
//T Sedd6b6695436 _lib_segment_input_avail noload=0 abs=0
//T S84a19e8ae015 _lib_segment_read noload=0 abs=0
//T Sd14c348df59b _lib_segment_pmon noload=0 abs=0
//T S45ec84dfaab0 _lib_segment_nr_to_mask noload=0 abs=0
//T S325af6d6229a _lib_segment_led noload=0 abs=0
//T S38738b71c88c _lib_segment_edge noload=0 abs=0
//T Saed5ad4c4c92 _lib_segment_btn noload=0 abs=0

//; SYMBOLS
//L main main 00000004 - _
//L cyc1 cyc1 0000000a - _
//L ton ton 00000014 - _
//L out1 out1 00000016 - _
//L cyc2 cyc2 00000019 - _
//L toff toff 00000023 - _
//L out2 out2 00000025 - _
//L end end 00000025 - _
//L nr nr 00000026 - _
//L stack stack 0000008b - _
//L div div 0000008c S293d8fdbaa47 _
//L S293d8fdbaa47div_dok div_dok 00000093 s S293d8fdbaa47
//L S293d8fdbaa47div_dummy div_dummy 00000093 s S293d8fdbaa47
//L S293d8fdbaa47div_cyc div_cyc 00000097 s S293d8fdbaa47
//L S293d8fdbaa47div_cyc_next div_cyc_next 000000a2 s S293d8fdbaa47
//L S293d8fdbaa47div_ret div_ret 000000a4 s S293d8fdbaa47
//L S8e7b3d203072seed seed 000000a6 s S8e7b3d203072
//L srand srand 000000a7 S8e7b3d203072 _
//L rand rand 000000a9 S8e7b3d203072 _
//L S8e7b3d203072c1 c1 000000af s S8e7b3d203072
//L S8e7b3d203072c2 c2 000000b5 s S8e7b3d203072
//L S8e7b3d203072c3 c3 000000bb s S8e7b3d203072
//L str_chr str_chr 000000c4 Sbe1a78b9d15e _
//= CLOCK.CLOCK CLOCK.CLOCK 0000ff50 S035d1872e63c _
//= CLOCK.CLK CLOCK.CLK 0000ff50 S035d1872e63c _
//= CLOCK.PRE CLOCK.PRE 0000ff51 S035d1872e63c _
//= CLOCK.BCNT2 CLOCK.BCNT2 0000ff52 S035d1872e63c _
//= CLOCK.BCNT3 CLOCK.BCNT3 0000ff53 S035d1872e63c _
//= CLOCK.BCNT4 CLOCK.BCNT4 0000ff54 S035d1872e63c _
//= CLOCK.BCNT5 CLOCK.BCNT5 0000ff55 S035d1872e63c _
//= CLOCK.BCNT6 CLOCK.BCNT6 0000ff56 S035d1872e63c _
//= CLOCK.BCNT7 CLOCK.BCNT7 0000ff57 S035d1872e63c _
//= CLOCK.BCNT8 CLOCK.BCNT8 0000ff58 S035d1872e63c _
//= CLOCK.BCNT9 CLOCK.BCNT9 0000ff59 S035d1872e63c _
//= CLOCK.BCNT10 CLOCK.BCNT10 0000ff5a S035d1872e63c _
//= CLOCK.BCNT11 CLOCK.BCNT11 0000ff5b S035d1872e63c _
//= CLOCK.BCNT12 CLOCK.BCNT12 0000ff5c S035d1872e63c _
//= CLOCK.BCNT13 CLOCK.BCNT13 0000ff5d S035d1872e63c _
//= CLOCK.BCNT14 CLOCK.BCNT14 0000ff5e S035d1872e63c _
//= CLOCK.BCNT15 CLOCK.BCNT15 0000ff5f S035d1872e63c _
//= GPIO.PORTA GPIO.PORTA 0000ff00 S0e483de54bb5 _
//= GPIO.PORTB GPIO.PORTB 0000ff01 S0e483de54bb5 _
//= GPIO.PORTC GPIO.PORTC 0000ff02 S0e483de54bb5 _
//= GPIO.PORTD GPIO.PORTD 0000ff03 S0e483de54bb5 _
//= GPIOA.ODR GPIOA.ODR 0000ff00 S0e483de54bb5 _
//= GPIOB.ODR GPIOB.ODR 0000ff01 S0e483de54bb5 _
//= GPIOC.ODR GPIOC.ODR 0000ff02 S0e483de54bb5 _
//= GPIOD.ODR GPIOD.ODR 0000ff03 S0e483de54bb5 _
//= GPIO.7SEG GPIO.7SEG 0000ff00 S0e483de54bb5 _
//= GPIO.LED GPIO.LED 0000ff01 S0e483de54bb5 _
//= GPIO.PORTI GPIO.PORTI 0000ff20 S0e483de54bb5 _
//= GPIO.PORTJ GPIO.PORTJ 0000ff10 S0e483de54bb5 _
//= GPIOI.IDR GPIOI.IDR 0000ff20 S0e483de54bb5 _
//= GPIOJ.IDR GPIOJ.IDR 0000ff10 S0e483de54bb5 _
//= GPIO.BTN GPIO.BTN 0000ff20 S0e483de54bb5 _
//= GPIO.SW GPIO.SW 0000ff10 S0e483de54bb5 _
//= UART.DR UART.DR 0000ff40 S33927ab86900 _
//= UART.CTRL UART.CTRL 0000ff41 S33927ab86900 _
//= UART.RSTAT UART.RSTAT 0000ff42 S33927ab86900 _
//= UART.TSTAT UART.TSTAT 0000ff43 S33927ab86900 _
//= UART.CPB UART.CPB 0000ff44 S33927ab86900 _
//= UART.SREG0 UART.SREG0 0000ff4c S33927ab86900 _
//= UART.SREG1 UART.SREG1 0000ff4d S33927ab86900 _
//= UART.SREG2 UART.SREG2 0000ff4e S33927ab86900 _
//= UART.SREG3 UART.SREG3 0000ff4f S33927ab86900 _
//L _char_is_true _char_is_true 000000d4 S602f0726a14b _
//L _char_is_false _char_is_false 000000d6 S602f0726a14b _
//L isdigit isdigit 000000d8 S847a5c4e618b _
//L islower islower 000000dd S9a7f1c151839 _
//L isupper isupper 000000e2 S154e11ca77b1 _
//L isalpha isalpha 000000e7 Sf1f3b6b1f10a _
//L isalnum isalnum 000000ec Sb95a2b17779b _
//L putchar putchar 000000f1 S503b4c87a8c4 _
//L eprints eprints 000000f2 S23554af9f140 _
//L eprintf eprintf 000000f3 Sb401aee44acb _
//L input_avail input_avail 000000f4 Sedd6b6695436 _
//L read read 000000f5 S84a19e8ae015 _
//= _pm_callin _pm_callin 0000f000 Sd14c348df59b _
//= _pm_enter_by_uart _pm_enter_by_uart 0000f001 Sd14c348df59b _
//= _pm_getchar _pm_getchar 0000f002 Sd14c348df59b _
//= _pm_version _pm_version 0000f003 Sd14c348df59b _
//= _pm_itobcd _pm_itobcd 0000f004 Sd14c348df59b _
//= _pm_cold_start _pm_cold_start 0000f005 Sd14c348df59b _
//= _pm_strchr _pm_strchr 0000f006 Sd14c348df59b _
//= _pm_streq _pm_streq 0000f007 Sd14c348df59b _
//= _pm_check_uart _pm_check_uart 0000f008 Sd14c348df59b _
//= _pm_input_avail _pm_input_avail 0000f008 Sd14c348df59b _
//= _pm_hexchar2value _pm_hexchar2value 0000f009 Sd14c348df59b _
//= _pm_value2hexchar _pm_value2hexchar 0000f00a Sd14c348df59b _
//= _pm_htoi _pm_htoi 0000f00b Sd14c348df59b _
//= _pm_strieq _pm_strieq 0000f00c Sd14c348df59b _
//= _pm_read _pm_read 0000f00d Sd14c348df59b _
//= _pm_putchar _pm_putchar 0000f00e Sd14c348df59b _
//= _pm_prints _pm_prints 0000f00f Sd14c348df59b _
//= _pm_printsnl _pm_printsnl 0000f010 Sd14c348df59b _
//= _pm_print_vhex _pm_print_vhex 0000f011 Sd14c348df59b _
//= _pm_pes _pm_pes 0000f012 Sd14c348df59b _
//= _pm_printd _pm_printd 0000f013 Sd14c348df59b _
//= _pm_printf _pm_printf 0000f014 Sd14c348df59b _
//= _pm_pesf _pm_pesf 0000f015 Sd14c348df59b _
//= _pm_ascii2seg _pm_ascii2seg 0000f016 Sd14c348df59b _
//L monitor monitor 000000f7 Sd14c348df59b _
//L monitor_by_uart monitor_by_uart 000000f8 Sd14c348df59b _
//L monitor_by_button monitor_by_button 000000f9 Sd14c348df59b _
//L monitor_version monitor_version 000000ff Sd14c348df59b _
//L _nr_to_mask _nr_to_mask 00000105 S45ec84dfaab0 _
//L S45ec84dfaab0nr_to_mask_cyc nr_to_mask_cyc 00000108 s S45ec84dfaab0
//L S45ec84dfaab0nr_to_mask_ret nr_to_mask_ret 0000010d s S45ec84dfaab0
//L led_on led_on 00000110 S325af6d6229a _
//L led_off led_off 00000118 S325af6d6229a _
//L led_toggle led_toggle 00000121 S325af6d6229a _
//L led_set led_set 00000129 S325af6d6229a _
//L led_get led_get 00000137 S325af6d6229a _
//L S38738b71c88clast_btn last_btn 00000140 s S38738b71c88c
//L S38738b71c88clast_sw last_sw 00000141 s S38738b71c88c
//L S38738b71c88clast_btn_down last_btn_down 00000142 s S38738b71c88c
//L S38738b71c88clast_sw_down last_sw_down 00000143 s S38738b71c88c
//L S38738b71c88clast_btn_inited last_btn_inited 00000144 s S38738b71c88c
//L S38738b71c88clast_sw_inited last_sw_inited 00000145 s S38738b71c88c
//L _lib_edge_detect _lib_edge_detect 00000146 S38738b71c88c _
//L S38738b71c88cinit_btn init_btn 0000014e s S38738b71c88c
//L S38738b71c88cinit_sw init_sw 00000157 s S38738b71c88c
//L S38738b71c88cpressed_inited pressed_inited 00000160 s S38738b71c88c
//L S38738b71c88cch_btn ch_btn 00000163 s S38738b71c88c
//L S38738b71c88cch_sw ch_sw 00000166 s S38738b71c88c
//L S38738b71c88ccheck_push check_push 00000176 s S38738b71c88c
//L S38738b71c88ccheck_release check_release 00000179 s S38738b71c88c
//L S38738b71c88cpressed_true pressed_true 0000017b s S38738b71c88c
//L S38738b71c88cpressed_false pressed_false 0000017d s S38738b71c88c
//L S38738b71c88cpressed_end pressed_end 0000017e s S38738b71c88c
//L btn_restart btn_restart 00000184 S38738b71c88c _
//L sw_restart sw_restart 00000189 S38738b71c88c _
//L btn_posedge btn_posedge 0000018e Saed5ad4c4c92 _
//L btn_negedge btn_negedge 00000196 Saed5ad4c4c92 _
//L btn_get btn_get 0000019e Saed5ad4c4c92 _

//; CODE
//P -
//F led.asm
01d2008b //C 00001     5 mvzl	sp,stack
//R 00001 #16 stack 0000008b
010261a8 //C 00002     6 mvzl	r0,25000
0600ff51 //C 00003     7 st	r0,CLOCK.PRE
//R 00003 #16 CLOCK.PRE 0000ff51
01020064 //C 00004     9 mvzl	r0,100
//G main
0600ff52 //C 00005    10 st	r0,CLOCK.BCNT2
//R 00005 #16 CLOCK.BCNT2 0000ff52
01020000 //C 00006    11 mvzl	r0,0
06000026 //C 00007    12 st	r0,nr
//R 00007 #16 nr 00000026
0600ff01 //C 00008    13 st	r0,GPIO.LED
//R 00008 #16 GPIO.LED 0000ff01
04000110 //C 00009    14 call	led_on
//R 00009 #24 led_on 00000110
0700ff52 //C 0000a    16 ld	r0,CLOCK.BCNT2
//R 0000a #16 CLOCK.BCNT2 0000ff52
//G cyc1
020b0000 //C 0000b    17 sz	r0
21f2000a //C 0000c    18 jnz	cyc1
//R 0000c #16 cyc1 0000000a
01020064 //C 0000d    20 mvzl	r0,100
0600ff52 //C 0000e    21 st	r0,CLOCK.BCNT2
//R 0000e #16 CLOCK.BCNT2 0000ff52
07000026 //C 0000f    23 ld	r0,nr
//R 0000f #16 nr 00000026
01040001 //C 00010    24 inc	r0
01080010 //C 00011    25 cmp	r0,0x10
11f20016 //C 00012    26 jz	out1
//R 00012 #16 out1 00000016
06000026 //C 00013    27 st	r0,nr
//R 00013 #16 nr 00000026
04000110 //C 00014    28 ton:	call	led_on
//R 00014 #24 led_on 00000110
//G ton
01f2000a //C 00015    29 jmp	cyc1
//R 00015 #16 cyc1 0000000a
01020000 //C 00016    31 mvzl	r0,0
//G out1
06000026 //C 00017    32 st	r0,nr
//R 00017 #16 nr 00000026
04000118 //C 00018    33 call	led_off
//R 00018 #24 led_off 00000118
0700ff52 //C 00019    35 ld	r0,CLOCK.BCNT2
//R 00019 #16 CLOCK.BCNT2 0000ff52
//G cyc2
020b0000 //C 0001a    36 sz	r0
21f20019 //C 0001b    37 jnz	cyc2
//R 0001b #16 cyc2 00000019
01020064 //C 0001c    39 mvzl	r0,100
0600ff52 //C 0001d    40 st	r0,CLOCK.BCNT2
//R 0001d #16 CLOCK.BCNT2 0000ff52
07000026 //C 0001e    42 ld	r0,nr
//R 0001e #16 nr 00000026
01040001 //C 0001f    43 inc	r0
01080010 //C 00020    44 cmp	r0,0x10
11f20025 //C 00021    45 jz	out2
//R 00021 #16 out2 00000025
06000026 //C 00022    46 st	r0,nr
//R 00022 #16 nr 00000026
04000118 //C 00023    47 toff:	call	led_off
//R 00023 #24 led_off 00000118
//G toff
01f20019 //C 00024    48 jmp	cyc2
//R 00024 #16 cyc2 00000019
01f20004 //C 00025    51 end:	jmp	main
//R 00025 #16 main 00000004
//G out2
//G end
00000000 //C 00026    53 nr:	ds	1
//+ 00000001
//G nr
00000000 //C 00027    55 ds	100
//+ 00000064
00000000 //C 0008b    57 db	0
//G stack
//F math.asm
//P S293d8fdbaa47 _lib_segment_div
0ded0000 //C 0008c    15 push	lr
//G div
0d6d0000 //C 0008d    16 push	r6
021b0000 //C 0008e    18 sz	r1
21f20093 //C 0008f    19 NZ jmp	div_dok
//R 0008f #16 div_dok 00000093
00400000 //C 00090    20 mov	r4,r0		; div by zero
01520000 //C 00091    21 mvzl	r5,0x0
01f200a4 //C 00092    22 jmp	div_ret
//R 00092 #16 div_ret 000000a4
01420000 //C 00093    25 mvzl	r4,0		; Q= 0
//N div_dok S293d8fdbaa47
//N div_dummy S293d8fdbaa47
01520000 //C 00094    26 mvzl	r5,0		; R= 0
01618000 //C 00095    27 mvh	r6,0x80000000	; m= 1<<31
01600000 //C 00096    28 mvl	r6,0x80000000
026b0000 //C 00097    30 sz	r6
//N div_cyc S293d8fdbaa47
11f200a4 //C 00098    31 Z jmp	div_ret
//R 00098 #16 div_ret 000000a4
02580000 //C 00099    32 shl	r5		; r<<= 1
000c0600 //C 0009a    33 test	r0,r6		; if (n&m)
215d0001 //C 0009b    34 NZ or	r5,1		; r|= 1
00580100 //C 0009c    35 cmp	r5,r1		; if (r>=d)
41f200a2 //C 0009d    36 LO jmp	div_cyc_next
//R 0009d #16 div_cyc_next 000000a2
00560100 //C 0009e    37 sub	r5,r1		; r-= d
004d0600 //C 0009f    38 or	r4,r6		; q|= m
01f200a2 //C 000a0    39 jmp	div_cyc_next
//R 000a0 #16 div_cyc_next 000000a2
01f20097 //C 000a1    40 jmp	div_cyc
//R 000a1 #16 div_cyc 00000097
02690000 //C 000a2    42 shr	r6		; m>>= 1
//N div_cyc_next S293d8fdbaa47
01f20097 //C 000a3    43 jmp	div_cyc
//R 000a3 #16 div_cyc 00000097
0f6d0000 //C 000a4    45 pop	r6
//N div_ret S293d8fdbaa47
0ffd0000 //C 000a5    46 pop	pc
//P S8e7b3d203072 _lib_segment_rand
00000049 //C 000a6    58 db	2127401289
//N seed S8e7b3d203072
060000a6 //C 000a7    65 st	r0,seed
//R 000a7 #16 seed 000000a6
//G srand
00f00e00 //C 000a8    66 ret
0ded0000 //C 000a9    72 push	lr
//G rand
0d0d0000 //C 000aa    73 push	r0
0d2d0000 //C 000ab    74 push	r2
070000a6 //C 000ac    76 ld	r0,seed
//R 000ac #16 seed 000000a6
00400000 //C 000ad    77 mov	r4,r0
0122000d //C 000ae    78 mvzl	r2,13
02480000 //C 000af    79 c1:	shl	r4
//N c1 S8e7b3d203072
0124ffff //C 000b0    80 dec	r2
21f200af //C 000b1    81 jnz	c1
//R 000b1 #16 c1 000000af
000e0400 //C 000b2    82 xor	r0,r4
00400000 //C 000b3    83 mov	r4,r0
01220011 //C 000b4    84 mvzl	r2,17
02490000 //C 000b5    85 c2:	shr	r4
//N c2 S8e7b3d203072
0124ffff //C 000b6    86 dec	r2
21f200b5 //C 000b7    87 jnz	c2
//R 000b7 #16 c2 000000b5
000e0400 //C 000b8    88 xor	r0,r4
00400000 //C 000b9    89 mov	r4,r0
01220005 //C 000ba    90 mvzl	r2,5
02480000 //C 000bb    91 c3:	shl	r4
//N c3 S8e7b3d203072
0124ffff //C 000bc    92 dec	r2
21f200bb //C 000bd    93 jnz	c3
//R 000bd #16 c3 000000bb
000e0400 //C 000be    94 xor	r0,r4
060000a6 //C 000bf    95 st	r0,seed
//R 000bf #16 seed 000000a6
00400000 //C 000c0    97 mov	r4,r0
0f2d0000 //C 000c1    99 pop	r2
0f0d0000 //C 000c2   100 pop	r0
0ffd0000 //C 000c3   101 pop	pc
//F str.asm
//P Sbe1a78b9d15e _lib_segment_str_chr
020b0000 //C 000c4    94 sz	r0		; check NULL pointer
//G str_chr
120d0000 //C 000c5    95 Z clc
10f00e00 //C 000c6    96 Z ret
02100000 //C 000c7    97 zeb	r1		; prepare character
0ded0000 //C 000c8    98 push	lr
0d1d0000 //C 000c9    99 push	r1
0d2d0000 //C 000ca   100 push	r2
00400000 //C 000cb   101 mov	r4,r0
00000100 //C 000cc   102 mov	r0,r1
00100400 //C 000cd   103 mov	r1,r4
0400f006 //C 000ce   104 call	_pm_strchr
//R 000ce #24 _pm_strchr 0000f006
00400100 //C 000cf   105 mov	r4,r1
00500200 //C 000d0   106 mov	r5,r2
0f2d0000 //C 000d1   107 pop	r2
0f1d0000 //C 000d2   108 pop	r1
0ffd0000 //C 000d3   109 pop	pc
//F char.asm
//P S602f0726a14b _lib_segment_character_fn
020c0000 //C 000d4    22 sec
//G _char_is_true
00f00e00 //C 000d5    23 ret
020d0000 //C 000d6    25 clc
//G _char_is_false
00f00e00 //C 000d7    26 ret
//P S847a5c4e618b _lib_segment_isdigit
01080030 //C 000d8    37 cmp	R0,'0'
//G isdigit
41f200d6 //C 000d9    38 ULT jmp	_char_is_false
//R 000d9 #16 _char_is_false 000000d6
01080039 //C 000da    39 cmp	R0,'9'
91f200d6 //C 000db    40 UGT jmp	_char_is_false
//R 000db #16 _char_is_false 000000d6
01f200d4 //C 000dc    41 jmp _char_is_true
//R 000dc #16 _char_is_true 000000d4
//P S9a7f1c151839 _lib_segment_islower
01080061 //C 000dd    53 cmp	r0,'a'
//G islower
41f200d6 //C 000de    54 ULT jmp	_char_is_false
//R 000de #16 _char_is_false 000000d6
0108007a //C 000df    55 cmp	r0,'z'
91f200d6 //C 000e0    56 UGT jmp	_char_is_false
//R 000e0 #16 _char_is_false 000000d6
01f200d4 //C 000e1    57 jmp	_char_is_true
//R 000e1 #16 _char_is_true 000000d4
//P S154e11ca77b1 _lib_segment_isupper
01080041 //C 000e2    69 cmp	r0,'A'
//G isupper
41f200d6 //C 000e3    70 ULT jmp	_char_is_false
//R 000e3 #16 _char_is_false 000000d6
0108005a //C 000e4    71 cmp	r0,'Z'
91f200d6 //C 000e5    72 UGT jmp	_char_is_false
//R 000e5 #16 _char_is_false 000000d6
01f200d4 //C 000e6    73 jmp	_char_is_true
//R 000e6 #16 _char_is_true 000000d4
//P Sf1f3b6b1f10a _lib_segment_isalpha
0ded0000 //C 000e7    85 push	lr
//G isalpha
040000dd //C 000e8    86 call	islower
//R 000e8 #24 islower 000000dd
3ffd0000 //C 000e9    87 C pop	pc
040000e2 //C 000ea    88 call	isupper
//R 000ea #24 isupper 000000e2
0ffd0000 //C 000eb    89 pop	pc
//P Sb95a2b17779b _lib_segment_isalnum
0ded0000 //C 000ec   101 push	lr
//G isalnum
040000e7 //C 000ed   102 call	isalpha
//R 000ed #24 isalpha 000000e7
3ffd0000 //C 000ee   103 C pop	pc
040000d8 //C 000ef   104 call	isdigit
//R 000ef #24 isdigit 000000d8
0ffd0000 //C 000f0   105 pop	pc
//F inout.asm
//P S503b4c87a8c4 _lib_segment_putchar
01f2f00e //C 000f1    24 jmp	_pm_putchar
//R 000f1 #16 _pm_putchar 0000f00e
//G putchar
//P S23554af9f140 _lib_segment_eprints
01f2f012 //C 000f2    54 jmp	_pm_pes
//R 000f2 #16 _pm_pes 0000f012
//G eprints
//P Sb401aee44acb _lib_segment_eprintf
01f2f015 //C 000f3    66 jmp	_pm_pesf
//R 000f3 #16 _pm_pesf 0000f015
//G eprintf
//P Sedd6b6695436 _lib_segment_input_avail
01f2f008 //C 000f4    72 jmp	_pm_check_uart
//R 000f4 #16 _pm_check_uart 0000f008
//G input_avail
//P S84a19e8ae015 _lib_segment_read
0740ff40 //C 000f5    89 ld	r4,UART.DR
//R 000f5 #16 UART.DR 0000ff40
//G read
00f00e00 //C 000f6    90 ret
//F mon.asm
//P Sd14c348df59b _lib_segment_pmon
01f2f000 //C 000f7    40 jmp	_pm_callin
//R 000f7 #16 _pm_callin 0000f000
//G monitor
01f2f001 //C 000f8    44 jmp	_pm_enter_by_uart
//R 000f8 #16 _pm_enter_by_uart 0000f001
//G monitor_by_uart
0ded0000 //C 000f9    48 push	lr
//G monitor_by_button
0400018e //C 000fa    49 call	btn_posedge
//R 000fa #24 btn_posedge 0000018e
4ffd0000 //C 000fb    50 NC pop	pc
040000f7 //C 000fc    51 call	monitor
//R 000fc #24 monitor 000000f7
04000184 //C 000fd    52 call	btn_restart
//R 000fd #24 btn_restart 00000184
0ffd0000 //C 000fe    53 pop	pc
0ded0000 //C 000ff    57 push	lr
//G monitor_version
0d0d0000 //C 00100    58 push	r0
0400f003 //C 00101    59 call	_pm_version
//R 00101 #24 _pm_version 0000f003
00400000 //C 00102    60 mov	r4,r0
0f0d0000 //C 00103    61 pop	r0
0ffd0000 //C 00104    62 pop	pc
//F bsp.asm
//P S45ec84dfaab0 _lib_segment_nr_to_mask
0d1d0000 //C 00105    26 push	r1
//G _nr_to_mask
010b001f //C 00106    27 btst	r0,0x1f		; max nr is 31
01120001 //C 00107    28 mvzl	r1,1		; mask for nr==0
020b0000 //C 00108    30 sz	r0		; is nr zero?
//N nr_to_mask_cyc S45ec84dfaab0
11f2010d //C 00109    31 jz	nr_to_mask_ret	; if yes, go out
//R 00109 #16 nr_to_mask_ret 0000010d
02180000 //C 0010a    32 shl	r1		; shift mask up
0104ffff //C 0010b    33 dec	r0		; decrement nr
01f20108 //C 0010c    34 jmp	nr_to_mask_cyc	; check for zero
//R 0010c #16 nr_to_mask_cyc 00000108
00000100 //C 0010d    36 mov	r0,r1		; return mask in R0
//N nr_to_mask_ret S45ec84dfaab0
0f1d0000 //C 0010e    37 pop	r1
00f00e00 //C 0010f    38 ret
//P S325af6d6229a _lib_segment_led
0ded0000 //C 00110    48 push	lr
//G led_on
0d1d0000 //C 00111    49 push	r1
04000105 //C 00112    50 call	_nr_to_mask
//R 00112 #24 _nr_to_mask 00000105
0710ff01 //C 00113    51 ld	r1,GPIO.LED
//R 00113 #16 GPIO.LED 0000ff01
001d0000 //C 00114    52 or	r1,r0
0610ff01 //C 00115    53 st	r1,GPIO.LED
//R 00115 #16 GPIO.LED 0000ff01
0f1d0000 //C 00116    54 pop	r1
0ffd0000 //C 00117    55 pop	pc
0ded0000 //C 00118    60 push	lr
//G led_off
0d1d0000 //C 00119    61 push	r1
04000105 //C 0011a    62 call	_nr_to_mask
//R 0011a #24 _nr_to_mask 00000105
02040000 //C 0011b    63 not	r0
0710ff01 //C 0011c    64 ld	r1,GPIO.LED
//R 0011c #16 GPIO.LED 0000ff01
001f0000 //C 0011d    65 and	r1,r0
0610ff01 //C 0011e    66 st	r1,GPIO.LED
//R 0011e #16 GPIO.LED 0000ff01
0f1d0000 //C 0011f    67 pop	r1
0ffd0000 //C 00120    68 pop	pc
0ded0000 //C 00121    73 push	lr
//G led_toggle
0d1d0000 //C 00122    74 push	r1
04000105 //C 00123    75 call	_nr_to_mask
//R 00123 #24 _nr_to_mask 00000105
0710ff01 //C 00124    76 ld	r1,GPIO.LED
//R 00124 #16 GPIO.LED 0000ff01
001e0000 //C 00125    77 xor	r1,r0
0610ff01 //C 00126    78 st	r1,GPIO.LED
//R 00126 #16 GPIO.LED 0000ff01
0f1d0000 //C 00127    79 pop	r1
0ffd0000 //C 00128    80 pop	pc
0ded0000 //C 00129    86 push	lr
//G led_set
0d1d0000 //C 0012a    87 push	r1
0d2d0000 //C 0012b    88 push	r2
04000105 //C 0012c    89 call	_nr_to_mask
//R 0012c #24 _nr_to_mask 00000105
021b0000 //C 0012d    90 sz	r1
20100000 //C 0012e    91 NZ mov	r1,r0
02040000 //C 0012f    92 not	r0
0720ff01 //C 00130    93 ld	r2,GPIO.LED
//R 00130 #16 GPIO.LED 0000ff01
002f0000 //C 00131    94 and	r2,r0
002d0100 //C 00132    95 or	r2,r1
0620ff01 //C 00133    96 st	r2,GPIO.LED
//R 00133 #16 GPIO.LED 0000ff01
0f2d0000 //C 00134    97 pop	r2
0f1d0000 //C 00135    98 pop	r1
0ffd0000 //C 00136    99 pop	pc
0ded0000 //C 00137   104 push	lr
//G led_get
0d1d0000 //C 00138   105 push	r1
04000105 //C 00139   106 call	_nr_to_mask
//R 00139 #24 _nr_to_mask 00000105
0710ff01 //C 0013a   107 ld	r1,GPIO.LED
//R 0013a #16 GPIO.LED 0000ff01
001b0000 //C 0013b   108 btst	r1,r0
120d0000 //C 0013c   109 Z clc
220c0000 //C 0013d   110 NZ sec
0f1d0000 //C 0013e   111 pop	r1
0ffd0000 //C 0013f   112 pop	pc
//P S38738b71c88c _lib_segment_edge
00000000 //C 00140   120 ds	1
//+ 00000001
//N last_btn S38738b71c88c
00000000 //C 00141   122 ds	1
//+ 00000001
//N last_sw S38738b71c88c
00000000 //C 00142   124 ds	1
//+ 00000001
//N last_btn_down S38738b71c88c
00000000 //C 00143   126 ds	1
//+ 00000001
//N last_sw_down S38738b71c88c
00000000 //C 00144   128 db	0
//N last_btn_inited S38738b71c88c
00000000 //C 00145   130 db	0
//N last_sw_inited S38738b71c88c
0ded0000 //C 00146   141 push	lr
//G _lib_edge_detect
0d1d0000 //C 00147   142 push	r1
0d2d0000 //C 00148   143 push	r2
0d3d0000 //C 00149   144 push	r3
0d4d0000 //C 0014a   145 push	r4
0d5d0000 //C 0014b   146 push	r5
00500100 //C 0014c   148 mov	r5,r1		; what edge to check
31f20157 //C 0014d   149 C jmp	init_sw
//R 0014d #16 init_sw 00000157
07100144 //C 0014e   151 ld	r1,last_btn_inited
//R 0014e #16 last_btn_inited 00000144
//N init_btn S38738b71c88c
021b0000 //C 0014f   152 sz	r1
21f20160 //C 00150   153 jnz	pressed_inited
//R 00150 #16 pressed_inited 00000160
01120001 //C 00151   154 mvzl	r1,1
06100144 //C 00152   155 st	r1,last_btn_inited
//R 00152 #16 last_btn_inited 00000144
0710ff20 //C 00153   156 ld	r1,GPIO.BTN
//R 00153 #16 GPIO.BTN 0000ff20
06100140 //C 00154   157 st	r1,last_btn
//R 00154 #16 last_btn 00000140
06100142 //C 00155   158 st	r1,last_btn_down
//R 00155 #16 last_btn_down 00000142
01f2017d //C 00156   159 jmp	pressed_false
//R 00156 #16 pressed_false 0000017d
07100145 //C 00157   161 ld	r1,last_sw_inited
//R 00157 #16 last_sw_inited 00000145
//N init_sw S38738b71c88c
021b0000 //C 00158   162 sz	r1
21f20160 //C 00159   163 jnz	pressed_inited
//R 00159 #16 pressed_inited 00000160
01120001 //C 0015a   164 mvzl	r1,1
06100145 //C 0015b   165 st	r1,last_sw_inited
//R 0015b #16 last_sw_inited 00000145
0710ff10 //C 0015c   166 ld	r1,GPIO.SW
//R 0015c #16 GPIO.SW 0000ff10
06100141 //C 0015d   167 st	r1,last_sw
//R 0015d #16 last_sw 00000141
06100143 //C 0015e   168 st	r1,last_sw_down
//R 0015e #16 last_sw_down 00000143
01f2017d //C 0015f   169 jmp	pressed_false
//R 0015f #16 pressed_false 0000017d
4122ff20 //C 00160   173 NC mvzl	r2,GPIO.BTN
//R 00160 #16 GPIO.BTN 0000ff20
//N pressed_inited S38738b71c88c
3122ff10 //C 00161   174 C mvzl	r2,GPIO.SW
//R 00161 #16 GPIO.SW 0000ff10
31f20166 //C 00162   175 jc	ch_sw
//R 00162 #16 ch_sw 00000166
025b0000 //C 00163   177 sz	r5
//N ch_btn S38738b71c88c
11120140 //C 00164   178 Z mvzl	r1,last_btn
//R 00164 #16 last_btn 00000140
21120142 //C 00165   179 NZ mvzl	r1,last_btn_down
//R 00165 #16 last_btn_down 00000142
025b0000 //C 00166   181 sz	r5
//N ch_sw S38738b71c88c
11120141 //C 00167   182 Z mvzl	r1,last_sw
//R 00167 #16 last_sw 00000141
21120143 //C 00168   183 NZ mvzl	r1,last_sw_down
//R 00168 #16 last_sw_down 00000143
0e310000 //C 00169   187 ld	r3,r1
0e420000 //C 0016a   188 ld	r4,r2
003f0000 //C 0016b   190 and	r3,r0		; masked last
004f0000 //C 0016c   191 and	r4,r0		; masked port
00380400 //C 0016d   192 cmp	r3,r4
11f2017d //C 0016e   193 EQ jmp	pressed_false
//R 0016e #16 pressed_false 0000017d
02040000 //C 0016f   194 not	r0		; negated mask
0e310000 //C 00170   195 ld	r3,r1		; original last
003f0000 //C 00171   196 and	r3,r0		; clear checked bit
003d0400 //C 00172   197 or	r3,r4		; or with masked port
0c310000 //C 00173   198 st	r3,r1		; store new last value
025b0000 //C 00174   199 sz	r5
21f20179 //C 00175   200 jnz	check_release
//R 00175 #16 check_release 00000179
024b0000 //C 00176   202 sz	r4		; check new port value
//N check_push S38738b71c88c
11f2017d //C 00177   203 jz	pressed_false
//R 00177 #16 pressed_false 0000017d
21f2017b //C 00178   204 jnz	pressed_true
//R 00178 #16 pressed_true 0000017b
024b0000 //C 00179   206 sz	r4
//N check_release S38738b71c88c
21f2017d //C 0017a   207 jnz	pressed_false
//R 0017a #16 pressed_false 0000017d
020c0000 //C 0017b   210 sec
//N pressed_true S38738b71c88c
01f2017e //C 0017c   211 jmp	pressed_end
//R 0017c #16 pressed_end 0000017e
020d0000 //C 0017d   213 clc
//N pressed_false S38738b71c88c
0f5d0000 //C 0017e   215 pop	r5
//N pressed_end S38738b71c88c
0f4d0000 //C 0017f   216 pop	r4
0f3d0000 //C 00180   217 pop	r3
0f2d0000 //C 00181   218 pop	r2
0f1d0000 //C 00182   219 pop	r1
0ffd0000 //C 00183   220 pop	pc
0d1d0000 //C 00184   225 push	r1
//G btn_restart
0710ff20 //C 00185   226 ld	r1,GPIO.BTN
//R 00185 #16 GPIO.BTN 0000ff20
06100140 //C 00186   227 st	r1,last_btn
//R 00186 #16 last_btn 00000140
0f1d0000 //C 00187   228 pop	r1
00f00e00 //C 00188   229 ret
0d1d0000 //C 00189   233 push	r1
//G sw_restart
0710ff10 //C 0018a   234 ld	r1,GPIO.SW
//R 0018a #16 GPIO.SW 0000ff10
06100141 //C 0018b   235 st	r1,last_sw
//R 0018b #16 last_sw 00000141
0f1d0000 //C 0018c   236 pop	r1
00f00e00 //C 0018d   237 ret
//P Saed5ad4c4c92 _lib_segment_btn
0ded0000 //C 0018e   250 push	lr
//G btn_posedge
04000105 //C 0018f   251 call	_nr_to_mask
//R 0018f #24 _nr_to_mask 00000105
0d1d0000 //C 00190   252 push	r1
01120000 //C 00191   253 mvzl	r1,0
020d0000 //C 00192   254 clc
04000146 //C 00193   255 call	_lib_edge_detect
//R 00193 #24 _lib_edge_detect 00000146
0f1d0000 //C 00194   256 pop	r1
0ffd0000 //C 00195   257 pop	pc
0ded0000 //C 00196   266 push	lr
//G btn_negedge
04000105 //C 00197   267 call	_nr_to_mask
//R 00197 #24 _nr_to_mask 00000105
0d1d0000 //C 00198   268 push	r1
01120001 //C 00199   269 mvzl	r1,1
020d0000 //C 0019a   270 clc
04000146 //C 0019b   271 call	_lib_edge_detect
//R 0019b #24 _lib_edge_detect 00000146
0f1d0000 //C 0019c   272 pop	r1
0ffd0000 //C 0019d   273 pop	pc
0ded0000 //C 0019e   282 push	lr
//G btn_get
0d1d0000 //C 0019f   283 push	r1
04000105 //C 001a0   284 call	_nr_to_mask
//R 001a0 #24 _nr_to_mask 00000105
0710ff20 //C 001a1   285 ld	r1,GPIO.BTN
//R 001a1 #16 GPIO.BTN 0000ff20
001f0000 //C 001a2   286 and	r1,r0
120d0000 //C 001a3   287 Z clc
220c0000 //C 001a4   288 NZ sec
0f1d0000 //C 001a5   289 pop	r1
0ffd0000 //C 001a6   290 pop	pc
//H 17ba3afe
//E
