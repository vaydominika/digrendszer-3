//U P1

//; SEGMENTS
//T S293d8fdbaa47 _lib_segment_div noload=0 abs=0
//T S8e7b3d203072 _lib_segment_rand noload=0 abs=0
//T Sbe1a78b9d15e _lib_segment_str_chr noload=0 abs=0
//T S0e483de54bb5 _lib_segment_regs_of_gpio noload=0 abs=0
//T S33927ab86900 _lib_segment_regs_of_uart noload=0 abs=0
//T S602f0726a14b _lib_segment_character_fn noload=0 abs=0
//T S847a5c4e618b _lib_segment_isdigit noload=0 abs=0
//T S9a7f1c151839 _lib_segment_islower noload=0 abs=0
//T S154e11ca77b1 _lib_segment_isupper noload=0 abs=0
//T Sf1f3b6b1f10a _lib_segment_isalpha noload=0 abs=0
//T Sb95a2b17779b _lib_segment_isalnum noload=0 abs=0
//T S503b4c87a8c4 _lib_segment_putchar noload=0 abs=0
//T S23554af9f140 _lib_segment_eprints noload=0 abs=0
//T Sb401aee44acb _lib_segment_eprintf noload=0 abs=0
//T Sedd6b6695436 _lib_segment_input_avail noload=0 abs=0
//T S84a19e8ae015 _lib_segment_read noload=0 abs=0
//T Sd14c348df59b _lib_segment_pmon noload=0 abs=0
//T S45ec84dfaab0 _lib_segment_nr_to_mask noload=0 abs=0
//T S38738b71c88c _lib_segment_edge noload=0 abs=0
//T Saed5ad4c4c92 _lib_segment_btn noload=0 abs=0

//; SYMBOLS
//= adat_db adat_db 0000000a - _
//S porta porta 0000ff00 - _
//L vege vege 00000008 - _
//L szum szum 00000009 - _
//L cikl cikl 0000000e - _
//L eredmeny eredmeny 00000018 - _
//L adatok adatok 00000019 - _
//L verem verem 00000023 - _
//L div div 00000024 S293d8fdbaa47 _
//L S293d8fdbaa47div_dok div_dok 0000002b s S293d8fdbaa47
//L S293d8fdbaa47div_dummy div_dummy 0000002b s S293d8fdbaa47
//L S293d8fdbaa47div_cyc div_cyc 0000002f s S293d8fdbaa47
//L S293d8fdbaa47div_cyc_next div_cyc_next 0000003a s S293d8fdbaa47
//L S293d8fdbaa47div_ret div_ret 0000003c s S293d8fdbaa47
//L S8e7b3d203072seed seed 0000003e s S8e7b3d203072
//L srand srand 0000003f S8e7b3d203072 _
//L rand rand 00000041 S8e7b3d203072 _
//L S8e7b3d203072c1 c1 00000047 s S8e7b3d203072
//L S8e7b3d203072c2 c2 0000004d s S8e7b3d203072
//L S8e7b3d203072c3 c3 00000053 s S8e7b3d203072
//L str_chr str_chr 0000005c Sbe1a78b9d15e _
//= GPIO.PORTA GPIO.PORTA 0000ff00 S0e483de54bb5 _
//= GPIO.PORTB GPIO.PORTB 0000ff01 S0e483de54bb5 _
//= GPIO.PORTC GPIO.PORTC 0000ff02 S0e483de54bb5 _
//= GPIO.PORTD GPIO.PORTD 0000ff03 S0e483de54bb5 _
//= GPIOA.ODR GPIOA.ODR 0000ff00 S0e483de54bb5 _
//= GPIOB.ODR GPIOB.ODR 0000ff01 S0e483de54bb5 _
//= GPIOC.ODR GPIOC.ODR 0000ff02 S0e483de54bb5 _
//= GPIOD.ODR GPIOD.ODR 0000ff03 S0e483de54bb5 _
//= GPIO.7SEG GPIO.7SEG 0000ff00 S0e483de54bb5 _
//= GPIO.LED GPIO.LED 0000ff01 S0e483de54bb5 _
//= GPIO.PORTI GPIO.PORTI 0000ff20 S0e483de54bb5 _
//= GPIO.PORTJ GPIO.PORTJ 0000ff10 S0e483de54bb5 _
//= GPIOI.IDR GPIOI.IDR 0000ff20 S0e483de54bb5 _
//= GPIOJ.IDR GPIOJ.IDR 0000ff10 S0e483de54bb5 _
//= GPIO.BTN GPIO.BTN 0000ff20 S0e483de54bb5 _
//= GPIO.SW GPIO.SW 0000ff10 S0e483de54bb5 _
//= UART.DR UART.DR 0000ff40 S33927ab86900 _
//= UART.CTRL UART.CTRL 0000ff41 S33927ab86900 _
//= UART.RSTAT UART.RSTAT 0000ff42 S33927ab86900 _
//= UART.TSTAT UART.TSTAT 0000ff43 S33927ab86900 _
//= UART.CPB UART.CPB 0000ff44 S33927ab86900 _
//= UART.SREG0 UART.SREG0 0000ff4c S33927ab86900 _
//= UART.SREG1 UART.SREG1 0000ff4d S33927ab86900 _
//= UART.SREG2 UART.SREG2 0000ff4e S33927ab86900 _
//= UART.SREG3 UART.SREG3 0000ff4f S33927ab86900 _
//L _char_is_true _char_is_true 0000006c S602f0726a14b _
//L _char_is_false _char_is_false 0000006e S602f0726a14b _
//L isdigit isdigit 00000070 S847a5c4e618b _
//L islower islower 00000075 S9a7f1c151839 _
//L isupper isupper 0000007a S154e11ca77b1 _
//L isalpha isalpha 0000007f Sf1f3b6b1f10a _
//L isalnum isalnum 00000084 Sb95a2b17779b _
//L putchar putchar 00000089 S503b4c87a8c4 _
//L eprints eprints 0000008a S23554af9f140 _
//L eprintf eprintf 0000008b Sb401aee44acb _
//L input_avail input_avail 0000008c Sedd6b6695436 _
//L read read 0000008d S84a19e8ae015 _
//= _pm_callin _pm_callin 0000f000 Sd14c348df59b _
//= _pm_enter_by_uart _pm_enter_by_uart 0000f001 Sd14c348df59b _
//= _pm_getchar _pm_getchar 0000f002 Sd14c348df59b _
//= _pm_version _pm_version 0000f003 Sd14c348df59b _
//= _pm_itobcd _pm_itobcd 0000f004 Sd14c348df59b _
//= _pm_cold_start _pm_cold_start 0000f005 Sd14c348df59b _
//= _pm_strchr _pm_strchr 0000f006 Sd14c348df59b _
//= _pm_streq _pm_streq 0000f007 Sd14c348df59b _
//= _pm_check_uart _pm_check_uart 0000f008 Sd14c348df59b _
//= _pm_input_avail _pm_input_avail 0000f008 Sd14c348df59b _
//= _pm_hexchar2value _pm_hexchar2value 0000f009 Sd14c348df59b _
//= _pm_value2hexchar _pm_value2hexchar 0000f00a Sd14c348df59b _
//= _pm_htoi _pm_htoi 0000f00b Sd14c348df59b _
//= _pm_strieq _pm_strieq 0000f00c Sd14c348df59b _
//= _pm_read _pm_read 0000f00d Sd14c348df59b _
//= _pm_putchar _pm_putchar 0000f00e Sd14c348df59b _
//= _pm_prints _pm_prints 0000f00f Sd14c348df59b _
//= _pm_printsnl _pm_printsnl 0000f010 Sd14c348df59b _
//= _pm_print_vhex _pm_print_vhex 0000f011 Sd14c348df59b _
//= _pm_pes _pm_pes 0000f012 Sd14c348df59b _
//= _pm_printd _pm_printd 0000f013 Sd14c348df59b _
//= _pm_printf _pm_printf 0000f014 Sd14c348df59b _
//= _pm_pesf _pm_pesf 0000f015 Sd14c348df59b _
//= _pm_ascii2seg _pm_ascii2seg 0000f016 Sd14c348df59b _
//L monitor monitor 0000008f Sd14c348df59b _
//L monitor_by_uart monitor_by_uart 00000090 Sd14c348df59b _
//L monitor_by_button monitor_by_button 00000091 Sd14c348df59b _
//L monitor_version monitor_version 00000097 Sd14c348df59b _
//L _nr_to_mask _nr_to_mask 0000009d S45ec84dfaab0 _
//L S45ec84dfaab0nr_to_mask_cyc nr_to_mask_cyc 000000a0 s S45ec84dfaab0
//L S45ec84dfaab0nr_to_mask_ret nr_to_mask_ret 000000a5 s S45ec84dfaab0
//L S38738b71c88clast_btn last_btn 000000a8 s S38738b71c88c
//L S38738b71c88clast_sw last_sw 000000a9 s S38738b71c88c
//L S38738b71c88clast_btn_down last_btn_down 000000aa s S38738b71c88c
//L S38738b71c88clast_sw_down last_sw_down 000000ab s S38738b71c88c
//L S38738b71c88clast_btn_inited last_btn_inited 000000ac s S38738b71c88c
//L S38738b71c88clast_sw_inited last_sw_inited 000000ad s S38738b71c88c
//L _lib_edge_detect _lib_edge_detect 000000ae S38738b71c88c _
//L S38738b71c88cinit_btn init_btn 000000b6 s S38738b71c88c
//L S38738b71c88cinit_sw init_sw 000000bf s S38738b71c88c
//L S38738b71c88cpressed_inited pressed_inited 000000c8 s S38738b71c88c
//L S38738b71c88cch_btn ch_btn 000000cb s S38738b71c88c
//L S38738b71c88cch_sw ch_sw 000000ce s S38738b71c88c
//L S38738b71c88ccheck_push check_push 000000de s S38738b71c88c
//L S38738b71c88ccheck_release check_release 000000e1 s S38738b71c88c
//L S38738b71c88cpressed_true pressed_true 000000e3 s S38738b71c88c
//L S38738b71c88cpressed_false pressed_false 000000e5 s S38738b71c88c
//L S38738b71c88cpressed_end pressed_end 000000e6 s S38738b71c88c
//L btn_restart btn_restart 000000ec S38738b71c88c _
//L sw_restart sw_restart 000000f1 S38738b71c88c _
//L btn_posedge btn_posedge 000000f6 Saed5ad4c4c92 _
//L btn_negedge btn_negedge 000000fe Saed5ad4c4c92 _
//L btn_get btn_get 00000106 Saed5ad4c4c92 _

//; CODE
//P -
//F array_sum.asm
00000000 //C 00000     8 nop
04d00023 //C 00001    10 ldl0	sp,verem	; stack pointer kezdoertek
//R 00001 #16 verem 00000023
08000009 //C 00002    11 call	szum		; szubrutin a muvelethez
//R 00002 #27 szum 00000009
04100018 //C 00003    12 ldl0	r1,eredmeny	; az eredmeny vizsgalata
//R 00003 #16 eredmeny 00000018
01010000 //C 00004    13 ld	r0,r1		; betoltes
0410ff00 //C 00005    14 ldl0	r1,porta
//R 00005 #16 porta 0000ff00
02010000 //C 00006    15 st	r0,r1		; kiiras a kijelzon
00000000 //C 00007    16 nop	;r0,r1		;
04f00008 //C 00008    17 vege:	jmp	vege		; itt leall a program
//R 00008 #16 vege 00000008
//G vege
02ed0000 //C 00009    20 push	lr		; visszateresi cim mentese
//G szum
07d00200 //C 0000a    21 inc	sp
04100019 //C 0000b    23 ldl0	r1,adatok	; mutato az adatokra
//R 0000b #16 adatok 00000019
0420000a //C 0000c    24 ldl0	r2,adat_db	; ciklus valtozo (adatok szama)
//R 0000c #16 adat_db 0000000a
04300000 //C 0000d    25 ldl0	r3,0		; resz osszeg
01410000 //C 0000e    27 cikl:	ld	r4,r1		; adat beolvasasa
//G cikl
07334000 //C 0000f    28 add	r3,r3,r4	; hozzaadas a reszosszeghez
07100200 //C 00010    29 inc	r1		; mutato a kovetkezo adatra
07200280 //C 00011    30 dec	r2		; ciklusvaltozo csokkentese
94f0000e //C 00012    31 jnz	cikl		; ugras vissza, ha meg nincs kesz
//R 00012 #16 cikl 0000000e
04100018 //C 00013    33 ldl0	r1,eredmeny	; az eredmeny tarolasi helye
//R 00013 #16 eredmeny 00000018
02410000 //C 00014    34 st	r4,r1		; az eredmeny tarolasa
07d00280 //C 00015    36 dec	sp
01ed0000 //C 00016    37 pop	lr		; visszateresi cim betoltese
03fe0000 //C 00017    38 ret
00000000 //C 00018    41 ds	1		; hely az eredmenynek
//+ 00000001
//G eredmeny
0000007b //C 00019    43 dd	123
//G adatok
00000221 //C 0001a    44 dd	545
fffffa69 //C 0001b    45 dd	-1431
00002344 //C 0001c    46 dd	0x2344
ffffabce //C 0001d    47 dd	-21554
0000007b //C 0001e    48 dd	123
000002af //C 0001f    49 dd	687
00000086 //C 00020    50 dd	0x86
00000d80 //C 00021    51 dd	3456
ffffffe9 //C 00022    52 dd	-23
00000000 //C 00023    54 verem:	nop
//G verem
//F math.asm
//P S293d8fdbaa47 _lib_segment_div
0ded0000 //C 00024    15 push	lr
//G div
0d6d0000 //C 00025    16 push	r6
021b0000 //C 00026    18 sz	r1
21f2002b //C 00027    19 NZ jmp	div_dok
//R 00027 #16 div_dok 0000002b
00400000 //C 00028    20 mov	r4,r0		; div by zero
01520000 //C 00029    21 mvzl	r5,0x0
01f2003c //C 0002a    22 jmp	div_ret
//R 0002a #16 div_ret 0000003c
01420000 //C 0002b    25 mvzl	r4,0		; Q= 0
//N div_dok S293d8fdbaa47
//N div_dummy S293d8fdbaa47
01520000 //C 0002c    26 mvzl	r5,0		; R= 0
01618000 //C 0002d    27 mvh	r6,0x80000000	; m= 1<<31
01600000 //C 0002e    28 mvl	r6,0x80000000
026b0000 //C 0002f    30 sz	r6
//N div_cyc S293d8fdbaa47
11f2003c //C 00030    31 Z jmp	div_ret
//R 00030 #16 div_ret 0000003c
02580000 //C 00031    32 shl	r5		; r<<= 1
000c0600 //C 00032    33 test	r0,r6		; if (n&m)
215d0001 //C 00033    34 NZ or	r5,1		; r|= 1
00580100 //C 00034    35 cmp	r5,r1		; if (r>=d)
41f2003a //C 00035    36 LO jmp	div_cyc_next
//R 00035 #16 div_cyc_next 0000003a
00560100 //C 00036    37 sub	r5,r1		; r-= d
004d0600 //C 00037    38 or	r4,r6		; q|= m
01f2003a //C 00038    39 jmp	div_cyc_next
//R 00038 #16 div_cyc_next 0000003a
01f2002f //C 00039    40 jmp	div_cyc
//R 00039 #16 div_cyc 0000002f
02690000 //C 0003a    42 shr	r6		; m>>= 1
//N div_cyc_next S293d8fdbaa47
01f2002f //C 0003b    43 jmp	div_cyc
//R 0003b #16 div_cyc 0000002f
0f6d0000 //C 0003c    45 pop	r6
//N div_ret S293d8fdbaa47
0ffd0000 //C 0003d    46 pop	pc
//P S8e7b3d203072 _lib_segment_rand
00000049 //C 0003e    58 db	2127401289
//N seed S8e7b3d203072
0600003e //C 0003f    65 st	r0,seed
//R 0003f #16 seed 0000003e
//G srand
00f00e00 //C 00040    66 ret
0ded0000 //C 00041    72 push	lr
//G rand
0d0d0000 //C 00042    73 push	r0
0d2d0000 //C 00043    74 push	r2
0700003e //C 00044    76 ld	r0,seed
//R 00044 #16 seed 0000003e
00400000 //C 00045    77 mov	r4,r0
0122000d //C 00046    78 mvzl	r2,13
02480000 //C 00047    79 c1:	shl	r4
//N c1 S8e7b3d203072
0124ffff //C 00048    80 dec	r2
21f20047 //C 00049    81 jnz	c1
//R 00049 #16 c1 00000047
000e0400 //C 0004a    82 xor	r0,r4
00400000 //C 0004b    83 mov	r4,r0
01220011 //C 0004c    84 mvzl	r2,17
02490000 //C 0004d    85 c2:	shr	r4
//N c2 S8e7b3d203072
0124ffff //C 0004e    86 dec	r2
21f2004d //C 0004f    87 jnz	c2
//R 0004f #16 c2 0000004d
000e0400 //C 00050    88 xor	r0,r4
00400000 //C 00051    89 mov	r4,r0
01220005 //C 00052    90 mvzl	r2,5
02480000 //C 00053    91 c3:	shl	r4
//N c3 S8e7b3d203072
0124ffff //C 00054    92 dec	r2
21f20053 //C 00055    93 jnz	c3
//R 00055 #16 c3 00000053
000e0400 //C 00056    94 xor	r0,r4
0600003e //C 00057    95 st	r0,seed
//R 00057 #16 seed 0000003e
00400000 //C 00058    97 mov	r4,r0
0f2d0000 //C 00059    99 pop	r2
0f0d0000 //C 0005a   100 pop	r0
0ffd0000 //C 0005b   101 pop	pc
//F str.asm
//P Sbe1a78b9d15e _lib_segment_str_chr
020b0000 //C 0005c    94 sz	r0		; check NULL pointer
//G str_chr
120d0000 //C 0005d    95 Z clc
10f00e00 //C 0005e    96 Z ret
02100000 //C 0005f    97 zeb	r1		; prepare character
0ded0000 //C 00060    98 push	lr
0d1d0000 //C 00061    99 push	r1
0d2d0000 //C 00062   100 push	r2
00400000 //C 00063   101 mov	r4,r0
00000100 //C 00064   102 mov	r0,r1
00100400 //C 00065   103 mov	r1,r4
0400f006 //C 00066   104 call	_pm_strchr
//R 00066 #24 _pm_strchr 0000f006
00400100 //C 00067   105 mov	r4,r1
00500200 //C 00068   106 mov	r5,r2
0f2d0000 //C 00069   107 pop	r2
0f1d0000 //C 0006a   108 pop	r1
0ffd0000 //C 0006b   109 pop	pc
//F char.asm
//P S602f0726a14b _lib_segment_character_fn
020c0000 //C 0006c    22 sec
//G _char_is_true
00f00e00 //C 0006d    23 ret
020d0000 //C 0006e    25 clc
//G _char_is_false
00f00e00 //C 0006f    26 ret
//P S847a5c4e618b _lib_segment_isdigit
01080030 //C 00070    37 cmp	R0,'0'
//G isdigit
41f2006e //C 00071    38 ULT jmp	_char_is_false
//R 00071 #16 _char_is_false 0000006e
01080039 //C 00072    39 cmp	R0,'9'
91f2006e //C 00073    40 UGT jmp	_char_is_false
//R 00073 #16 _char_is_false 0000006e
01f2006c //C 00074    41 jmp _char_is_true
//R 00074 #16 _char_is_true 0000006c
//P S9a7f1c151839 _lib_segment_islower
01080061 //C 00075    53 cmp	r0,'a'
//G islower
41f2006e //C 00076    54 ULT jmp	_char_is_false
//R 00076 #16 _char_is_false 0000006e
0108007a //C 00077    55 cmp	r0,'z'
91f2006e //C 00078    56 UGT jmp	_char_is_false
//R 00078 #16 _char_is_false 0000006e
01f2006c //C 00079    57 jmp	_char_is_true
//R 00079 #16 _char_is_true 0000006c
//P S154e11ca77b1 _lib_segment_isupper
01080041 //C 0007a    69 cmp	r0,'A'
//G isupper
41f2006e //C 0007b    70 ULT jmp	_char_is_false
//R 0007b #16 _char_is_false 0000006e
0108005a //C 0007c    71 cmp	r0,'Z'
91f2006e //C 0007d    72 UGT jmp	_char_is_false
//R 0007d #16 _char_is_false 0000006e
01f2006c //C 0007e    73 jmp	_char_is_true
//R 0007e #16 _char_is_true 0000006c
//P Sf1f3b6b1f10a _lib_segment_isalpha
0ded0000 //C 0007f    85 push	lr
//G isalpha
04000075 //C 00080    86 call	islower
//R 00080 #24 islower 00000075
3ffd0000 //C 00081    87 C pop	pc
0400007a //C 00082    88 call	isupper
//R 00082 #24 isupper 0000007a
0ffd0000 //C 00083    89 pop	pc
//P Sb95a2b17779b _lib_segment_isalnum
0ded0000 //C 00084   101 push	lr
//G isalnum
0400007f //C 00085   102 call	isalpha
//R 00085 #24 isalpha 0000007f
3ffd0000 //C 00086   103 C pop	pc
04000070 //C 00087   104 call	isdigit
//R 00087 #24 isdigit 00000070
0ffd0000 //C 00088   105 pop	pc
//F inout.asm
//P S503b4c87a8c4 _lib_segment_putchar
01f2f00e //C 00089    24 jmp	_pm_putchar
//R 00089 #16 _pm_putchar 0000f00e
//G putchar
//P S23554af9f140 _lib_segment_eprints
01f2f012 //C 0008a    54 jmp	_pm_pes
//R 0008a #16 _pm_pes 0000f012
//G eprints
//P Sb401aee44acb _lib_segment_eprintf
01f2f015 //C 0008b    66 jmp	_pm_pesf
//R 0008b #16 _pm_pesf 0000f015
//G eprintf
//P Sedd6b6695436 _lib_segment_input_avail
01f2f008 //C 0008c    72 jmp	_pm_check_uart
//R 0008c #16 _pm_check_uart 0000f008
//G input_avail
//P S84a19e8ae015 _lib_segment_read
0740ff40 //C 0008d    89 ld	r4,UART.DR
//R 0008d #16 UART.DR 0000ff40
//G read
00f00e00 //C 0008e    90 ret
//F mon.asm
//P Sd14c348df59b _lib_segment_pmon
01f2f000 //C 0008f    40 jmp	_pm_callin
//R 0008f #16 _pm_callin 0000f000
//G monitor
01f2f001 //C 00090    44 jmp	_pm_enter_by_uart
//R 00090 #16 _pm_enter_by_uart 0000f001
//G monitor_by_uart
0ded0000 //C 00091    48 push	lr
//G monitor_by_button
040000f6 //C 00092    49 call	btn_posedge
//R 00092 #24 btn_posedge 000000f6
4ffd0000 //C 00093    50 NC pop	pc
0400008f //C 00094    51 call	monitor
//R 00094 #24 monitor 0000008f
040000ec //C 00095    52 call	btn_restart
//R 00095 #24 btn_restart 000000ec
0ffd0000 //C 00096    53 pop	pc
0ded0000 //C 00097    57 push	lr
//G monitor_version
0d0d0000 //C 00098    58 push	r0
0400f003 //C 00099    59 call	_pm_version
//R 00099 #24 _pm_version 0000f003
00400000 //C 0009a    60 mov	r4,r0
0f0d0000 //C 0009b    61 pop	r0
0ffd0000 //C 0009c    62 pop	pc
//F bsp.asm
//P S45ec84dfaab0 _lib_segment_nr_to_mask
0d1d0000 //C 0009d    26 push	r1
//G _nr_to_mask
010b001f //C 0009e    27 btst	r0,0x1f		; max nr is 31
01120001 //C 0009f    28 mvzl	r1,1		; mask for nr==0
020b0000 //C 000a0    30 sz	r0		; is nr zero?
//N nr_to_mask_cyc S45ec84dfaab0
11f200a5 //C 000a1    31 jz	nr_to_mask_ret	; if yes, go out
//R 000a1 #16 nr_to_mask_ret 000000a5
02180000 //C 000a2    32 shl	r1		; shift mask up
0104ffff //C 000a3    33 dec	r0		; decrement nr
01f200a0 //C 000a4    34 jmp	nr_to_mask_cyc	; check for zero
//R 000a4 #16 nr_to_mask_cyc 000000a0
00000100 //C 000a5    36 mov	r0,r1		; return mask in R0
//N nr_to_mask_ret S45ec84dfaab0
0f1d0000 //C 000a6    37 pop	r1
00f00e00 //C 000a7    38 ret
//P S38738b71c88c _lib_segment_edge
00000000 //C 000a8   120 ds	1
//+ 00000001
//N last_btn S38738b71c88c
00000000 //C 000a9   122 ds	1
//+ 00000001
//N last_sw S38738b71c88c
00000000 //C 000aa   124 ds	1
//+ 00000001
//N last_btn_down S38738b71c88c
00000000 //C 000ab   126 ds	1
//+ 00000001
//N last_sw_down S38738b71c88c
00000000 //C 000ac   128 db	0
//N last_btn_inited S38738b71c88c
00000000 //C 000ad   130 db	0
//N last_sw_inited S38738b71c88c
0ded0000 //C 000ae   141 push	lr
//G _lib_edge_detect
0d1d0000 //C 000af   142 push	r1
0d2d0000 //C 000b0   143 push	r2
0d3d0000 //C 000b1   144 push	r3
0d4d0000 //C 000b2   145 push	r4
0d5d0000 //C 000b3   146 push	r5
00500100 //C 000b4   148 mov	r5,r1		; what edge to check
31f200bf //C 000b5   149 C jmp	init_sw
//R 000b5 #16 init_sw 000000bf
071000ac //C 000b6   151 ld	r1,last_btn_inited
//R 000b6 #16 last_btn_inited 000000ac
//N init_btn S38738b71c88c
021b0000 //C 000b7   152 sz	r1
21f200c8 //C 000b8   153 jnz	pressed_inited
//R 000b8 #16 pressed_inited 000000c8
01120001 //C 000b9   154 mvzl	r1,1
061000ac //C 000ba   155 st	r1,last_btn_inited
//R 000ba #16 last_btn_inited 000000ac
0710ff20 //C 000bb   156 ld	r1,GPIO.BTN
//R 000bb #16 GPIO.BTN 0000ff20
061000a8 //C 000bc   157 st	r1,last_btn
//R 000bc #16 last_btn 000000a8
061000aa //C 000bd   158 st	r1,last_btn_down
//R 000bd #16 last_btn_down 000000aa
01f200e5 //C 000be   159 jmp	pressed_false
//R 000be #16 pressed_false 000000e5
071000ad //C 000bf   161 ld	r1,last_sw_inited
//R 000bf #16 last_sw_inited 000000ad
//N init_sw S38738b71c88c
021b0000 //C 000c0   162 sz	r1
21f200c8 //C 000c1   163 jnz	pressed_inited
//R 000c1 #16 pressed_inited 000000c8
01120001 //C 000c2   164 mvzl	r1,1
061000ad //C 000c3   165 st	r1,last_sw_inited
//R 000c3 #16 last_sw_inited 000000ad
0710ff10 //C 000c4   166 ld	r1,GPIO.SW
//R 000c4 #16 GPIO.SW 0000ff10
061000a9 //C 000c5   167 st	r1,last_sw
//R 000c5 #16 last_sw 000000a9
061000ab //C 000c6   168 st	r1,last_sw_down
//R 000c6 #16 last_sw_down 000000ab
01f200e5 //C 000c7   169 jmp	pressed_false
//R 000c7 #16 pressed_false 000000e5
4122ff20 //C 000c8   173 NC mvzl	r2,GPIO.BTN
//R 000c8 #16 GPIO.BTN 0000ff20
//N pressed_inited S38738b71c88c
3122ff10 //C 000c9   174 C mvzl	r2,GPIO.SW
//R 000c9 #16 GPIO.SW 0000ff10
31f200ce //C 000ca   175 jc	ch_sw
//R 000ca #16 ch_sw 000000ce
025b0000 //C 000cb   177 sz	r5
//N ch_btn S38738b71c88c
111200a8 //C 000cc   178 Z mvzl	r1,last_btn
//R 000cc #16 last_btn 000000a8
211200aa //C 000cd   179 NZ mvzl	r1,last_btn_down
//R 000cd #16 last_btn_down 000000aa
025b0000 //C 000ce   181 sz	r5
//N ch_sw S38738b71c88c
111200a9 //C 000cf   182 Z mvzl	r1,last_sw
//R 000cf #16 last_sw 000000a9
211200ab //C 000d0   183 NZ mvzl	r1,last_sw_down
//R 000d0 #16 last_sw_down 000000ab
0e310000 //C 000d1   187 ld	r3,r1
0e420000 //C 000d2   188 ld	r4,r2
003f0000 //C 000d3   190 and	r3,r0		; masked last
004f0000 //C 000d4   191 and	r4,r0		; masked port
00380400 //C 000d5   192 cmp	r3,r4
11f200e5 //C 000d6   193 EQ jmp	pressed_false
//R 000d6 #16 pressed_false 000000e5
02040000 //C 000d7   194 not	r0		; negated mask
0e310000 //C 000d8   195 ld	r3,r1		; original last
003f0000 //C 000d9   196 and	r3,r0		; clear checked bit
003d0400 //C 000da   197 or	r3,r4		; or with masked port
0c310000 //C 000db   198 st	r3,r1		; store new last value
025b0000 //C 000dc   199 sz	r5
21f200e1 //C 000dd   200 jnz	check_release
//R 000dd #16 check_release 000000e1
024b0000 //C 000de   202 sz	r4		; check new port value
//N check_push S38738b71c88c
11f200e5 //C 000df   203 jz	pressed_false
//R 000df #16 pressed_false 000000e5
21f200e3 //C 000e0   204 jnz	pressed_true
//R 000e0 #16 pressed_true 000000e3
024b0000 //C 000e1   206 sz	r4
//N check_release S38738b71c88c
21f200e5 //C 000e2   207 jnz	pressed_false
//R 000e2 #16 pressed_false 000000e5
020c0000 //C 000e3   210 sec
//N pressed_true S38738b71c88c
01f200e6 //C 000e4   211 jmp	pressed_end
//R 000e4 #16 pressed_end 000000e6
020d0000 //C 000e5   213 clc
//N pressed_false S38738b71c88c
0f5d0000 //C 000e6   215 pop	r5
//N pressed_end S38738b71c88c
0f4d0000 //C 000e7   216 pop	r4
0f3d0000 //C 000e8   217 pop	r3
0f2d0000 //C 000e9   218 pop	r2
0f1d0000 //C 000ea   219 pop	r1
0ffd0000 //C 000eb   220 pop	pc
0d1d0000 //C 000ec   225 push	r1
//G btn_restart
0710ff20 //C 000ed   226 ld	r1,GPIO.BTN
//R 000ed #16 GPIO.BTN 0000ff20
061000a8 //C 000ee   227 st	r1,last_btn
//R 000ee #16 last_btn 000000a8
0f1d0000 //C 000ef   228 pop	r1
00f00e00 //C 000f0   229 ret
0d1d0000 //C 000f1   233 push	r1
//G sw_restart
0710ff10 //C 000f2   234 ld	r1,GPIO.SW
//R 000f2 #16 GPIO.SW 0000ff10
061000a9 //C 000f3   235 st	r1,last_sw
//R 000f3 #16 last_sw 000000a9
0f1d0000 //C 000f4   236 pop	r1
00f00e00 //C 000f5   237 ret
//P Saed5ad4c4c92 _lib_segment_btn
0ded0000 //C 000f6   250 push	lr
//G btn_posedge
0400009d //C 000f7   251 call	_nr_to_mask
//R 000f7 #24 _nr_to_mask 0000009d
0d1d0000 //C 000f8   252 push	r1
01120000 //C 000f9   253 mvzl	r1,0
020d0000 //C 000fa   254 clc
040000ae //C 000fb   255 call	_lib_edge_detect
//R 000fb #24 _lib_edge_detect 000000ae
0f1d0000 //C 000fc   256 pop	r1
0ffd0000 //C 000fd   257 pop	pc
0ded0000 //C 000fe   266 push	lr
//G btn_negedge
0400009d //C 000ff   267 call	_nr_to_mask
//R 000ff #24 _nr_to_mask 0000009d
0d1d0000 //C 00100   268 push	r1
01120001 //C 00101   269 mvzl	r1,1
020d0000 //C 00102   270 clc
040000ae //C 00103   271 call	_lib_edge_detect
//R 00103 #24 _lib_edge_detect 000000ae
0f1d0000 //C 00104   272 pop	r1
0ffd0000 //C 00105   273 pop	pc
0ded0000 //C 00106   282 push	lr
//G btn_get
0d1d0000 //C 00107   283 push	r1
0400009d //C 00108   284 call	_nr_to_mask
//R 00108 #24 _nr_to_mask 0000009d
0710ff20 //C 00109   285 ld	r1,GPIO.BTN
//R 00109 #16 GPIO.BTN 0000ff20
001f0000 //C 0010a   286 and	r1,r0
120d0000 //C 0010b   287 Z clc
220c0000 //C 0010c   288 NZ sec
0f1d0000 //C 0010d   289 pop	r1
0ffd0000 //C 0010e   290 pop	pc
//H 41c4e0ab
//E
