//U P2

//; SEGMENTS
//T S293d8fdbaa47 _lib_segment_div noload=0 abs=0
//T S8e7b3d203072 _lib_segment_rand noload=0 abs=0
//T Sbe1a78b9d15e _lib_segment_str_chr noload=0 abs=0
//T S0e483de54bb5 _lib_segment_regs_of_gpio noload=0 abs=0
//T S33927ab86900 _lib_segment_regs_of_uart noload=0 abs=0
//T S602f0726a14b _lib_segment_character_fn noload=0 abs=0
//T S847a5c4e618b _lib_segment_isdigit noload=0 abs=0
//T S9a7f1c151839 _lib_segment_islower noload=0 abs=0
//T S154e11ca77b1 _lib_segment_isupper noload=0 abs=0
//T Sf1f3b6b1f10a _lib_segment_isalpha noload=0 abs=0
//T Sb95a2b17779b _lib_segment_isalnum noload=0 abs=0
//T S503b4c87a8c4 _lib_segment_putchar noload=0 abs=0
//T S23554af9f140 _lib_segment_eprints noload=0 abs=0
//T Sb401aee44acb _lib_segment_eprintf noload=0 abs=0
//T Sedd6b6695436 _lib_segment_input_avail noload=0 abs=0
//T S84a19e8ae015 _lib_segment_read noload=0 abs=0
//T Sd14c348df59b _lib_segment_pmon noload=0 abs=0
//T S45ec84dfaab0 _lib_segment_nr_to_mask noload=0 abs=0
//T S38738b71c88c _lib_segment_edge noload=0 abs=0
//T Saed5ad4c4c92 _lib_segment_btn noload=0 abs=0

//; SYMBOLS
//S out out 0000ff00 - _
//L cycl cycl 00000001 - _
//L div div 00000004 S293d8fdbaa47 _
//L S293d8fdbaa47div_dok div_dok 0000000b s S293d8fdbaa47
//L S293d8fdbaa47div_dummy div_dummy 0000000b s S293d8fdbaa47
//L S293d8fdbaa47div_cyc div_cyc 0000000f s S293d8fdbaa47
//L S293d8fdbaa47div_cyc_next div_cyc_next 0000001a s S293d8fdbaa47
//L S293d8fdbaa47div_ret div_ret 0000001c s S293d8fdbaa47
//L S8e7b3d203072seed seed 0000001e s S8e7b3d203072
//L srand srand 0000001f S8e7b3d203072 _
//L rand rand 00000021 S8e7b3d203072 _
//L S8e7b3d203072c1 c1 00000027 s S8e7b3d203072
//L S8e7b3d203072c2 c2 0000002d s S8e7b3d203072
//L S8e7b3d203072c3 c3 00000033 s S8e7b3d203072
//L str_chr str_chr 0000003c Sbe1a78b9d15e _
//= GPIO.PORTA GPIO.PORTA 0000ff00 S0e483de54bb5 _
//= GPIO.PORTB GPIO.PORTB 0000ff01 S0e483de54bb5 _
//= GPIO.PORTC GPIO.PORTC 0000ff02 S0e483de54bb5 _
//= GPIO.PORTD GPIO.PORTD 0000ff03 S0e483de54bb5 _
//= GPIOA.ODR GPIOA.ODR 0000ff00 S0e483de54bb5 _
//= GPIOB.ODR GPIOB.ODR 0000ff01 S0e483de54bb5 _
//= GPIOC.ODR GPIOC.ODR 0000ff02 S0e483de54bb5 _
//= GPIOD.ODR GPIOD.ODR 0000ff03 S0e483de54bb5 _
//= GPIO.7SEG GPIO.7SEG 0000ff00 S0e483de54bb5 _
//= GPIO.LED GPIO.LED 0000ff01 S0e483de54bb5 _
//= GPIO.PORTI GPIO.PORTI 0000ff20 S0e483de54bb5 _
//= GPIO.PORTJ GPIO.PORTJ 0000ff10 S0e483de54bb5 _
//= GPIOI.IDR GPIOI.IDR 0000ff20 S0e483de54bb5 _
//= GPIOJ.IDR GPIOJ.IDR 0000ff10 S0e483de54bb5 _
//= GPIO.BTN GPIO.BTN 0000ff20 S0e483de54bb5 _
//= GPIO.SW GPIO.SW 0000ff10 S0e483de54bb5 _
//= UART.DR UART.DR 0000ff40 S33927ab86900 _
//= UART.CTRL UART.CTRL 0000ff41 S33927ab86900 _
//= UART.RSTAT UART.RSTAT 0000ff42 S33927ab86900 _
//= UART.TSTAT UART.TSTAT 0000ff43 S33927ab86900 _
//= UART.CPB UART.CPB 0000ff44 S33927ab86900 _
//= UART.SREG0 UART.SREG0 0000ff4c S33927ab86900 _
//= UART.SREG1 UART.SREG1 0000ff4d S33927ab86900 _
//= UART.SREG2 UART.SREG2 0000ff4e S33927ab86900 _
//= UART.SREG3 UART.SREG3 0000ff4f S33927ab86900 _
//L _char_is_true _char_is_true 0000004c S602f0726a14b _
//L _char_is_false _char_is_false 0000004e S602f0726a14b _
//L isdigit isdigit 00000050 S847a5c4e618b _
//L islower islower 00000055 S9a7f1c151839 _
//L isupper isupper 0000005a S154e11ca77b1 _
//L isalpha isalpha 0000005f Sf1f3b6b1f10a _
//L isalnum isalnum 00000064 Sb95a2b17779b _
//L putchar putchar 00000069 S503b4c87a8c4 _
//L eprints eprints 0000006a S23554af9f140 _
//L eprintf eprintf 0000006b Sb401aee44acb _
//L input_avail input_avail 0000006c Sedd6b6695436 _
//L read read 0000006d S84a19e8ae015 _
//= _pm_callin _pm_callin 0000f000 Sd14c348df59b _
//= _pm_enter_by_uart _pm_enter_by_uart 0000f001 Sd14c348df59b _
//= _pm_getchar _pm_getchar 0000f002 Sd14c348df59b _
//= _pm_version _pm_version 0000f003 Sd14c348df59b _
//= _pm_itobcd _pm_itobcd 0000f004 Sd14c348df59b _
//= _pm_cold_start _pm_cold_start 0000f005 Sd14c348df59b _
//= _pm_strchr _pm_strchr 0000f006 Sd14c348df59b _
//= _pm_streq _pm_streq 0000f007 Sd14c348df59b _
//= _pm_check_uart _pm_check_uart 0000f008 Sd14c348df59b _
//= _pm_input_avail _pm_input_avail 0000f008 Sd14c348df59b _
//= _pm_hexchar2value _pm_hexchar2value 0000f009 Sd14c348df59b _
//= _pm_value2hexchar _pm_value2hexchar 0000f00a Sd14c348df59b _
//= _pm_htoi _pm_htoi 0000f00b Sd14c348df59b _
//= _pm_strieq _pm_strieq 0000f00c Sd14c348df59b _
//= _pm_read _pm_read 0000f00d Sd14c348df59b _
//= _pm_putchar _pm_putchar 0000f00e Sd14c348df59b _
//= _pm_prints _pm_prints 0000f00f Sd14c348df59b _
//= _pm_printsnl _pm_printsnl 0000f010 Sd14c348df59b _
//= _pm_print_vhex _pm_print_vhex 0000f011 Sd14c348df59b _
//= _pm_pes _pm_pes 0000f012 Sd14c348df59b _
//= _pm_printd _pm_printd 0000f013 Sd14c348df59b _
//= _pm_printf _pm_printf 0000f014 Sd14c348df59b _
//= _pm_pesf _pm_pesf 0000f015 Sd14c348df59b _
//= _pm_ascii2seg _pm_ascii2seg 0000f016 Sd14c348df59b _
//L monitor monitor 0000006f Sd14c348df59b _
//L monitor_by_uart monitor_by_uart 00000070 Sd14c348df59b _
//L monitor_by_button monitor_by_button 00000071 Sd14c348df59b _
//L monitor_version monitor_version 00000077 Sd14c348df59b _
//L _nr_to_mask _nr_to_mask 0000007d S45ec84dfaab0 _
//L S45ec84dfaab0nr_to_mask_cyc nr_to_mask_cyc 00000080 s S45ec84dfaab0
//L S45ec84dfaab0nr_to_mask_ret nr_to_mask_ret 00000085 s S45ec84dfaab0
//L S38738b71c88clast_btn last_btn 00000088 s S38738b71c88c
//L S38738b71c88clast_sw last_sw 00000089 s S38738b71c88c
//L S38738b71c88clast_btn_down last_btn_down 0000008a s S38738b71c88c
//L S38738b71c88clast_sw_down last_sw_down 0000008b s S38738b71c88c
//L S38738b71c88clast_btn_inited last_btn_inited 0000008c s S38738b71c88c
//L S38738b71c88clast_sw_inited last_sw_inited 0000008d s S38738b71c88c
//L _lib_edge_detect _lib_edge_detect 0000008e S38738b71c88c _
//L S38738b71c88cinit_btn init_btn 00000096 s S38738b71c88c
//L S38738b71c88cinit_sw init_sw 0000009f s S38738b71c88c
//L S38738b71c88cpressed_inited pressed_inited 000000a8 s S38738b71c88c
//L S38738b71c88cch_btn ch_btn 000000ab s S38738b71c88c
//L S38738b71c88cch_sw ch_sw 000000ae s S38738b71c88c
//L S38738b71c88ccheck_push check_push 000000be s S38738b71c88c
//L S38738b71c88ccheck_release check_release 000000c1 s S38738b71c88c
//L S38738b71c88cpressed_true pressed_true 000000c3 s S38738b71c88c
//L S38738b71c88cpressed_false pressed_false 000000c5 s S38738b71c88c
//L S38738b71c88cpressed_end pressed_end 000000c6 s S38738b71c88c
//L btn_restart btn_restart 000000cc S38738b71c88c _
//L sw_restart sw_restart 000000d1 S38738b71c88c _
//L btn_posedge btn_posedge 000000d6 Saed5ad4c4c92 _
//L btn_negedge btn_negedge 000000de Saed5ad4c4c92 _
//L btn_get btn_get 000000e6 Saed5ad4c4c92 _

//; CODE
//P -
//F counter2.asm
01120000 //C 00000     5 ldl0	r1,0		; start of counter value
0610ff00 //C 00001     7 cycl:	st	r1,out		; put counter on GPIO
//R 00001 #16 out 0000ff00
//G cycl
01140001 //C 00002     8 inc	r1		; increment counter
01f20001 //C 00003     9 jmp	cycl		; go to start of cycle
//R 00003 #16 cycl 00000001
//F math.asm
//P S293d8fdbaa47 _lib_segment_div
0ded0000 //C 00004    15 push	lr
//G div
0d6d0000 //C 00005    16 push	r6
021b0000 //C 00006    18 sz	r1
21f2000b //C 00007    19 NZ jmp	div_dok
//R 00007 #16 div_dok 0000000b
00400000 //C 00008    20 mov	r4,r0		; div by zero
01520000 //C 00009    21 mvzl	r5,0x0
01f2001c //C 0000a    22 jmp	div_ret
//R 0000a #16 div_ret 0000001c
01420000 //C 0000b    25 mvzl	r4,0		; Q= 0
//N div_dok S293d8fdbaa47
//N div_dummy S293d8fdbaa47
01520000 //C 0000c    26 mvzl	r5,0		; R= 0
01618000 //C 0000d    27 mvh	r6,0x80000000	; m= 1<<31
01600000 //C 0000e    28 mvl	r6,0x80000000
026b0000 //C 0000f    30 sz	r6
//N div_cyc S293d8fdbaa47
11f2001c //C 00010    31 Z jmp	div_ret
//R 00010 #16 div_ret 0000001c
02580000 //C 00011    32 shl	r5		; r<<= 1
000c0600 //C 00012    33 test	r0,r6		; if (n&m)
215d0001 //C 00013    34 NZ or	r5,1		; r|= 1
00580100 //C 00014    35 cmp	r5,r1		; if (r>=d)
41f2001a //C 00015    36 LO jmp	div_cyc_next
//R 00015 #16 div_cyc_next 0000001a
00560100 //C 00016    37 sub	r5,r1		; r-= d
004d0600 //C 00017    38 or	r4,r6		; q|= m
01f2001a //C 00018    39 jmp	div_cyc_next
//R 00018 #16 div_cyc_next 0000001a
01f2000f //C 00019    40 jmp	div_cyc
//R 00019 #16 div_cyc 0000000f
02690000 //C 0001a    42 shr	r6		; m>>= 1
//N div_cyc_next S293d8fdbaa47
01f2000f //C 0001b    43 jmp	div_cyc
//R 0001b #16 div_cyc 0000000f
0f6d0000 //C 0001c    45 pop	r6
//N div_ret S293d8fdbaa47
0ffd0000 //C 0001d    46 pop	pc
//P S8e7b3d203072 _lib_segment_rand
00000049 //C 0001e    58 db	2127401289
//N seed S8e7b3d203072
0600001e //C 0001f    65 st	r0,seed
//R 0001f #16 seed 0000001e
//G srand
00f00e00 //C 00020    66 ret
0ded0000 //C 00021    72 push	lr
//G rand
0d0d0000 //C 00022    73 push	r0
0d2d0000 //C 00023    74 push	r2
0700001e //C 00024    76 ld	r0,seed
//R 00024 #16 seed 0000001e
00400000 //C 00025    77 mov	r4,r0
0122000d //C 00026    78 mvzl	r2,13
02480000 //C 00027    79 c1:	shl	r4
//N c1 S8e7b3d203072
0124ffff //C 00028    80 dec	r2
21f20027 //C 00029    81 jnz	c1
//R 00029 #16 c1 00000027
000e0400 //C 0002a    82 xor	r0,r4
00400000 //C 0002b    83 mov	r4,r0
01220011 //C 0002c    84 mvzl	r2,17
02490000 //C 0002d    85 c2:	shr	r4
//N c2 S8e7b3d203072
0124ffff //C 0002e    86 dec	r2
21f2002d //C 0002f    87 jnz	c2
//R 0002f #16 c2 0000002d
000e0400 //C 00030    88 xor	r0,r4
00400000 //C 00031    89 mov	r4,r0
01220005 //C 00032    90 mvzl	r2,5
02480000 //C 00033    91 c3:	shl	r4
//N c3 S8e7b3d203072
0124ffff //C 00034    92 dec	r2
21f20033 //C 00035    93 jnz	c3
//R 00035 #16 c3 00000033
000e0400 //C 00036    94 xor	r0,r4
0600001e //C 00037    95 st	r0,seed
//R 00037 #16 seed 0000001e
00400000 //C 00038    97 mov	r4,r0
0f2d0000 //C 00039    99 pop	r2
0f0d0000 //C 0003a   100 pop	r0
0ffd0000 //C 0003b   101 pop	pc
//F str.asm
//P Sbe1a78b9d15e _lib_segment_str_chr
020b0000 //C 0003c    94 sz	r0		; check NULL pointer
//G str_chr
120d0000 //C 0003d    95 Z clc
10f00e00 //C 0003e    96 Z ret
02100000 //C 0003f    97 zeb	r1		; prepare character
0ded0000 //C 00040    98 push	lr
0d1d0000 //C 00041    99 push	r1
0d2d0000 //C 00042   100 push	r2
00400000 //C 00043   101 mov	r4,r0
00000100 //C 00044   102 mov	r0,r1
00100400 //C 00045   103 mov	r1,r4
0400f006 //C 00046   104 call	_pm_strchr
//R 00046 #24 _pm_strchr 0000f006
00400100 //C 00047   105 mov	r4,r1
00500200 //C 00048   106 mov	r5,r2
0f2d0000 //C 00049   107 pop	r2
0f1d0000 //C 0004a   108 pop	r1
0ffd0000 //C 0004b   109 pop	pc
//F char.asm
//P S602f0726a14b _lib_segment_character_fn
020c0000 //C 0004c    22 sec
//G _char_is_true
00f00e00 //C 0004d    23 ret
020d0000 //C 0004e    25 clc
//G _char_is_false
00f00e00 //C 0004f    26 ret
//P S847a5c4e618b _lib_segment_isdigit
01080030 //C 00050    37 cmp	R0,'0'
//G isdigit
41f2004e //C 00051    38 ULT jmp	_char_is_false
//R 00051 #16 _char_is_false 0000004e
01080039 //C 00052    39 cmp	R0,'9'
91f2004e //C 00053    40 UGT jmp	_char_is_false
//R 00053 #16 _char_is_false 0000004e
01f2004c //C 00054    41 jmp _char_is_true
//R 00054 #16 _char_is_true 0000004c
//P S9a7f1c151839 _lib_segment_islower
01080061 //C 00055    53 cmp	r0,'a'
//G islower
41f2004e //C 00056    54 ULT jmp	_char_is_false
//R 00056 #16 _char_is_false 0000004e
0108007a //C 00057    55 cmp	r0,'z'
91f2004e //C 00058    56 UGT jmp	_char_is_false
//R 00058 #16 _char_is_false 0000004e
01f2004c //C 00059    57 jmp	_char_is_true
//R 00059 #16 _char_is_true 0000004c
//P S154e11ca77b1 _lib_segment_isupper
01080041 //C 0005a    69 cmp	r0,'A'
//G isupper
41f2004e //C 0005b    70 ULT jmp	_char_is_false
//R 0005b #16 _char_is_false 0000004e
0108005a //C 0005c    71 cmp	r0,'Z'
91f2004e //C 0005d    72 UGT jmp	_char_is_false
//R 0005d #16 _char_is_false 0000004e
01f2004c //C 0005e    73 jmp	_char_is_true
//R 0005e #16 _char_is_true 0000004c
//P Sf1f3b6b1f10a _lib_segment_isalpha
0ded0000 //C 0005f    85 push	lr
//G isalpha
04000055 //C 00060    86 call	islower
//R 00060 #24 islower 00000055
3ffd0000 //C 00061    87 C pop	pc
0400005a //C 00062    88 call	isupper
//R 00062 #24 isupper 0000005a
0ffd0000 //C 00063    89 pop	pc
//P Sb95a2b17779b _lib_segment_isalnum
0ded0000 //C 00064   101 push	lr
//G isalnum
0400005f //C 00065   102 call	isalpha
//R 00065 #24 isalpha 0000005f
3ffd0000 //C 00066   103 C pop	pc
04000050 //C 00067   104 call	isdigit
//R 00067 #24 isdigit 00000050
0ffd0000 //C 00068   105 pop	pc
//F inout.asm
//P S503b4c87a8c4 _lib_segment_putchar
01f2f00e //C 00069    24 jmp	_pm_putchar
//R 00069 #16 _pm_putchar 0000f00e
//G putchar
//P S23554af9f140 _lib_segment_eprints
01f2f012 //C 0006a    54 jmp	_pm_pes
//R 0006a #16 _pm_pes 0000f012
//G eprints
//P Sb401aee44acb _lib_segment_eprintf
01f2f015 //C 0006b    66 jmp	_pm_pesf
//R 0006b #16 _pm_pesf 0000f015
//G eprintf
//P Sedd6b6695436 _lib_segment_input_avail
01f2f008 //C 0006c    72 jmp	_pm_check_uart
//R 0006c #16 _pm_check_uart 0000f008
//G input_avail
//P S84a19e8ae015 _lib_segment_read
0740ff40 //C 0006d    89 ld	r4,UART.DR
//R 0006d #16 UART.DR 0000ff40
//G read
00f00e00 //C 0006e    90 ret
//F mon.asm
//P Sd14c348df59b _lib_segment_pmon
01f2f000 //C 0006f    40 jmp	_pm_callin
//R 0006f #16 _pm_callin 0000f000
//G monitor
01f2f001 //C 00070    44 jmp	_pm_enter_by_uart
//R 00070 #16 _pm_enter_by_uart 0000f001
//G monitor_by_uart
0ded0000 //C 00071    48 push	lr
//G monitor_by_button
040000d6 //C 00072    49 call	btn_posedge
//R 00072 #24 btn_posedge 000000d6
4ffd0000 //C 00073    50 NC pop	pc
0400006f //C 00074    51 call	monitor
//R 00074 #24 monitor 0000006f
040000cc //C 00075    52 call	btn_restart
//R 00075 #24 btn_restart 000000cc
0ffd0000 //C 00076    53 pop	pc
0ded0000 //C 00077    57 push	lr
//G monitor_version
0d0d0000 //C 00078    58 push	r0
0400f003 //C 00079    59 call	_pm_version
//R 00079 #24 _pm_version 0000f003
00400000 //C 0007a    60 mov	r4,r0
0f0d0000 //C 0007b    61 pop	r0
0ffd0000 //C 0007c    62 pop	pc
//F bsp.asm
//P S45ec84dfaab0 _lib_segment_nr_to_mask
0d1d0000 //C 0007d    26 push	r1
//G _nr_to_mask
010b001f //C 0007e    27 btst	r0,0x1f		; max nr is 31
01120001 //C 0007f    28 mvzl	r1,1		; mask for nr==0
020b0000 //C 00080    30 sz	r0		; is nr zero?
//N nr_to_mask_cyc S45ec84dfaab0
11f20085 //C 00081    31 jz	nr_to_mask_ret	; if yes, go out
//R 00081 #16 nr_to_mask_ret 00000085
02180000 //C 00082    32 shl	r1		; shift mask up
0104ffff //C 00083    33 dec	r0		; decrement nr
01f20080 //C 00084    34 jmp	nr_to_mask_cyc	; check for zero
//R 00084 #16 nr_to_mask_cyc 00000080
00000100 //C 00085    36 mov	r0,r1		; return mask in R0
//N nr_to_mask_ret S45ec84dfaab0
0f1d0000 //C 00086    37 pop	r1
00f00e00 //C 00087    38 ret
//P S38738b71c88c _lib_segment_edge
00000000 //C 00088   120 ds	1
//+ 00000001
//N last_btn S38738b71c88c
00000000 //C 00089   122 ds	1
//+ 00000001
//N last_sw S38738b71c88c
00000000 //C 0008a   124 ds	1
//+ 00000001
//N last_btn_down S38738b71c88c
00000000 //C 0008b   126 ds	1
//+ 00000001
//N last_sw_down S38738b71c88c
00000000 //C 0008c   128 db	0
//N last_btn_inited S38738b71c88c
00000000 //C 0008d   130 db	0
//N last_sw_inited S38738b71c88c
0ded0000 //C 0008e   141 push	lr
//G _lib_edge_detect
0d1d0000 //C 0008f   142 push	r1
0d2d0000 //C 00090   143 push	r2
0d3d0000 //C 00091   144 push	r3
0d4d0000 //C 00092   145 push	r4
0d5d0000 //C 00093   146 push	r5
00500100 //C 00094   148 mov	r5,r1		; what edge to check
31f2009f //C 00095   149 C jmp	init_sw
//R 00095 #16 init_sw 0000009f
0710008c //C 00096   151 ld	r1,last_btn_inited
//R 00096 #16 last_btn_inited 0000008c
//N init_btn S38738b71c88c
021b0000 //C 00097   152 sz	r1
21f200a8 //C 00098   153 jnz	pressed_inited
//R 00098 #16 pressed_inited 000000a8
01120001 //C 00099   154 mvzl	r1,1
0610008c //C 0009a   155 st	r1,last_btn_inited
//R 0009a #16 last_btn_inited 0000008c
0710ff20 //C 0009b   156 ld	r1,GPIO.BTN
//R 0009b #16 GPIO.BTN 0000ff20
06100088 //C 0009c   157 st	r1,last_btn
//R 0009c #16 last_btn 00000088
0610008a //C 0009d   158 st	r1,last_btn_down
//R 0009d #16 last_btn_down 0000008a
01f200c5 //C 0009e   159 jmp	pressed_false
//R 0009e #16 pressed_false 000000c5
0710008d //C 0009f   161 ld	r1,last_sw_inited
//R 0009f #16 last_sw_inited 0000008d
//N init_sw S38738b71c88c
021b0000 //C 000a0   162 sz	r1
21f200a8 //C 000a1   163 jnz	pressed_inited
//R 000a1 #16 pressed_inited 000000a8
01120001 //C 000a2   164 mvzl	r1,1
0610008d //C 000a3   165 st	r1,last_sw_inited
//R 000a3 #16 last_sw_inited 0000008d
0710ff10 //C 000a4   166 ld	r1,GPIO.SW
//R 000a4 #16 GPIO.SW 0000ff10
06100089 //C 000a5   167 st	r1,last_sw
//R 000a5 #16 last_sw 00000089
0610008b //C 000a6   168 st	r1,last_sw_down
//R 000a6 #16 last_sw_down 0000008b
01f200c5 //C 000a7   169 jmp	pressed_false
//R 000a7 #16 pressed_false 000000c5
4122ff20 //C 000a8   173 NC mvzl	r2,GPIO.BTN
//R 000a8 #16 GPIO.BTN 0000ff20
//N pressed_inited S38738b71c88c
3122ff10 //C 000a9   174 C mvzl	r2,GPIO.SW
//R 000a9 #16 GPIO.SW 0000ff10
31f200ae //C 000aa   175 jc	ch_sw
//R 000aa #16 ch_sw 000000ae
025b0000 //C 000ab   177 sz	r5
//N ch_btn S38738b71c88c
11120088 //C 000ac   178 Z mvzl	r1,last_btn
//R 000ac #16 last_btn 00000088
2112008a //C 000ad   179 NZ mvzl	r1,last_btn_down
//R 000ad #16 last_btn_down 0000008a
025b0000 //C 000ae   181 sz	r5
//N ch_sw S38738b71c88c
11120089 //C 000af   182 Z mvzl	r1,last_sw
//R 000af #16 last_sw 00000089
2112008b //C 000b0   183 NZ mvzl	r1,last_sw_down
//R 000b0 #16 last_sw_down 0000008b
0e310000 //C 000b1   187 ld	r3,r1
0e420000 //C 000b2   188 ld	r4,r2
003f0000 //C 000b3   190 and	r3,r0		; masked last
004f0000 //C 000b4   191 and	r4,r0		; masked port
00380400 //C 000b5   192 cmp	r3,r4
11f200c5 //C 000b6   193 EQ jmp	pressed_false
//R 000b6 #16 pressed_false 000000c5
02040000 //C 000b7   194 not	r0		; negated mask
0e310000 //C 000b8   195 ld	r3,r1		; original last
003f0000 //C 000b9   196 and	r3,r0		; clear checked bit
003d0400 //C 000ba   197 or	r3,r4		; or with masked port
0c310000 //C 000bb   198 st	r3,r1		; store new last value
025b0000 //C 000bc   199 sz	r5
21f200c1 //C 000bd   200 jnz	check_release
//R 000bd #16 check_release 000000c1
024b0000 //C 000be   202 sz	r4		; check new port value
//N check_push S38738b71c88c
11f200c5 //C 000bf   203 jz	pressed_false
//R 000bf #16 pressed_false 000000c5
21f200c3 //C 000c0   204 jnz	pressed_true
//R 000c0 #16 pressed_true 000000c3
024b0000 //C 000c1   206 sz	r4
//N check_release S38738b71c88c
21f200c5 //C 000c2   207 jnz	pressed_false
//R 000c2 #16 pressed_false 000000c5
020c0000 //C 000c3   210 sec
//N pressed_true S38738b71c88c
01f200c6 //C 000c4   211 jmp	pressed_end
//R 000c4 #16 pressed_end 000000c6
020d0000 //C 000c5   213 clc
//N pressed_false S38738b71c88c
0f5d0000 //C 000c6   215 pop	r5
//N pressed_end S38738b71c88c
0f4d0000 //C 000c7   216 pop	r4
0f3d0000 //C 000c8   217 pop	r3
0f2d0000 //C 000c9   218 pop	r2
0f1d0000 //C 000ca   219 pop	r1
0ffd0000 //C 000cb   220 pop	pc
0d1d0000 //C 000cc   225 push	r1
//G btn_restart
0710ff20 //C 000cd   226 ld	r1,GPIO.BTN
//R 000cd #16 GPIO.BTN 0000ff20
06100088 //C 000ce   227 st	r1,last_btn
//R 000ce #16 last_btn 00000088
0f1d0000 //C 000cf   228 pop	r1
00f00e00 //C 000d0   229 ret
0d1d0000 //C 000d1   233 push	r1
//G sw_restart
0710ff10 //C 000d2   234 ld	r1,GPIO.SW
//R 000d2 #16 GPIO.SW 0000ff10
06100089 //C 000d3   235 st	r1,last_sw
//R 000d3 #16 last_sw 00000089
0f1d0000 //C 000d4   236 pop	r1
00f00e00 //C 000d5   237 ret
//P Saed5ad4c4c92 _lib_segment_btn
0ded0000 //C 000d6   250 push	lr
//G btn_posedge
0400007d //C 000d7   251 call	_nr_to_mask
//R 000d7 #24 _nr_to_mask 0000007d
0d1d0000 //C 000d8   252 push	r1
01120000 //C 000d9   253 mvzl	r1,0
020d0000 //C 000da   254 clc
0400008e //C 000db   255 call	_lib_edge_detect
//R 000db #24 _lib_edge_detect 0000008e
0f1d0000 //C 000dc   256 pop	r1
0ffd0000 //C 000dd   257 pop	pc
0ded0000 //C 000de   266 push	lr
//G btn_negedge
0400007d //C 000df   267 call	_nr_to_mask
//R 000df #24 _nr_to_mask 0000007d
0d1d0000 //C 000e0   268 push	r1
01120001 //C 000e1   269 mvzl	r1,1
020d0000 //C 000e2   270 clc
0400008e //C 000e3   271 call	_lib_edge_detect
//R 000e3 #24 _lib_edge_detect 0000008e
0f1d0000 //C 000e4   272 pop	r1
0ffd0000 //C 000e5   273 pop	pc
0ded0000 //C 000e6   282 push	lr
//G btn_get
0d1d0000 //C 000e7   283 push	r1
0400007d //C 000e8   284 call	_nr_to_mask
//R 000e8 #24 _nr_to_mask 0000007d
0710ff20 //C 000e9   285 ld	r1,GPIO.BTN
//R 000e9 #16 GPIO.BTN 0000ff20
001f0000 //C 000ea   286 and	r1,r0
120d0000 //C 000eb   287 Z clc
220c0000 //C 000ec   288 NZ sec
0f1d0000 //C 000ed   289 pop	r1
0ffd0000 //C 000ee   290 pop	pc
//H 584db228
//E
