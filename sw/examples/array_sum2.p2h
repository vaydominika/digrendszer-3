//U P2

//; SEGMENTS
//T S293d8fdbaa47 _lib_segment_div noload=0 abs=0
//T S8e7b3d203072 _lib_segment_rand noload=0 abs=0
//T Sbe1a78b9d15e _lib_segment_str_chr noload=0 abs=0
//T S0e483de54bb5 _lib_segment_regs_of_gpio noload=0 abs=0
//T S33927ab86900 _lib_segment_regs_of_uart noload=0 abs=0
//T S602f0726a14b _lib_segment_character_fn noload=0 abs=0
//T S847a5c4e618b _lib_segment_isdigit noload=0 abs=0
//T S9a7f1c151839 _lib_segment_islower noload=0 abs=0
//T S154e11ca77b1 _lib_segment_isupper noload=0 abs=0
//T Sf1f3b6b1f10a _lib_segment_isalpha noload=0 abs=0
//T Sb95a2b17779b _lib_segment_isalnum noload=0 abs=0
//T S503b4c87a8c4 _lib_segment_putchar noload=0 abs=0
//T S23554af9f140 _lib_segment_eprints noload=0 abs=0
//T Sb401aee44acb _lib_segment_eprintf noload=0 abs=0
//T Sedd6b6695436 _lib_segment_input_avail noload=0 abs=0
//T S84a19e8ae015 _lib_segment_read noload=0 abs=0
//T Sd14c348df59b _lib_segment_pmon noload=0 abs=0
//T S45ec84dfaab0 _lib_segment_nr_to_mask noload=0 abs=0
//T S38738b71c88c _lib_segment_edge noload=0 abs=0
//T Saed5ad4c4c92 _lib_segment_btn noload=0 abs=0

//; SYMBOLS
//= adat_db adat_db 0000000a - _
//L vege vege 00000007 - _
//L szum szum 00000008 - _
//L cikl cikl 0000000c - _
//L eredmeny eredmeny 00000014 - _
//L adatok adatok 00000015 - _
//L verem_vege verem_vege 000000e7 - _
//L div div 000000e8 S293d8fdbaa47 _
//L S293d8fdbaa47div_dok div_dok 000000ef s S293d8fdbaa47
//L S293d8fdbaa47div_dummy div_dummy 000000ef s S293d8fdbaa47
//L S293d8fdbaa47div_cyc div_cyc 000000f3 s S293d8fdbaa47
//L S293d8fdbaa47div_cyc_next div_cyc_next 000000fe s S293d8fdbaa47
//L S293d8fdbaa47div_ret div_ret 00000100 s S293d8fdbaa47
//L S8e7b3d203072seed seed 00000102 s S8e7b3d203072
//L srand srand 00000103 S8e7b3d203072 _
//L rand rand 00000105 S8e7b3d203072 _
//L S8e7b3d203072c1 c1 0000010b s S8e7b3d203072
//L S8e7b3d203072c2 c2 00000111 s S8e7b3d203072
//L S8e7b3d203072c3 c3 00000117 s S8e7b3d203072
//L str_chr str_chr 00000120 Sbe1a78b9d15e _
//= GPIO.PORTA GPIO.PORTA 0000ff00 S0e483de54bb5 _
//= GPIO.PORTB GPIO.PORTB 0000ff01 S0e483de54bb5 _
//= GPIO.PORTC GPIO.PORTC 0000ff02 S0e483de54bb5 _
//= GPIO.PORTD GPIO.PORTD 0000ff03 S0e483de54bb5 _
//= GPIOA.ODR GPIOA.ODR 0000ff00 S0e483de54bb5 _
//= GPIOB.ODR GPIOB.ODR 0000ff01 S0e483de54bb5 _
//= GPIOC.ODR GPIOC.ODR 0000ff02 S0e483de54bb5 _
//= GPIOD.ODR GPIOD.ODR 0000ff03 S0e483de54bb5 _
//= GPIO.7SEG GPIO.7SEG 0000ff00 S0e483de54bb5 _
//= GPIO.LED GPIO.LED 0000ff01 S0e483de54bb5 _
//= GPIO.PORTI GPIO.PORTI 0000ff20 S0e483de54bb5 _
//= GPIO.PORTJ GPIO.PORTJ 0000ff10 S0e483de54bb5 _
//= GPIOI.IDR GPIOI.IDR 0000ff20 S0e483de54bb5 _
//= GPIOJ.IDR GPIOJ.IDR 0000ff10 S0e483de54bb5 _
//= GPIO.BTN GPIO.BTN 0000ff20 S0e483de54bb5 _
//= GPIO.SW GPIO.SW 0000ff10 S0e483de54bb5 _
//= UART.DR UART.DR 0000ff40 S33927ab86900 _
//= UART.CTRL UART.CTRL 0000ff41 S33927ab86900 _
//= UART.RSTAT UART.RSTAT 0000ff42 S33927ab86900 _
//= UART.TSTAT UART.TSTAT 0000ff43 S33927ab86900 _
//= UART.CPB UART.CPB 0000ff44 S33927ab86900 _
//= UART.SREG0 UART.SREG0 0000ff4c S33927ab86900 _
//= UART.SREG1 UART.SREG1 0000ff4d S33927ab86900 _
//= UART.SREG2 UART.SREG2 0000ff4e S33927ab86900 _
//= UART.SREG3 UART.SREG3 0000ff4f S33927ab86900 _
//L _char_is_true _char_is_true 00000130 S602f0726a14b _
//L _char_is_false _char_is_false 00000132 S602f0726a14b _
//L isdigit isdigit 00000134 S847a5c4e618b _
//L islower islower 00000139 S9a7f1c151839 _
//L isupper isupper 0000013e S154e11ca77b1 _
//L isalpha isalpha 00000143 Sf1f3b6b1f10a _
//L isalnum isalnum 00000148 Sb95a2b17779b _
//L putchar putchar 0000014d S503b4c87a8c4 _
//L eprints eprints 0000014e S23554af9f140 _
//L eprintf eprintf 0000014f Sb401aee44acb _
//L input_avail input_avail 00000150 Sedd6b6695436 _
//L read read 00000151 S84a19e8ae015 _
//= _pm_callin _pm_callin 0000f000 Sd14c348df59b _
//= _pm_enter_by_uart _pm_enter_by_uart 0000f001 Sd14c348df59b _
//= _pm_getchar _pm_getchar 0000f002 Sd14c348df59b _
//= _pm_version _pm_version 0000f003 Sd14c348df59b _
//= _pm_itobcd _pm_itobcd 0000f004 Sd14c348df59b _
//= _pm_cold_start _pm_cold_start 0000f005 Sd14c348df59b _
//= _pm_strchr _pm_strchr 0000f006 Sd14c348df59b _
//= _pm_streq _pm_streq 0000f007 Sd14c348df59b _
//= _pm_check_uart _pm_check_uart 0000f008 Sd14c348df59b _
//= _pm_input_avail _pm_input_avail 0000f008 Sd14c348df59b _
//= _pm_hexchar2value _pm_hexchar2value 0000f009 Sd14c348df59b _
//= _pm_value2hexchar _pm_value2hexchar 0000f00a Sd14c348df59b _
//= _pm_htoi _pm_htoi 0000f00b Sd14c348df59b _
//= _pm_strieq _pm_strieq 0000f00c Sd14c348df59b _
//= _pm_read _pm_read 0000f00d Sd14c348df59b _
//= _pm_putchar _pm_putchar 0000f00e Sd14c348df59b _
//= _pm_prints _pm_prints 0000f00f Sd14c348df59b _
//= _pm_printsnl _pm_printsnl 0000f010 Sd14c348df59b _
//= _pm_print_vhex _pm_print_vhex 0000f011 Sd14c348df59b _
//= _pm_pes _pm_pes 0000f012 Sd14c348df59b _
//= _pm_printd _pm_printd 0000f013 Sd14c348df59b _
//= _pm_printf _pm_printf 0000f014 Sd14c348df59b _
//= _pm_pesf _pm_pesf 0000f015 Sd14c348df59b _
//= _pm_ascii2seg _pm_ascii2seg 0000f016 Sd14c348df59b _
//L monitor monitor 00000153 Sd14c348df59b _
//L monitor_by_uart monitor_by_uart 00000154 Sd14c348df59b _
//L monitor_by_button monitor_by_button 00000155 Sd14c348df59b _
//L monitor_version monitor_version 0000015b Sd14c348df59b _
//L _nr_to_mask _nr_to_mask 00000161 S45ec84dfaab0 _
//L S45ec84dfaab0nr_to_mask_cyc nr_to_mask_cyc 00000164 s S45ec84dfaab0
//L S45ec84dfaab0nr_to_mask_ret nr_to_mask_ret 00000169 s S45ec84dfaab0
//L S38738b71c88clast_btn last_btn 0000016c s S38738b71c88c
//L S38738b71c88clast_sw last_sw 0000016d s S38738b71c88c
//L S38738b71c88clast_btn_down last_btn_down 0000016e s S38738b71c88c
//L S38738b71c88clast_sw_down last_sw_down 0000016f s S38738b71c88c
//L S38738b71c88clast_btn_inited last_btn_inited 00000170 s S38738b71c88c
//L S38738b71c88clast_sw_inited last_sw_inited 00000171 s S38738b71c88c
//L _lib_edge_detect _lib_edge_detect 00000172 S38738b71c88c _
//L S38738b71c88cinit_btn init_btn 0000017a s S38738b71c88c
//L S38738b71c88cinit_sw init_sw 00000183 s S38738b71c88c
//L S38738b71c88cpressed_inited pressed_inited 0000018c s S38738b71c88c
//L S38738b71c88cch_btn ch_btn 0000018f s S38738b71c88c
//L S38738b71c88cch_sw ch_sw 00000192 s S38738b71c88c
//L S38738b71c88ccheck_push check_push 000001a2 s S38738b71c88c
//L S38738b71c88ccheck_release check_release 000001a5 s S38738b71c88c
//L S38738b71c88cpressed_true pressed_true 000001a7 s S38738b71c88c
//L S38738b71c88cpressed_false pressed_false 000001a9 s S38738b71c88c
//L S38738b71c88cpressed_end pressed_end 000001aa s S38738b71c88c
//L btn_restart btn_restart 000001b0 S38738b71c88c _
//L sw_restart sw_restart 000001b5 S38738b71c88c _
//L btn_posedge btn_posedge 000001ba Saed5ad4c4c92 _
//L btn_negedge btn_negedge 000001c2 Saed5ad4c4c92 _
//L btn_get btn_get 000001ca Saed5ad4c4c92 _

//; CODE
//P -
//F array_sum2.asm
01d200e7 //C 00001     9 mvzl	sp,verem_vege	; stack pointer kezdoertek
//R 00001 #16 verem_vege 000000e7
04000008 //C 00002    10 call	szum		; szubrutin a muvelethez
//R 00002 #24 szum 00000008
01120014 //C 00003    11 mvzl	r1,eredmeny	; az eredmeny vizsgalata
//R 00003 #16 eredmeny 00000014
0e010000 //C 00004    12 ld	r0,r1		; betoltes
0112ff00 //C 00005    13 mvzl	r1,GPIO.7SEG
//R 00005 #16 GPIO.7SEG 0000ff00
0c010000 //C 00006    14 st	r0,r1		; kiiras a kijelzon
04000153 //C 00007    15 vege:	call	monitor		; itt leall a program
//R 00007 #24 monitor 00000153
//G vege
0ded0000 //C 00008    18 push	lr		; visszateresi cim mentese
//G szum
01120015 //C 00009    20 ldl0	r1,adatok	; mutato az adatokra
//R 00009 #16 adatok 00000015
0122000a //C 0000a    21 ldl0	r2,adat_db	; ciklus valtozo (adatok szama)
//R 0000a #16 adat_db 0000000a
01320000 //C 0000b    22 ldl0	r3,0		; resz osszeg
0e410000 //C 0000c    24 cikl:	ld	r4,r1		; adat beolvasasa
//G cikl
00340400 //C 0000d    25 add	r3,r4		; hozzaadas a reszosszeghez
01140001 //C 0000e    26 inc	r1		; mutato a kovetkezo adatra
0124ffff //C 0000f    27 dec	r2		; ciklusvaltozo csokkentese
21f2000c //C 00010    28 jnz	cikl		; ugras vissza, ha meg nincs kesz
//R 00010 #16 cikl 0000000c
01120014 //C 00011    30 ldl0	r1,eredmeny	; az eredmeny tarolasi helye
//R 00011 #16 eredmeny 00000014
0c410000 //C 00012    31 st	r4,r1		; az eredmeny tarolasa
0ffd0000 //C 00013    33 pop	pc		; visszateresi cim betoltese
00000000 //C 00014    37 ds	1		; hely az eredmenynek
//+ 00000001
//G eredmeny
0000007b //C 00015    39 dd	123
//G adatok
00000221 //C 00016    40 dd	545
fffffa69 //C 00017    41 dd	-1431
00002344 //C 00018    42 dd	0x2344
ffffabce //C 00019    43 dd	-21554
0000007b //C 0001a    44 dd	123
000002af //C 0001b    45 dd	687
00000086 //C 0001c    46 dd	0x86
00000d80 //C 0001d    47 dd	3456
ffffffe9 //C 0001e    48 dd	-23
00000000 //C 0001f    50 ds	200
//+ 000000c8
00000000 //C 000e7    52 db	0
//G verem_vege
//F math.asm
//P S293d8fdbaa47 _lib_segment_div
0ded0000 //C 000e8    15 push	lr
//G div
0d6d0000 //C 000e9    16 push	r6
021b0000 //C 000ea    18 sz	r1
21f200ef //C 000eb    19 NZ jmp	div_dok
//R 000eb #16 div_dok 000000ef
00400000 //C 000ec    20 mov	r4,r0		; div by zero
01520000 //C 000ed    21 mvzl	r5,0x0
01f20100 //C 000ee    22 jmp	div_ret
//R 000ee #16 div_ret 00000100
01420000 //C 000ef    25 mvzl	r4,0		; Q= 0
//N div_dok S293d8fdbaa47
//N div_dummy S293d8fdbaa47
01520000 //C 000f0    26 mvzl	r5,0		; R= 0
01618000 //C 000f1    27 mvh	r6,0x80000000	; m= 1<<31
01600000 //C 000f2    28 mvl	r6,0x80000000
026b0000 //C 000f3    30 sz	r6
//N div_cyc S293d8fdbaa47
11f20100 //C 000f4    31 Z jmp	div_ret
//R 000f4 #16 div_ret 00000100
02580000 //C 000f5    32 shl	r5		; r<<= 1
000c0600 //C 000f6    33 test	r0,r6		; if (n&m)
215d0001 //C 000f7    34 NZ or	r5,1		; r|= 1
00580100 //C 000f8    35 cmp	r5,r1		; if (r>=d)
41f200fe //C 000f9    36 LO jmp	div_cyc_next
//R 000f9 #16 div_cyc_next 000000fe
00560100 //C 000fa    37 sub	r5,r1		; r-= d
004d0600 //C 000fb    38 or	r4,r6		; q|= m
01f200fe //C 000fc    39 jmp	div_cyc_next
//R 000fc #16 div_cyc_next 000000fe
01f200f3 //C 000fd    40 jmp	div_cyc
//R 000fd #16 div_cyc 000000f3
02690000 //C 000fe    42 shr	r6		; m>>= 1
//N div_cyc_next S293d8fdbaa47
01f200f3 //C 000ff    43 jmp	div_cyc
//R 000ff #16 div_cyc 000000f3
0f6d0000 //C 00100    45 pop	r6
//N div_ret S293d8fdbaa47
0ffd0000 //C 00101    46 pop	pc
//P S8e7b3d203072 _lib_segment_rand
00000049 //C 00102    58 db	2127401289
//N seed S8e7b3d203072
06000102 //C 00103    65 st	r0,seed
//R 00103 #16 seed 00000102
//G srand
00f00e00 //C 00104    66 ret
0ded0000 //C 00105    72 push	lr
//G rand
0d0d0000 //C 00106    73 push	r0
0d2d0000 //C 00107    74 push	r2
07000102 //C 00108    76 ld	r0,seed
//R 00108 #16 seed 00000102
00400000 //C 00109    77 mov	r4,r0
0122000d //C 0010a    78 mvzl	r2,13
02480000 //C 0010b    79 c1:	shl	r4
//N c1 S8e7b3d203072
0124ffff //C 0010c    80 dec	r2
21f2010b //C 0010d    81 jnz	c1
//R 0010d #16 c1 0000010b
000e0400 //C 0010e    82 xor	r0,r4
00400000 //C 0010f    83 mov	r4,r0
01220011 //C 00110    84 mvzl	r2,17
02490000 //C 00111    85 c2:	shr	r4
//N c2 S8e7b3d203072
0124ffff //C 00112    86 dec	r2
21f20111 //C 00113    87 jnz	c2
//R 00113 #16 c2 00000111
000e0400 //C 00114    88 xor	r0,r4
00400000 //C 00115    89 mov	r4,r0
01220005 //C 00116    90 mvzl	r2,5
02480000 //C 00117    91 c3:	shl	r4
//N c3 S8e7b3d203072
0124ffff //C 00118    92 dec	r2
21f20117 //C 00119    93 jnz	c3
//R 00119 #16 c3 00000117
000e0400 //C 0011a    94 xor	r0,r4
06000102 //C 0011b    95 st	r0,seed
//R 0011b #16 seed 00000102
00400000 //C 0011c    97 mov	r4,r0
0f2d0000 //C 0011d    99 pop	r2
0f0d0000 //C 0011e   100 pop	r0
0ffd0000 //C 0011f   101 pop	pc
//F str.asm
//P Sbe1a78b9d15e _lib_segment_str_chr
020b0000 //C 00120    94 sz	r0		; check NULL pointer
//G str_chr
120d0000 //C 00121    95 Z clc
10f00e00 //C 00122    96 Z ret
02100000 //C 00123    97 zeb	r1		; prepare character
0ded0000 //C 00124    98 push	lr
0d1d0000 //C 00125    99 push	r1
0d2d0000 //C 00126   100 push	r2
00400000 //C 00127   101 mov	r4,r0
00000100 //C 00128   102 mov	r0,r1
00100400 //C 00129   103 mov	r1,r4
0400f006 //C 0012a   104 call	_pm_strchr
//R 0012a #24 _pm_strchr 0000f006
00400100 //C 0012b   105 mov	r4,r1
00500200 //C 0012c   106 mov	r5,r2
0f2d0000 //C 0012d   107 pop	r2
0f1d0000 //C 0012e   108 pop	r1
0ffd0000 //C 0012f   109 pop	pc
//F char.asm
//P S602f0726a14b _lib_segment_character_fn
020c0000 //C 00130    22 sec
//G _char_is_true
00f00e00 //C 00131    23 ret
020d0000 //C 00132    25 clc
//G _char_is_false
00f00e00 //C 00133    26 ret
//P S847a5c4e618b _lib_segment_isdigit
01080030 //C 00134    37 cmp	R0,'0'
//G isdigit
41f20132 //C 00135    38 ULT jmp	_char_is_false
//R 00135 #16 _char_is_false 00000132
01080039 //C 00136    39 cmp	R0,'9'
91f20132 //C 00137    40 UGT jmp	_char_is_false
//R 00137 #16 _char_is_false 00000132
01f20130 //C 00138    41 jmp _char_is_true
//R 00138 #16 _char_is_true 00000130
//P S9a7f1c151839 _lib_segment_islower
01080061 //C 00139    53 cmp	r0,'a'
//G islower
41f20132 //C 0013a    54 ULT jmp	_char_is_false
//R 0013a #16 _char_is_false 00000132
0108007a //C 0013b    55 cmp	r0,'z'
91f20132 //C 0013c    56 UGT jmp	_char_is_false
//R 0013c #16 _char_is_false 00000132
01f20130 //C 0013d    57 jmp	_char_is_true
//R 0013d #16 _char_is_true 00000130
//P S154e11ca77b1 _lib_segment_isupper
01080041 //C 0013e    69 cmp	r0,'A'
//G isupper
41f20132 //C 0013f    70 ULT jmp	_char_is_false
//R 0013f #16 _char_is_false 00000132
0108005a //C 00140    71 cmp	r0,'Z'
91f20132 //C 00141    72 UGT jmp	_char_is_false
//R 00141 #16 _char_is_false 00000132
01f20130 //C 00142    73 jmp	_char_is_true
//R 00142 #16 _char_is_true 00000130
//P Sf1f3b6b1f10a _lib_segment_isalpha
0ded0000 //C 00143    85 push	lr
//G isalpha
04000139 //C 00144    86 call	islower
//R 00144 #24 islower 00000139
3ffd0000 //C 00145    87 C pop	pc
0400013e //C 00146    88 call	isupper
//R 00146 #24 isupper 0000013e
0ffd0000 //C 00147    89 pop	pc
//P Sb95a2b17779b _lib_segment_isalnum
0ded0000 //C 00148   101 push	lr
//G isalnum
04000143 //C 00149   102 call	isalpha
//R 00149 #24 isalpha 00000143
3ffd0000 //C 0014a   103 C pop	pc
04000134 //C 0014b   104 call	isdigit
//R 0014b #24 isdigit 00000134
0ffd0000 //C 0014c   105 pop	pc
//F inout.asm
//P S503b4c87a8c4 _lib_segment_putchar
01f2f00e //C 0014d    24 jmp	_pm_putchar
//R 0014d #16 _pm_putchar 0000f00e
//G putchar
//P S23554af9f140 _lib_segment_eprints
01f2f012 //C 0014e    54 jmp	_pm_pes
//R 0014e #16 _pm_pes 0000f012
//G eprints
//P Sb401aee44acb _lib_segment_eprintf
01f2f015 //C 0014f    66 jmp	_pm_pesf
//R 0014f #16 _pm_pesf 0000f015
//G eprintf
//P Sedd6b6695436 _lib_segment_input_avail
01f2f008 //C 00150    72 jmp	_pm_check_uart
//R 00150 #16 _pm_check_uart 0000f008
//G input_avail
//P S84a19e8ae015 _lib_segment_read
0740ff40 //C 00151    89 ld	r4,UART.DR
//R 00151 #16 UART.DR 0000ff40
//G read
00f00e00 //C 00152    90 ret
//F mon.asm
//P Sd14c348df59b _lib_segment_pmon
01f2f000 //C 00153    40 jmp	_pm_callin
//R 00153 #16 _pm_callin 0000f000
//G monitor
01f2f001 //C 00154    44 jmp	_pm_enter_by_uart
//R 00154 #16 _pm_enter_by_uart 0000f001
//G monitor_by_uart
0ded0000 //C 00155    48 push	lr
//G monitor_by_button
040001ba //C 00156    49 call	btn_posedge
//R 00156 #24 btn_posedge 000001ba
4ffd0000 //C 00157    50 NC pop	pc
04000153 //C 00158    51 call	monitor
//R 00158 #24 monitor 00000153
040001b0 //C 00159    52 call	btn_restart
//R 00159 #24 btn_restart 000001b0
0ffd0000 //C 0015a    53 pop	pc
0ded0000 //C 0015b    57 push	lr
//G monitor_version
0d0d0000 //C 0015c    58 push	r0
0400f003 //C 0015d    59 call	_pm_version
//R 0015d #24 _pm_version 0000f003
00400000 //C 0015e    60 mov	r4,r0
0f0d0000 //C 0015f    61 pop	r0
0ffd0000 //C 00160    62 pop	pc
//F bsp.asm
//P S45ec84dfaab0 _lib_segment_nr_to_mask
0d1d0000 //C 00161    26 push	r1
//G _nr_to_mask
010b001f //C 00162    27 btst	r0,0x1f		; max nr is 31
01120001 //C 00163    28 mvzl	r1,1		; mask for nr==0
020b0000 //C 00164    30 sz	r0		; is nr zero?
//N nr_to_mask_cyc S45ec84dfaab0
11f20169 //C 00165    31 jz	nr_to_mask_ret	; if yes, go out
//R 00165 #16 nr_to_mask_ret 00000169
02180000 //C 00166    32 shl	r1		; shift mask up
0104ffff //C 00167    33 dec	r0		; decrement nr
01f20164 //C 00168    34 jmp	nr_to_mask_cyc	; check for zero
//R 00168 #16 nr_to_mask_cyc 00000164
00000100 //C 00169    36 mov	r0,r1		; return mask in R0
//N nr_to_mask_ret S45ec84dfaab0
0f1d0000 //C 0016a    37 pop	r1
00f00e00 //C 0016b    38 ret
//P S38738b71c88c _lib_segment_edge
00000000 //C 0016c   120 ds	1
//+ 00000001
//N last_btn S38738b71c88c
00000000 //C 0016d   122 ds	1
//+ 00000001
//N last_sw S38738b71c88c
00000000 //C 0016e   124 ds	1
//+ 00000001
//N last_btn_down S38738b71c88c
00000000 //C 0016f   126 ds	1
//+ 00000001
//N last_sw_down S38738b71c88c
00000000 //C 00170   128 db	0
//N last_btn_inited S38738b71c88c
00000000 //C 00171   130 db	0
//N last_sw_inited S38738b71c88c
0ded0000 //C 00172   141 push	lr
//G _lib_edge_detect
0d1d0000 //C 00173   142 push	r1
0d2d0000 //C 00174   143 push	r2
0d3d0000 //C 00175   144 push	r3
0d4d0000 //C 00176   145 push	r4
0d5d0000 //C 00177   146 push	r5
00500100 //C 00178   148 mov	r5,r1		; what edge to check
31f20183 //C 00179   149 C jmp	init_sw
//R 00179 #16 init_sw 00000183
07100170 //C 0017a   151 ld	r1,last_btn_inited
//R 0017a #16 last_btn_inited 00000170
//N init_btn S38738b71c88c
021b0000 //C 0017b   152 sz	r1
21f2018c //C 0017c   153 jnz	pressed_inited
//R 0017c #16 pressed_inited 0000018c
01120001 //C 0017d   154 mvzl	r1,1
06100170 //C 0017e   155 st	r1,last_btn_inited
//R 0017e #16 last_btn_inited 00000170
0710ff20 //C 0017f   156 ld	r1,GPIO.BTN
//R 0017f #16 GPIO.BTN 0000ff20
0610016c //C 00180   157 st	r1,last_btn
//R 00180 #16 last_btn 0000016c
0610016e //C 00181   158 st	r1,last_btn_down
//R 00181 #16 last_btn_down 0000016e
01f201a9 //C 00182   159 jmp	pressed_false
//R 00182 #16 pressed_false 000001a9
07100171 //C 00183   161 ld	r1,last_sw_inited
//R 00183 #16 last_sw_inited 00000171
//N init_sw S38738b71c88c
021b0000 //C 00184   162 sz	r1
21f2018c //C 00185   163 jnz	pressed_inited
//R 00185 #16 pressed_inited 0000018c
01120001 //C 00186   164 mvzl	r1,1
06100171 //C 00187   165 st	r1,last_sw_inited
//R 00187 #16 last_sw_inited 00000171
0710ff10 //C 00188   166 ld	r1,GPIO.SW
//R 00188 #16 GPIO.SW 0000ff10
0610016d //C 00189   167 st	r1,last_sw
//R 00189 #16 last_sw 0000016d
0610016f //C 0018a   168 st	r1,last_sw_down
//R 0018a #16 last_sw_down 0000016f
01f201a9 //C 0018b   169 jmp	pressed_false
//R 0018b #16 pressed_false 000001a9
4122ff20 //C 0018c   173 NC mvzl	r2,GPIO.BTN
//R 0018c #16 GPIO.BTN 0000ff20
//N pressed_inited S38738b71c88c
3122ff10 //C 0018d   174 C mvzl	r2,GPIO.SW
//R 0018d #16 GPIO.SW 0000ff10
31f20192 //C 0018e   175 jc	ch_sw
//R 0018e #16 ch_sw 00000192
025b0000 //C 0018f   177 sz	r5
//N ch_btn S38738b71c88c
1112016c //C 00190   178 Z mvzl	r1,last_btn
//R 00190 #16 last_btn 0000016c
2112016e //C 00191   179 NZ mvzl	r1,last_btn_down
//R 00191 #16 last_btn_down 0000016e
025b0000 //C 00192   181 sz	r5
//N ch_sw S38738b71c88c
1112016d //C 00193   182 Z mvzl	r1,last_sw
//R 00193 #16 last_sw 0000016d
2112016f //C 00194   183 NZ mvzl	r1,last_sw_down
//R 00194 #16 last_sw_down 0000016f
0e310000 //C 00195   187 ld	r3,r1
0e420000 //C 00196   188 ld	r4,r2
003f0000 //C 00197   190 and	r3,r0		; masked last
004f0000 //C 00198   191 and	r4,r0		; masked port
00380400 //C 00199   192 cmp	r3,r4
11f201a9 //C 0019a   193 EQ jmp	pressed_false
//R 0019a #16 pressed_false 000001a9
02040000 //C 0019b   194 not	r0		; negated mask
0e310000 //C 0019c   195 ld	r3,r1		; original last
003f0000 //C 0019d   196 and	r3,r0		; clear checked bit
003d0400 //C 0019e   197 or	r3,r4		; or with masked port
0c310000 //C 0019f   198 st	r3,r1		; store new last value
025b0000 //C 001a0   199 sz	r5
21f201a5 //C 001a1   200 jnz	check_release
//R 001a1 #16 check_release 000001a5
024b0000 //C 001a2   202 sz	r4		; check new port value
//N check_push S38738b71c88c
11f201a9 //C 001a3   203 jz	pressed_false
//R 001a3 #16 pressed_false 000001a9
21f201a7 //C 001a4   204 jnz	pressed_true
//R 001a4 #16 pressed_true 000001a7
024b0000 //C 001a5   206 sz	r4
//N check_release S38738b71c88c
21f201a9 //C 001a6   207 jnz	pressed_false
//R 001a6 #16 pressed_false 000001a9
020c0000 //C 001a7   210 sec
//N pressed_true S38738b71c88c
01f201aa //C 001a8   211 jmp	pressed_end
//R 001a8 #16 pressed_end 000001aa
020d0000 //C 001a9   213 clc
//N pressed_false S38738b71c88c
0f5d0000 //C 001aa   215 pop	r5
//N pressed_end S38738b71c88c
0f4d0000 //C 001ab   216 pop	r4
0f3d0000 //C 001ac   217 pop	r3
0f2d0000 //C 001ad   218 pop	r2
0f1d0000 //C 001ae   219 pop	r1
0ffd0000 //C 001af   220 pop	pc
0d1d0000 //C 001b0   225 push	r1
//G btn_restart
0710ff20 //C 001b1   226 ld	r1,GPIO.BTN
//R 001b1 #16 GPIO.BTN 0000ff20
0610016c //C 001b2   227 st	r1,last_btn
//R 001b2 #16 last_btn 0000016c
0f1d0000 //C 001b3   228 pop	r1
00f00e00 //C 001b4   229 ret
0d1d0000 //C 001b5   233 push	r1
//G sw_restart
0710ff10 //C 001b6   234 ld	r1,GPIO.SW
//R 001b6 #16 GPIO.SW 0000ff10
0610016d //C 001b7   235 st	r1,last_sw
//R 001b7 #16 last_sw 0000016d
0f1d0000 //C 001b8   236 pop	r1
00f00e00 //C 001b9   237 ret
//P Saed5ad4c4c92 _lib_segment_btn
0ded0000 //C 001ba   250 push	lr
//G btn_posedge
04000161 //C 001bb   251 call	_nr_to_mask
//R 001bb #24 _nr_to_mask 00000161
0d1d0000 //C 001bc   252 push	r1
01120000 //C 001bd   253 mvzl	r1,0
020d0000 //C 001be   254 clc
04000172 //C 001bf   255 call	_lib_edge_detect
//R 001bf #24 _lib_edge_detect 00000172
0f1d0000 //C 001c0   256 pop	r1
0ffd0000 //C 001c1   257 pop	pc
0ded0000 //C 001c2   266 push	lr
//G btn_negedge
04000161 //C 001c3   267 call	_nr_to_mask
//R 001c3 #24 _nr_to_mask 00000161
0d1d0000 //C 001c4   268 push	r1
01120001 //C 001c5   269 mvzl	r1,1
020d0000 //C 001c6   270 clc
04000172 //C 001c7   271 call	_lib_edge_detect
//R 001c7 #24 _lib_edge_detect 00000172
0f1d0000 //C 001c8   272 pop	r1
0ffd0000 //C 001c9   273 pop	pc
0ded0000 //C 001ca   282 push	lr
//G btn_get
0d1d0000 //C 001cb   283 push	r1
04000161 //C 001cc   284 call	_nr_to_mask
//R 001cc #24 _nr_to_mask 00000161
0710ff20 //C 001cd   285 ld	r1,GPIO.BTN
//R 001cd #16 GPIO.BTN 0000ff20
001f0000 //C 001ce   286 and	r1,r0
120d0000 //C 001cf   287 Z clc
220c0000 //C 001d0   288 NZ sec
0f1d0000 //C 001d1   289 pop	r1
0ffd0000 //C 001d2   290 pop	pc
//H d560cd23
//E
