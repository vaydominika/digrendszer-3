//U P2

//; SEGMENTS
//T S293d8fdbaa47 _lib_segment_div noload=0 abs=0
//T S8e7b3d203072 _lib_segment_rand noload=0 abs=0
//T S379a2415f157 _lib_segment_dtoi noload=0 abs=0
//T Sbe1a78b9d15e _lib_segment_str_chr noload=0 abs=0
//T S035d1872e63c _lib_segment_regs_of_clock noload=0 abs=0
//T S0e483de54bb5 _lib_segment_regs_of_gpio noload=0 abs=0
//T S33927ab86900 _lib_segment_regs_of_uart noload=0 abs=0
//T S602f0726a14b _lib_segment_character_fn noload=0 abs=0
//T S847a5c4e618b _lib_segment_isdigit noload=0 abs=0
//T S9a7f1c151839 _lib_segment_islower noload=0 abs=0
//T S154e11ca77b1 _lib_segment_isupper noload=0 abs=0
//T Sf1f3b6b1f10a _lib_segment_isalpha noload=0 abs=0
//T Sb95a2b17779b _lib_segment_isalnum noload=0 abs=0
//T S503b4c87a8c4 _lib_segment_putchar noload=0 abs=0
//T S23554af9f140 _lib_segment_eprints noload=0 abs=0
//T Sb401aee44acb _lib_segment_eprintf noload=0 abs=0
//T Sedd6b6695436 _lib_segment_input_avail noload=0 abs=0
//T S84a19e8ae015 _lib_segment_read noload=0 abs=0
//T S076f4212ff14 _lib_segment_line_editor noload=0 abs=0
//T Sd14c348df59b _lib_segment_pmon noload=0 abs=0
//T S45ec84dfaab0 _lib_segment_nr_to_mask noload=0 abs=0
//T S38738b71c88c _lib_segment_edge noload=0 abs=0
//T Saed5ad4c4c92 _lib_segment_btn noload=0 abs=0
//T Sf0e9c0689ca5 _lib_segment_sw noload=0 abs=0

//; SYMBOLS
//L main main 00000001 - _
//L cycle cycle 0000000b - _
//L frequ frequ 0000000f - _
//L ptime ptime 00000010 - _
//L buffer buffer 00000011 - _
//L fr2pt fr2pt 00000039 - _
//L blink blink 0000003f - _
//L do_blink do_blink 00000043 - _
//L blink_ret blink_ret 00000048 - _
//L cmd_quit cmd_quit 00000049 - _
//L user_input user_input 0000004e - _
//L process_input process_input 00000051 - _
//L ui_good ui_good 0000005e - _
//L ui_wrong ui_wrong 00000063 - _
//L ui_done ui_done 0000007b - _
//L ui_ret ui_ret 0000007d - _
//L prompt prompt 0000007e - _
//L btn_press btn_press 000000a4 - _
//L stack stack 00000111 - _
//L div div 00000112 S293d8fdbaa47 _
//L S293d8fdbaa47div_dok div_dok 00000119 s S293d8fdbaa47
//L S293d8fdbaa47div_dummy div_dummy 00000119 s S293d8fdbaa47
//L S293d8fdbaa47div_cyc div_cyc 0000011d s S293d8fdbaa47
//L S293d8fdbaa47div_cyc_next div_cyc_next 00000128 s S293d8fdbaa47
//L S293d8fdbaa47div_ret div_ret 0000012a s S293d8fdbaa47
//L S8e7b3d203072seed seed 0000012c s S8e7b3d203072
//L srand srand 0000012d S8e7b3d203072 _
//L rand rand 0000012f S8e7b3d203072 _
//L S8e7b3d203072c1 c1 00000135 s S8e7b3d203072
//L S8e7b3d203072c2 c2 0000013b s S8e7b3d203072
//L S8e7b3d203072c3 c3 00000141 s S8e7b3d203072
//L dtoi dtoi 0000014a S379a2415f157 _
//L S379a2415f157dtoi_cyc dtoi_cyc 00000155 s S379a2415f157
//L S379a2415f157dtoi_byte dtoi_byte 00000159 s S379a2415f157
//L S379a2415f157dtoi_true dtoi_true 00000165 s S379a2415f157
//L S379a2415f157dtoi_false dtoi_false 00000167 s S379a2415f157
//L S379a2415f157dtoi_ret dtoi_ret 00000168 s S379a2415f157
//L str_chr str_chr 0000016e Sbe1a78b9d15e _
//= CLOCK.CLOCK CLOCK.CLOCK 0000ff50 S035d1872e63c _
//= CLOCK.CLK CLOCK.CLK 0000ff50 S035d1872e63c _
//= CLOCK.PRE CLOCK.PRE 0000ff51 S035d1872e63c _
//= CLOCK.BCNT2 CLOCK.BCNT2 0000ff52 S035d1872e63c _
//= CLOCK.BCNT3 CLOCK.BCNT3 0000ff53 S035d1872e63c _
//= CLOCK.BCNT4 CLOCK.BCNT4 0000ff54 S035d1872e63c _
//= CLOCK.BCNT5 CLOCK.BCNT5 0000ff55 S035d1872e63c _
//= CLOCK.BCNT6 CLOCK.BCNT6 0000ff56 S035d1872e63c _
//= CLOCK.BCNT7 CLOCK.BCNT7 0000ff57 S035d1872e63c _
//= CLOCK.BCNT8 CLOCK.BCNT8 0000ff58 S035d1872e63c _
//= CLOCK.BCNT9 CLOCK.BCNT9 0000ff59 S035d1872e63c _
//= CLOCK.BCNT10 CLOCK.BCNT10 0000ff5a S035d1872e63c _
//= CLOCK.BCNT11 CLOCK.BCNT11 0000ff5b S035d1872e63c _
//= CLOCK.BCNT12 CLOCK.BCNT12 0000ff5c S035d1872e63c _
//= CLOCK.BCNT13 CLOCK.BCNT13 0000ff5d S035d1872e63c _
//= CLOCK.BCNT14 CLOCK.BCNT14 0000ff5e S035d1872e63c _
//= CLOCK.BCNT15 CLOCK.BCNT15 0000ff5f S035d1872e63c _
//= GPIO.PORTA GPIO.PORTA 0000ff00 S0e483de54bb5 _
//= GPIO.PORTB GPIO.PORTB 0000ff01 S0e483de54bb5 _
//= GPIO.PORTC GPIO.PORTC 0000ff02 S0e483de54bb5 _
//= GPIO.PORTD GPIO.PORTD 0000ff03 S0e483de54bb5 _
//= GPIOA.ODR GPIOA.ODR 0000ff00 S0e483de54bb5 _
//= GPIOB.ODR GPIOB.ODR 0000ff01 S0e483de54bb5 _
//= GPIOC.ODR GPIOC.ODR 0000ff02 S0e483de54bb5 _
//= GPIOD.ODR GPIOD.ODR 0000ff03 S0e483de54bb5 _
//= GPIO.7SEG GPIO.7SEG 0000ff00 S0e483de54bb5 _
//= GPIO.LED GPIO.LED 0000ff01 S0e483de54bb5 _
//= GPIO.PORTI GPIO.PORTI 0000ff20 S0e483de54bb5 _
//= GPIO.PORTJ GPIO.PORTJ 0000ff10 S0e483de54bb5 _
//= GPIOI.IDR GPIOI.IDR 0000ff20 S0e483de54bb5 _
//= GPIOJ.IDR GPIOJ.IDR 0000ff10 S0e483de54bb5 _
//= GPIO.BTN GPIO.BTN 0000ff20 S0e483de54bb5 _
//= GPIO.SW GPIO.SW 0000ff10 S0e483de54bb5 _
//= UART.DR UART.DR 0000ff40 S33927ab86900 _
//= UART.CTRL UART.CTRL 0000ff41 S33927ab86900 _
//= UART.RSTAT UART.RSTAT 0000ff42 S33927ab86900 _
//= UART.TSTAT UART.TSTAT 0000ff43 S33927ab86900 _
//= UART.CPB UART.CPB 0000ff44 S33927ab86900 _
//= UART.SREG0 UART.SREG0 0000ff4c S33927ab86900 _
//= UART.SREG1 UART.SREG1 0000ff4d S33927ab86900 _
//= UART.SREG2 UART.SREG2 0000ff4e S33927ab86900 _
//= UART.SREG3 UART.SREG3 0000ff4f S33927ab86900 _
//L _char_is_true _char_is_true 0000017e S602f0726a14b _
//L _char_is_false _char_is_false 00000180 S602f0726a14b _
//L isdigit isdigit 00000182 S847a5c4e618b _
//L islower islower 00000187 S9a7f1c151839 _
//L isupper isupper 0000018c S154e11ca77b1 _
//L isalpha isalpha 00000191 Sf1f3b6b1f10a _
//L isalnum isalnum 00000196 Sb95a2b17779b _
//L putchar putchar 0000019b S503b4c87a8c4 _
//L eprints eprints 0000019c S23554af9f140 _
//L eprintf eprintf 0000019d Sb401aee44acb _
//L input_avail input_avail 0000019e Sedd6b6695436 _
//L read read 0000019f S84a19e8ae015 _
//L le_init le_init 000001a1 S076f4212ff14 _
//L le_setbuf le_setbuf 000001a1 S076f4212ff14 _
//L le_start le_start 000001a8 S076f4212ff14 _
//L le_read le_read 000001b5 S076f4212ff14 _
//L tu_fgets tu_fgets 000001b5 S076f4212ff14 _
//L S076f4212ff14ler_got_char ler_got_char 000001bd s S076f4212ff14
//L S076f4212ff14ler_bs ler_bs 000001c8 s S076f4212ff14
//L S076f4212ff14ler_del ler_del 000001c8 s S076f4212ff14
//L S076f4212ff14ler_nobs ler_nobs 000001dd s S076f4212ff14
//L S076f4212ff14ler_noroom ler_noroom 000001f1 s S076f4212ff14
//L S076f4212ff14ler_false ler_false 000001f2 s S076f4212ff14
//L S076f4212ff14ler_true ler_true 000001f4 s S076f4212ff14
//L S076f4212ff14ler_ret ler_ret 000001f6 s S076f4212ff14
//L S076f4212ff14le_buf_len le_buf_len 000001fc s S076f4212ff14
//L S076f4212ff14le_buf_addr le_buf_addr 000001fd s S076f4212ff14
//L S076f4212ff14le_cursor_pos le_cursor_pos 000001fe s S076f4212ff14
//L S076f4212ff14le_ptr le_ptr 000001ff s S076f4212ff14
//= _pm_callin _pm_callin 0000f000 Sd14c348df59b _
//= _pm_enter_by_uart _pm_enter_by_uart 0000f001 Sd14c348df59b _
//= _pm_getchar _pm_getchar 0000f002 Sd14c348df59b _
//= _pm_version _pm_version 0000f003 Sd14c348df59b _
//= _pm_itobcd _pm_itobcd 0000f004 Sd14c348df59b _
//= _pm_cold_start _pm_cold_start 0000f005 Sd14c348df59b _
//= _pm_strchr _pm_strchr 0000f006 Sd14c348df59b _
//= _pm_streq _pm_streq 0000f007 Sd14c348df59b _
//= _pm_check_uart _pm_check_uart 0000f008 Sd14c348df59b _
//= _pm_input_avail _pm_input_avail 0000f008 Sd14c348df59b _
//= _pm_hexchar2value _pm_hexchar2value 0000f009 Sd14c348df59b _
//= _pm_value2hexchar _pm_value2hexchar 0000f00a Sd14c348df59b _
//= _pm_htoi _pm_htoi 0000f00b Sd14c348df59b _
//= _pm_strieq _pm_strieq 0000f00c Sd14c348df59b _
//= _pm_read _pm_read 0000f00d Sd14c348df59b _
//= _pm_putchar _pm_putchar 0000f00e Sd14c348df59b _
//= _pm_prints _pm_prints 0000f00f Sd14c348df59b _
//= _pm_printsnl _pm_printsnl 0000f010 Sd14c348df59b _
//= _pm_print_vhex _pm_print_vhex 0000f011 Sd14c348df59b _
//= _pm_pes _pm_pes 0000f012 Sd14c348df59b _
//= _pm_printd _pm_printd 0000f013 Sd14c348df59b _
//= _pm_printf _pm_printf 0000f014 Sd14c348df59b _
//= _pm_pesf _pm_pesf 0000f015 Sd14c348df59b _
//= _pm_ascii2seg _pm_ascii2seg 0000f016 Sd14c348df59b _
//L monitor monitor 00000200 Sd14c348df59b _
//L monitor_by_uart monitor_by_uart 00000201 Sd14c348df59b _
//L monitor_by_button monitor_by_button 00000202 Sd14c348df59b _
//L monitor_version monitor_version 00000208 Sd14c348df59b _
//L _nr_to_mask _nr_to_mask 0000020e S45ec84dfaab0 _
//L S45ec84dfaab0nr_to_mask_cyc nr_to_mask_cyc 00000211 s S45ec84dfaab0
//L S45ec84dfaab0nr_to_mask_ret nr_to_mask_ret 00000216 s S45ec84dfaab0
//L S38738b71c88clast_btn last_btn 00000219 s S38738b71c88c
//L S38738b71c88clast_sw last_sw 0000021a s S38738b71c88c
//L S38738b71c88clast_btn_down last_btn_down 0000021b s S38738b71c88c
//L S38738b71c88clast_sw_down last_sw_down 0000021c s S38738b71c88c
//L S38738b71c88clast_btn_inited last_btn_inited 0000021d s S38738b71c88c
//L S38738b71c88clast_sw_inited last_sw_inited 0000021e s S38738b71c88c
//L _lib_edge_detect _lib_edge_detect 0000021f S38738b71c88c _
//L S38738b71c88cinit_btn init_btn 00000227 s S38738b71c88c
//L S38738b71c88cinit_sw init_sw 00000230 s S38738b71c88c
//L S38738b71c88cpressed_inited pressed_inited 00000239 s S38738b71c88c
//L S38738b71c88cch_btn ch_btn 0000023c s S38738b71c88c
//L S38738b71c88cch_sw ch_sw 0000023f s S38738b71c88c
//L S38738b71c88ccheck_push check_push 0000024f s S38738b71c88c
//L S38738b71c88ccheck_release check_release 00000252 s S38738b71c88c
//L S38738b71c88cpressed_true pressed_true 00000254 s S38738b71c88c
//L S38738b71c88cpressed_false pressed_false 00000256 s S38738b71c88c
//L S38738b71c88cpressed_end pressed_end 00000257 s S38738b71c88c
//L btn_restart btn_restart 0000025d S38738b71c88c _
//L sw_restart sw_restart 00000262 S38738b71c88c _
//L btn_posedge btn_posedge 00000267 Saed5ad4c4c92 _
//L btn_negedge btn_negedge 0000026f Saed5ad4c4c92 _
//L btn_get btn_get 00000277 Saed5ad4c4c92 _
//L sw_posedge sw_posedge 00000280 Sf0e9c0689ca5 _
//L sw_negedge sw_negedge 00000288 Sf0e9c0689ca5 _
//L sw_get sw_get 00000290 Sf0e9c0689ca5 _

//; CODE
//P -
//F blink_fr2.asm
01d20111 //C 00001     7 mvzl	sp,stack
//R 00001 #16 stack 00000111
//G main
010261a7 //C 00002     8 mvzl	r0,24999
0600ff51 //C 00003     9 st	r0,CLOCK.PRE
//R 00003 #16 CLOCK.PRE 0000ff51
04000039 //C 00004    11 call	fr2pt
//R 00004 #24 fr2pt 00000039
07000010 //C 00005    12 ld	r0,ptime
//R 00005 #16 ptime 00000010
0600ff52 //C 00006    13 st	r0,CLOCK.BCNT2
//R 00006 #16 CLOCK.BCNT2 0000ff52
01020011 //C 00007    15 mvzl	r0,buffer
//R 00007 #16 buffer 00000011
01120028 //C 00008    16 mvzl	r1,40
040001a1 //C 00009    17 call	le_init
//R 00009 #24 le_init 000001a1
0400007e //C 0000a    19 call	prompt
//R 0000a #24 prompt 0000007e
0400003f //C 0000b    23 call	blink		; handle clock events
//R 0000b #24 blink 0000003f
//G cycle
0400004e //C 0000c    24 call	user_input	; handle user input
//R 0000c #24 user_input 0000004e
040000a4 //C 0000d    25 call	btn_press	; handle press of BTN[1]
//R 0000d #24 btn_press 000000a4
01f2000b //C 0000e    26 jmp	cycle
//R 0000e #16 cycle 0000000b
00000005 //C 0000f    30 db	5
//G frequ
00000000 //C 00010    31 db	0
//G ptime
00000000 //C 00011    32 buffer:	.ds	40		; user input buffer
//+ 00000028
//G buffer
0ded0000 //C 00039    40 push	lr
//G fr2pt
010203e8 //C 0003a    41 mvzl	r0,1000
0710000f //C 0003b    42 ld	r1,frequ
//R 0003b #16 frequ 0000000f
04000112 //C 0003c    43 call	div
//R 0003c #24 div 00000112
06400010 //C 0003d    44 st	r4,ptime
//R 0003d #16 ptime 00000010
0ffd0000 //C 0003e    45 pop	pc
0ded0000 //C 0003f    51 push	lr
//G blink
0700ff52 //C 00040    53 ld	r0,CLOCK.BCNT2	; get back counter
//R 00040 #16 CLOCK.BCNT2 0000ff52
020b0000 //C 00041    54 sz	r0		; check if zero
21f20048 //C 00042    55 NZ jmp	blink_ret	; if not, go out
//R 00042 #16 blink_ret 00000048
0700ff01 //C 00043    58 ld	r0,GPIO.LED	; read all LEDs
//R 00043 #16 GPIO.LED 0000ff01
//G do_blink
010e0001 //C 00044    59 xor	r0,1		; negate [0]
0600ff01 //C 00045    60 st	r0,GPIO.LED	; show it
//R 00045 #16 GPIO.LED 0000ff01
07000010 //C 00046    62 ld	r0,ptime	; use calculated period time
//R 00046 #16 ptime 00000010
0600ff52 //C 00047    63 st	r0,CLOCK.BCNT2	; restart back counter
//R 00047 #16 CLOCK.BCNT2 0000ff52
0ffd0000 //C 00048    65 pop	pc
//G blink_ret
00000071 //C 00049    71 db	113
//G cmd_quit
00000075 //C 0004a    71 db	117
00000069 //C 0004b    71 db	105
00000074 //C 0004c    71 db	116
00000000 //C 0004d    71 db
0ded0000 //C 0004e    74 push	lr
//G user_input
040001b5 //C 0004f    75 call	le_read		; read line
//R 0004f #24 le_read 000001b5
41f2007d //C 00050    76 NC jmp	ui_ret		; if not ready, go out
//R 00050 #16 ui_ret 0000007d
0102000a //C 00051    78 mvzl	r0,10		; echo ENTER
//G process_input
0400019b //C 00052    79 call	putchar
//R 00052 #24 putchar 0000019b
01020011 //C 00053    80 mvzl	r0,buffer	; check for word "quit"
//R 00053 #16 buffer 00000011
01120049 //C 00054    81 mvzl	r1,cmd_quit
//R 00054 #16 cmd_quit 00000049
0400f00c //C 00055    82 call	_pm_strieq	; case insensitive compare
//R 00055 #24 _pm_strieq 0000f00c
34000200 //C 00056    83 C call	monitor		; if eq, go out to monitor
//R 00056 #24 monitor 00000200
31f2007b //C 00057    84 C jmp	ui_done		; normal exit when continued
//R 00057 #16 ui_done 0000007b
01020011 //C 00058    87 mvzl	r0,buffer	; convert entered decimal number
//R 00058 #16 buffer 00000011
0400014a //C 00059    88 call	dtoi		; to integer value
//R 00059 #24 dtoi 0000014a
01480001 //C 0005a    89 cmp	r4,1		; check low limit
41f20063 //C 0005b    90 ULT jmp	ui_wrong
//R 0005b #16 ui_wrong 00000063
01480014 //C 0005c    91 cmp	r4,20		; check high limit
91f20063 //C 0005d    92 UGT jmp	ui_wrong
//R 0005d #16 ui_wrong 00000063
0640000f //C 0005e    95 st	r4,frequ	; store as frequ
//R 0005e #16 frequ 0000000f
//G ui_good
04000039 //C 0005f    96 call	fr2pt		; calculate new period time
//R 0005f #24 fr2pt 00000039
01020000 //C 00060    97 mvzl	r0,0		; force blink event by expiring counter
0600ff52 //C 00061    98 st	r0,CLOCK.BCNT2	; to pick up new value
//R 00061 #16 CLOCK.BCNT2 0000ff52
01f2007b //C 00062    99 jmp	ui_done
//R 00062 #16 ui_done 0000007b
00100400 //C 00063   101 mov	r1,r4
//G ui_wrong
0400f015 //C 00064   102 call	_pm_pesf	; print error message
//R 00064 #24 _pm_pesf 0000f015
00000025 //C 00065   103 db	37
00000064 //C 00066   103 db	100
00000020 //C 00067   103 db	32
0000006e //C 00068   103 db	110
0000006f //C 00069   103 db	111
00000074 //C 0006a   103 db	116
00000020 //C 0006b   103 db	32
00000069 //C 0006c   103 db	105
0000006e //C 0006d   103 db	110
00000020 //C 0006e   103 db	32
00000072 //C 0006f   103 db	114
00000061 //C 00070   103 db	97
0000006e //C 00071   103 db	110
00000067 //C 00072   103 db	103
00000065 //C 00073   103 db	101
00000020 //C 00074   103 db	32
00000031 //C 00075   103 db	49
0000002d //C 00076   103 db	45
00000032 //C 00077   103 db	50
00000030 //C 00078   103 db	48
0000000a //C 00079   103 db	10
00000000 //C 0007a   103 db
0400007e //C 0007b   105 call	prompt		; print prompt
//R 0007b #24 prompt 0000007e
//G ui_done
040001a8 //C 0007c   106 call	le_start	; restart input reader
//R 0007c #24 le_start 000001a8
0ffd0000 //C 0007d   108 pop	pc
//G ui_ret
0ded0000 //C 0007e   114 push	lr
//G prompt
0400f012 //C 0007f   115 call	_pm_pes
//R 0007f #24 _pm_pes 0000f012
00000045 //C 00080   116 db	69
0000006e //C 00081   116 db	110
00000074 //C 00082   116 db	116
00000065 //C 00083   116 db	101
00000072 //C 00084   116 db	114
00000020 //C 00085   116 db	32
00000066 //C 00086   116 db	102
00000072 //C 00087   116 db	114
00000020 //C 00088   116 db	32
00000069 //C 00089   116 db	105
0000006e //C 0008a   116 db	110
00000020 //C 0008b   116 db	32
00000048 //C 0008c   116 db	72
0000007a //C 0008d   116 db	122
00000020 //C 0008e   116 db	32
00000028 //C 0008f   116 db	40
00000071 //C 00090   116 db	113
00000075 //C 00091   116 db	117
00000069 //C 00092   116 db	105
00000074 //C 00093   116 db	116
00000020 //C 00094   116 db	32
00000074 //C 00095   116 db	116
0000006f //C 00096   116 db	111
00000020 //C 00097   116 db	32
0000006d //C 00098   116 db	109
0000006f //C 00099   116 db	111
0000006e //C 0009a   116 db	110
00000069 //C 0009b   116 db	105
00000074 //C 0009c   116 db	116
0000006f //C 0009d   116 db	111
00000072 //C 0009e   116 db	114
00000029 //C 0009f   116 db	41
0000003a //C 000a0   116 db	58
00000020 //C 000a1   116 db	32
00000000 //C 000a2   116 db
0ffd0000 //C 000a3   117 pop	pc
0ded0000 //C 000a4   123 push	lr
//G btn_press
01020001 //C 000a5   124 mvzl	r0,1		; nr of BTN[1]
04000267 //C 000a6   125 call	btn_posedge	; if pressed
//R 000a6 #24 btn_posedge 00000267
34000200 //C 000a7   126 C call	monitor		; then go out to monitor
//R 000a7 #24 monitor 00000200
0400025d //C 000a8   127 call	btn_restart
//R 000a8 #24 btn_restart 0000025d
01020000 //C 000a9   128 mvzl	r0,0		; nr of SW[0]
04000280 //C 000aa   129 call	sw_posedge
//R 000aa #24 sw_posedge 00000280
34000200 //C 000ab   130 C call	monitor
//R 000ab #24 monitor 00000200
04000262 //C 000ac   131 call	sw_restart
//R 000ac #24 sw_restart 00000262
0ffd0000 //C 000ad   132 pop	pc
00000000 //C 000ae   137 .ds	99
//+ 00000063
00000000 //C 00111   138 stack:	.ds	1
//+ 00000001
//G stack
//F math.asm
//P S293d8fdbaa47 _lib_segment_div
0ded0000 //C 00112    15 push	lr
//G div
0d6d0000 //C 00113    16 push	r6
021b0000 //C 00114    18 sz	r1
21f20119 //C 00115    19 NZ jmp	div_dok
//R 00115 #16 div_dok 00000119
00400000 //C 00116    20 mov	r4,r0		; div by zero
01520000 //C 00117    21 mvzl	r5,0x0
01f2012a //C 00118    22 jmp	div_ret
//R 00118 #16 div_ret 0000012a
01420000 //C 00119    25 mvzl	r4,0		; Q= 0
//N div_dok S293d8fdbaa47
//N div_dummy S293d8fdbaa47
01520000 //C 0011a    26 mvzl	r5,0		; R= 0
01618000 //C 0011b    27 mvh	r6,0x80000000	; m= 1<<31
01600000 //C 0011c    28 mvl	r6,0x80000000
026b0000 //C 0011d    30 sz	r6
//N div_cyc S293d8fdbaa47
11f2012a //C 0011e    31 Z jmp	div_ret
//R 0011e #16 div_ret 0000012a
02580000 //C 0011f    32 shl	r5		; r<<= 1
000c0600 //C 00120    33 test	r0,r6		; if (n&m)
215d0001 //C 00121    34 NZ or	r5,1		; r|= 1
00580100 //C 00122    35 cmp	r5,r1		; if (r>=d)
41f20128 //C 00123    36 LO jmp	div_cyc_next
//R 00123 #16 div_cyc_next 00000128
00560100 //C 00124    37 sub	r5,r1		; r-= d
004d0600 //C 00125    38 or	r4,r6		; q|= m
01f20128 //C 00126    39 jmp	div_cyc_next
//R 00126 #16 div_cyc_next 00000128
01f2011d //C 00127    40 jmp	div_cyc
//R 00127 #16 div_cyc 0000011d
02690000 //C 00128    42 shr	r6		; m>>= 1
//N div_cyc_next S293d8fdbaa47
01f2011d //C 00129    43 jmp	div_cyc
//R 00129 #16 div_cyc 0000011d
0f6d0000 //C 0012a    45 pop	r6
//N div_ret S293d8fdbaa47
0ffd0000 //C 0012b    46 pop	pc
//P S8e7b3d203072 _lib_segment_rand
00000049 //C 0012c    58 db	2127401289
//N seed S8e7b3d203072
0600012c //C 0012d    65 st	r0,seed
//R 0012d #16 seed 0000012c
//G srand
00f00e00 //C 0012e    66 ret
0ded0000 //C 0012f    72 push	lr
//G rand
0d0d0000 //C 00130    73 push	r0
0d2d0000 //C 00131    74 push	r2
0700012c //C 00132    76 ld	r0,seed
//R 00132 #16 seed 0000012c
00400000 //C 00133    77 mov	r4,r0
0122000d //C 00134    78 mvzl	r2,13
02480000 //C 00135    79 c1:	shl	r4
//N c1 S8e7b3d203072
0124ffff //C 00136    80 dec	r2
21f20135 //C 00137    81 jnz	c1
//R 00137 #16 c1 00000135
000e0400 //C 00138    82 xor	r0,r4
00400000 //C 00139    83 mov	r4,r0
01220011 //C 0013a    84 mvzl	r2,17
02490000 //C 0013b    85 c2:	shr	r4
//N c2 S8e7b3d203072
0124ffff //C 0013c    86 dec	r2
21f2013b //C 0013d    87 jnz	c2
//R 0013d #16 c2 0000013b
000e0400 //C 0013e    88 xor	r0,r4
00400000 //C 0013f    89 mov	r4,r0
01220005 //C 00140    90 mvzl	r2,5
02480000 //C 00141    91 c3:	shl	r4
//N c3 S8e7b3d203072
0124ffff //C 00142    92 dec	r2
21f20141 //C 00143    93 jnz	c3
//R 00143 #16 c3 00000141
000e0400 //C 00144    94 xor	r0,r4
0600012c //C 00145    95 st	r0,seed
//R 00145 #16 seed 0000012c
00400000 //C 00146    97 mov	r4,r0
0f2d0000 //C 00147    99 pop	r2
0f0d0000 //C 00148   100 pop	r0
0ffd0000 //C 00149   101 pop	pc
//F str.asm
//P S379a2415f157 _lib_segment_dtoi
0ded0000 //C 0014a    25 push	lr
//G dtoi
0d0d0000 //C 0014b    26 push	r0
0d1d0000 //C 0014c    27 push	r1
0d2d0000 //C 0014d    28 push	r2
0d3d0000 //C 0014e    29 push	r3
0d5d0000 //C 0014f    30 push	r5
01420000 //C 00150    32 mvzl	r4,0		; return value
00200000 //C 00151    33 mov	r2,r0		; address in r2
01320000 //C 00152    34 mvzl	r3,0		; word index
022b0000 //C 00153    35 sz	r2		; check pointer
11f20167 //C 00154    36 jz	dtoi_false	; for NULL value
//R 00154 #16 dtoi_false 00000167
01520000 //C 00155    38 mvzl	r5,0		; byte index
//N dtoi_cyc S379a2415f157
0b138200 //C 00156    39 ld	r1,r3+,r2	; pick a char
021b0000 //C 00157    40 sz	r1		; end of string?
11f20165 //C 00158    41 jz	dtoi_true	; normal exit
//R 00158 #16 dtoi_true 00000165
06014105 //C 00159    43 getbz	r0,r1,r5
//N dtoi_byte S379a2415f157
020b0000 //C 0015a    44 sz	r0
11f20155 //C 0015b    45 jz	dtoi_cyc
//R 0015b #16 dtoi_cyc 00000155
04000182 //C 0015c    46 call	isdigit		; check ascii char
//R 0015c #24 isdigit 00000182
41f20167 //C 0015d    47 jnc	dtoi_false	; exit if not a number
//R 0015d #16 dtoi_false 00000167
01060030 //C 0015e    48 sub	r0,'0'		; convert char to number
0149000a //C 0015f    49 mul	r4,10		; shift tmp
00440000 //C 00160    50 add	r4,r0		; add actual number
01540001 //C 00161    51 inc	r5
01580004 //C 00162    52 cmp	r5,4
11f20155 //C 00163    53 jz	dtoi_cyc
//R 00163 #16 dtoi_cyc 00000155
01f20159 //C 00164    54 jmp	dtoi_byte
//R 00164 #16 dtoi_byte 00000159
020c0000 //C 00165    57 sec
//N dtoi_true S379a2415f157
01f20168 //C 00166    58 jmp	dtoi_ret
//R 00166 #16 dtoi_ret 00000168
020d0000 //C 00167    60 clc
//N dtoi_false S379a2415f157
0f5d0000 //C 00168    62 pop	r5
//N dtoi_ret S379a2415f157
0f3d0000 //C 00169    63 pop	r3
0f2d0000 //C 0016a    64 pop	r2
0f1d0000 //C 0016b    65 pop	r1
0f0d0000 //C 0016c    66 pop	r0
0ffd0000 //C 0016d    67 pop	pc
//P Sbe1a78b9d15e _lib_segment_str_chr
020b0000 //C 0016e    94 sz	r0		; check NULL pointer
//G str_chr
120d0000 //C 0016f    95 Z clc
10f00e00 //C 00170    96 Z ret
02100000 //C 00171    97 zeb	r1		; prepare character
0ded0000 //C 00172    98 push	lr
0d1d0000 //C 00173    99 push	r1
0d2d0000 //C 00174   100 push	r2
00400000 //C 00175   101 mov	r4,r0
00000100 //C 00176   102 mov	r0,r1
00100400 //C 00177   103 mov	r1,r4
0400f006 //C 00178   104 call	_pm_strchr
//R 00178 #24 _pm_strchr 0000f006
00400100 //C 00179   105 mov	r4,r1
00500200 //C 0017a   106 mov	r5,r2
0f2d0000 //C 0017b   107 pop	r2
0f1d0000 //C 0017c   108 pop	r1
0ffd0000 //C 0017d   109 pop	pc
//F char.asm
//P S602f0726a14b _lib_segment_character_fn
020c0000 //C 0017e    22 sec
//G _char_is_true
00f00e00 //C 0017f    23 ret
020d0000 //C 00180    25 clc
//G _char_is_false
00f00e00 //C 00181    26 ret
//P S847a5c4e618b _lib_segment_isdigit
01080030 //C 00182    37 cmp	R0,'0'
//G isdigit
41f20180 //C 00183    38 ULT jmp	_char_is_false
//R 00183 #16 _char_is_false 00000180
01080039 //C 00184    39 cmp	R0,'9'
91f20180 //C 00185    40 UGT jmp	_char_is_false
//R 00185 #16 _char_is_false 00000180
01f2017e //C 00186    41 jmp _char_is_true
//R 00186 #16 _char_is_true 0000017e
//P S9a7f1c151839 _lib_segment_islower
01080061 //C 00187    53 cmp	r0,'a'
//G islower
41f20180 //C 00188    54 ULT jmp	_char_is_false
//R 00188 #16 _char_is_false 00000180
0108007a //C 00189    55 cmp	r0,'z'
91f20180 //C 0018a    56 UGT jmp	_char_is_false
//R 0018a #16 _char_is_false 00000180
01f2017e //C 0018b    57 jmp	_char_is_true
//R 0018b #16 _char_is_true 0000017e
//P S154e11ca77b1 _lib_segment_isupper
01080041 //C 0018c    69 cmp	r0,'A'
//G isupper
41f20180 //C 0018d    70 ULT jmp	_char_is_false
//R 0018d #16 _char_is_false 00000180
0108005a //C 0018e    71 cmp	r0,'Z'
91f20180 //C 0018f    72 UGT jmp	_char_is_false
//R 0018f #16 _char_is_false 00000180
01f2017e //C 00190    73 jmp	_char_is_true
//R 00190 #16 _char_is_true 0000017e
//P Sf1f3b6b1f10a _lib_segment_isalpha
0ded0000 //C 00191    85 push	lr
//G isalpha
04000187 //C 00192    86 call	islower
//R 00192 #24 islower 00000187
3ffd0000 //C 00193    87 C pop	pc
0400018c //C 00194    88 call	isupper
//R 00194 #24 isupper 0000018c
0ffd0000 //C 00195    89 pop	pc
//P Sb95a2b17779b _lib_segment_isalnum
0ded0000 //C 00196   101 push	lr
//G isalnum
04000191 //C 00197   102 call	isalpha
//R 00197 #24 isalpha 00000191
3ffd0000 //C 00198   103 C pop	pc
04000182 //C 00199   104 call	isdigit
//R 00199 #24 isdigit 00000182
0ffd0000 //C 0019a   105 pop	pc
//F inout.asm
//P S503b4c87a8c4 _lib_segment_putchar
01f2f00e //C 0019b    24 jmp	_pm_putchar
//R 0019b #16 _pm_putchar 0000f00e
//G putchar
//P S23554af9f140 _lib_segment_eprints
01f2f012 //C 0019c    54 jmp	_pm_pes
//R 0019c #16 _pm_pes 0000f012
//G eprints
//P Sb401aee44acb _lib_segment_eprintf
01f2f015 //C 0019d    66 jmp	_pm_pesf
//R 0019d #16 _pm_pesf 0000f015
//G eprintf
//P Sedd6b6695436 _lib_segment_input_avail
01f2f008 //C 0019e    72 jmp	_pm_check_uart
//R 0019e #16 _pm_check_uart 0000f008
//G input_avail
//P S84a19e8ae015 _lib_segment_read
0740ff40 //C 0019f    89 ld	r4,UART.DR
//R 0019f #16 UART.DR 0000ff40
//G read
00f00e00 //C 001a0    90 ret
//P S076f4212ff14 _lib_segment_line_editor
0ded0000 //C 001a1   100 push	lr
//G le_init
//G le_setbuf
020b0000 //C 001a2   101 sz	r0
11120000 //C 001a3   102 Z mvzl	r1,0
060001fd //C 001a4   103 st	r0,le_buf_addr	; store buffer info
//R 001a4 #16 le_buf_addr 000001fd
061001fc //C 001a5   104 st	r1,le_buf_len	; in local vars
//R 001a5 #16 le_buf_len 000001fc
040001a8 //C 001a6   105 call	le_start	; set buffer empty
//R 001a6 #24 le_start 000001a8
0ffd0000 //C 001a7   106 pop	pc
0ded0000 //C 001a8   112 push	lr
//G le_start
0d1d0000 //C 001a9   113 push	r1
0d2d0000 //C 001aa   114 push	r2
01220000 //C 001ab   115 mvzl	r2,0		; set cursor post to 0
062001fe //C 001ac   116 st	r2,le_cursor_pos
//R 001ac #16 le_cursor_pos 000001fe
071001fd //C 001ad   117 ld	r1,le_buf_addr	; buf[0]= 0
//R 001ad #16 le_buf_addr 000001fd
021b0000 //C 001ae   118 sz	r1
2c210000 //C 001af   119 NZ st	r2,r1
011201ff //C 001b0   120 mvzl	r1,le_ptr	; ptr= 0
//R 001b0 #16 le_ptr 000001ff
0c210000 //C 001b1   121 st	r2,r1
0f2d0000 //C 001b2   122 pop	r2
0f1d0000 //C 001b3   123 pop	r1
0ffd0000 //C 001b4   124 pop	pc
0ded0000 //C 001b5   131 push	lr
//G le_read
//G tu_fgets
0d0d0000 //C 001b6   132 push	r0
0d1d0000 //C 001b7   133 push	r1
0d2d0000 //C 001b8   134 push	r2
0d3d0000 //C 001b9   135 push	r3
0d4d0000 //C 001ba   136 push	r4
0400019e //C 001bb   138 call	input_avail	; if there is no char
//R 001bb #24 input_avail 0000019e
41f201f6 //C 001bc   139 NC jmp	ler_ret		; return with false
//R 001bc #16 ler_ret 000001f6
0400019f //C 001bd   141 call	read		; read one char
//R 001bd #24 read 0000019f
//N ler_got_char S076f4212ff14
00000400 //C 001be   142 mov	r0,r4
0108000d //C 001bf   143 cmp	r0,13		; check CR and LF
11f201f4 //C 001c0   144 jz	ler_true	; both accepted as ENTER
//R 001c0 #16 ler_true 000001f4
0108000a //C 001c1   145 cmp	r0,10
11f201f4 //C 001c2   146 jz	ler_true
//R 001c2 #16 ler_true 000001f4
01080008 //C 001c3   148 cmp	r0,8		; is it backspace?
11f201c8 //C 001c4   149 jz	ler_bs
//R 001c4 #16 ler_bs 000001c8
0108007f //C 001c5   150 cmp	r0,0x7f
11f201c8 //C 001c6   151 jz	ler_del
//R 001c6 #16 ler_del 000001c8
01f201dd //C 001c7   152 jmp	ler_nobs
//R 001c7 #16 ler_nobs 000001dd
072001ff //C 001c8   157 ld	r2,le_ptr	; already emtpy?
//R 001c8 #16 le_ptr 000001ff
//N ler_bs S076f4212ff14
//N ler_del S076f4212ff14
022b0000 //C 001c9   158 sz	r2
11f201f2 //C 001ca   159 jz	ler_false
//R 001ca #16 ler_false 000001f2
0124ffff //C 001cb   160 dec	r2		; ptr= pre-1
062001ff //C 001cc   161 st	r2,le_ptr
//R 001cc #16 le_ptr 000001ff
071001fd //C 001cd   162 ld	r1,le_buf_addr	; buf[ptr]=0
//R 001cd #16 le_buf_addr 000001fd
01020000 //C 001ce   163 mvzl	r0,0
021b0000 //C 001cf   164 sz	r1
28010200 //C 001d0   165 NZ st	r0,r1,r2
f400019d //C 001d1   166 ces	eprintf
//R 001d1 #24 eprintf 0000019d
0000001b //C 001d2   167 db	27
0000005b //C 001d3   167 db	91
00000031 //C 001d4   167 db	49
00000044 //C 001d5   167 db	68
00000020 //C 001d6   167 db	32
0000001b //C 001d7   167 db	27
0000005b //C 001d8   167 db	91
00000031 //C 001d9   167 db	49
00000044 //C 001da   167 db	68
00000000 //C 001db   167 db
01f201f2 //C 001dc   168 jmp	ler_false
//R 001dc #16 ler_false 000001f2
01080020 //C 001dd   171 cmp	r0,32		; skip ctrl chars
//N ler_nobs S076f4212ff14
41f201f2 //C 001de   172 ULT jmp	ler_false
//R 001de #16 ler_false 000001f2
01080080 //C 001df   173 cmp	r0,128		; skip graphic chars
31f201f2 //C 001e0   174 UGE jmp	ler_false
//R 001e0 #16 ler_false 000001f2
071001fd //C 001e1   176 ld	r1,le_buf_addr
//R 001e1 #16 le_buf_addr 000001fd
021b0000 //C 001e2   177 sz	r1
11f201f2 //C 001e3   178 jz	ler_false
//R 001e3 #16 ler_false 000001f2
071001fc //C 001e4   179 ld	r1,le_buf_len
//R 001e4 #16 le_buf_len 000001fc
072001ff //C 001e5   180 ld	r2,le_ptr
//R 001e5 #16 le_ptr 000001ff
00300200 //C 001e6   181 mov	r3,r2
01340001 //C 001e7   182 inc	r3
00380100 //C 001e8   183 cmp	r3,r1
31f201f1 //C 001e9   184 UGE jmp	ler_noroom
//R 001e9 #16 ler_noroom 000001f1
071001fd //C 001ea   185 ld	r1,le_buf_addr
//R 001ea #16 le_buf_addr 000001fd
08010200 //C 001eb   186 st	r0,r1,r2
0400019b //C 001ec   187 call	putchar
//R 001ec #24 putchar 0000019b
01020000 //C 001ed   188 mvzl	r0,0
08010300 //C 001ee   189 st	r0,r1,r3
063001ff //C 001ef   190 st	r3,le_ptr
//R 001ef #16 le_ptr 000001ff
01f201f2 //C 001f0   191 jmp	ler_false
//R 001f0 #16 ler_false 000001f2
01f201f2 //C 001f1   194 jmp	ler_false
//R 001f1 #16 ler_false 000001f2
//N ler_noroom S076f4212ff14
020d0000 //C 001f2   196 clc
//N ler_false S076f4212ff14
01f201f6 //C 001f3   197 jmp	ler_ret
//R 001f3 #16 ler_ret 000001f6
020c0000 //C 001f4   199 sec
//N ler_true S076f4212ff14
01f201f6 //C 001f5   200 jmp	ler_ret
//R 001f5 #16 ler_ret 000001f6
0f4d0000 //C 001f6   202 pop	r4
//N ler_ret S076f4212ff14
0f3d0000 //C 001f7   203 pop	r3
0f2d0000 //C 001f8   204 pop	r2
0f1d0000 //C 001f9   205 pop	r1
0f0d0000 //C 001fa   206 pop	r0
0ffd0000 //C 001fb   207 pop	pc
00000000 //C 001fc   211 db	0
//N le_buf_len S076f4212ff14
00000000 //C 001fd   213 db	0
//N le_buf_addr S076f4212ff14
00000000 //C 001fe   215 db	0
//N le_cursor_pos S076f4212ff14
00000000 //C 001ff   217 db	0
//N le_ptr S076f4212ff14
//F mon.asm
//P Sd14c348df59b _lib_segment_pmon
01f2f000 //C 00200    40 jmp	_pm_callin
//R 00200 #16 _pm_callin 0000f000
//G monitor
01f2f001 //C 00201    44 jmp	_pm_enter_by_uart
//R 00201 #16 _pm_enter_by_uart 0000f001
//G monitor_by_uart
0ded0000 //C 00202    48 push	lr
//G monitor_by_button
04000267 //C 00203    49 call	btn_posedge
//R 00203 #24 btn_posedge 00000267
4ffd0000 //C 00204    50 NC pop	pc
04000200 //C 00205    51 call	monitor
//R 00205 #24 monitor 00000200
0400025d //C 00206    52 call	btn_restart
//R 00206 #24 btn_restart 0000025d
0ffd0000 //C 00207    53 pop	pc
0ded0000 //C 00208    57 push	lr
//G monitor_version
0d0d0000 //C 00209    58 push	r0
0400f003 //C 0020a    59 call	_pm_version
//R 0020a #24 _pm_version 0000f003
00400000 //C 0020b    60 mov	r4,r0
0f0d0000 //C 0020c    61 pop	r0
0ffd0000 //C 0020d    62 pop	pc
//F bsp.asm
//P S45ec84dfaab0 _lib_segment_nr_to_mask
0d1d0000 //C 0020e    26 push	r1
//G _nr_to_mask
010b001f //C 0020f    27 btst	r0,0x1f		; max nr is 31
01120001 //C 00210    28 mvzl	r1,1		; mask for nr==0
020b0000 //C 00211    30 sz	r0		; is nr zero?
//N nr_to_mask_cyc S45ec84dfaab0
11f20216 //C 00212    31 jz	nr_to_mask_ret	; if yes, go out
//R 00212 #16 nr_to_mask_ret 00000216
02180000 //C 00213    32 shl	r1		; shift mask up
0104ffff //C 00214    33 dec	r0		; decrement nr
01f20211 //C 00215    34 jmp	nr_to_mask_cyc	; check for zero
//R 00215 #16 nr_to_mask_cyc 00000211
00000100 //C 00216    36 mov	r0,r1		; return mask in R0
//N nr_to_mask_ret S45ec84dfaab0
0f1d0000 //C 00217    37 pop	r1
00f00e00 //C 00218    38 ret
//P S38738b71c88c _lib_segment_edge
00000000 //C 00219   120 ds	1
//+ 00000001
//N last_btn S38738b71c88c
00000000 //C 0021a   122 ds	1
//+ 00000001
//N last_sw S38738b71c88c
00000000 //C 0021b   124 ds	1
//+ 00000001
//N last_btn_down S38738b71c88c
00000000 //C 0021c   126 ds	1
//+ 00000001
//N last_sw_down S38738b71c88c
00000000 //C 0021d   128 db	0
//N last_btn_inited S38738b71c88c
00000000 //C 0021e   130 db	0
//N last_sw_inited S38738b71c88c
0ded0000 //C 0021f   141 push	lr
//G _lib_edge_detect
0d1d0000 //C 00220   142 push	r1
0d2d0000 //C 00221   143 push	r2
0d3d0000 //C 00222   144 push	r3
0d4d0000 //C 00223   145 push	r4
0d5d0000 //C 00224   146 push	r5
00500100 //C 00225   148 mov	r5,r1		; what edge to check
31f20230 //C 00226   149 C jmp	init_sw
//R 00226 #16 init_sw 00000230
0710021d //C 00227   151 ld	r1,last_btn_inited
//R 00227 #16 last_btn_inited 0000021d
//N init_btn S38738b71c88c
021b0000 //C 00228   152 sz	r1
21f20239 //C 00229   153 jnz	pressed_inited
//R 00229 #16 pressed_inited 00000239
01120001 //C 0022a   154 mvzl	r1,1
0610021d //C 0022b   155 st	r1,last_btn_inited
//R 0022b #16 last_btn_inited 0000021d
0710ff20 //C 0022c   156 ld	r1,GPIO.BTN
//R 0022c #16 GPIO.BTN 0000ff20
06100219 //C 0022d   157 st	r1,last_btn
//R 0022d #16 last_btn 00000219
0610021b //C 0022e   158 st	r1,last_btn_down
//R 0022e #16 last_btn_down 0000021b
01f20256 //C 0022f   159 jmp	pressed_false
//R 0022f #16 pressed_false 00000256
0710021e //C 00230   161 ld	r1,last_sw_inited
//R 00230 #16 last_sw_inited 0000021e
//N init_sw S38738b71c88c
021b0000 //C 00231   162 sz	r1
21f20239 //C 00232   163 jnz	pressed_inited
//R 00232 #16 pressed_inited 00000239
01120001 //C 00233   164 mvzl	r1,1
0610021e //C 00234   165 st	r1,last_sw_inited
//R 00234 #16 last_sw_inited 0000021e
0710ff10 //C 00235   166 ld	r1,GPIO.SW
//R 00235 #16 GPIO.SW 0000ff10
0610021a //C 00236   167 st	r1,last_sw
//R 00236 #16 last_sw 0000021a
0610021c //C 00237   168 st	r1,last_sw_down
//R 00237 #16 last_sw_down 0000021c
01f20256 //C 00238   169 jmp	pressed_false
//R 00238 #16 pressed_false 00000256
4122ff20 //C 00239   173 NC mvzl	r2,GPIO.BTN
//R 00239 #16 GPIO.BTN 0000ff20
//N pressed_inited S38738b71c88c
3122ff10 //C 0023a   174 C mvzl	r2,GPIO.SW
//R 0023a #16 GPIO.SW 0000ff10
31f2023f //C 0023b   175 jc	ch_sw
//R 0023b #16 ch_sw 0000023f
025b0000 //C 0023c   177 sz	r5
//N ch_btn S38738b71c88c
11120219 //C 0023d   178 Z mvzl	r1,last_btn
//R 0023d #16 last_btn 00000219
2112021b //C 0023e   179 NZ mvzl	r1,last_btn_down
//R 0023e #16 last_btn_down 0000021b
025b0000 //C 0023f   181 sz	r5
//N ch_sw S38738b71c88c
1112021a //C 00240   182 Z mvzl	r1,last_sw
//R 00240 #16 last_sw 0000021a
2112021c //C 00241   183 NZ mvzl	r1,last_sw_down
//R 00241 #16 last_sw_down 0000021c
0e310000 //C 00242   187 ld	r3,r1
0e420000 //C 00243   188 ld	r4,r2
003f0000 //C 00244   190 and	r3,r0		; masked last
004f0000 //C 00245   191 and	r4,r0		; masked port
00380400 //C 00246   192 cmp	r3,r4
11f20256 //C 00247   193 EQ jmp	pressed_false
//R 00247 #16 pressed_false 00000256
02040000 //C 00248   194 not	r0		; negated mask
0e310000 //C 00249   195 ld	r3,r1		; original last
003f0000 //C 0024a   196 and	r3,r0		; clear checked bit
003d0400 //C 0024b   197 or	r3,r4		; or with masked port
0c310000 //C 0024c   198 st	r3,r1		; store new last value
025b0000 //C 0024d   199 sz	r5
21f20252 //C 0024e   200 jnz	check_release
//R 0024e #16 check_release 00000252
024b0000 //C 0024f   202 sz	r4		; check new port value
//N check_push S38738b71c88c
11f20256 //C 00250   203 jz	pressed_false
//R 00250 #16 pressed_false 00000256
21f20254 //C 00251   204 jnz	pressed_true
//R 00251 #16 pressed_true 00000254
024b0000 //C 00252   206 sz	r4
//N check_release S38738b71c88c
21f20256 //C 00253   207 jnz	pressed_false
//R 00253 #16 pressed_false 00000256
020c0000 //C 00254   210 sec
//N pressed_true S38738b71c88c
01f20257 //C 00255   211 jmp	pressed_end
//R 00255 #16 pressed_end 00000257
020d0000 //C 00256   213 clc
//N pressed_false S38738b71c88c
0f5d0000 //C 00257   215 pop	r5
//N pressed_end S38738b71c88c
0f4d0000 //C 00258   216 pop	r4
0f3d0000 //C 00259   217 pop	r3
0f2d0000 //C 0025a   218 pop	r2
0f1d0000 //C 0025b   219 pop	r1
0ffd0000 //C 0025c   220 pop	pc
0d1d0000 //C 0025d   225 push	r1
//G btn_restart
0710ff20 //C 0025e   226 ld	r1,GPIO.BTN
//R 0025e #16 GPIO.BTN 0000ff20
06100219 //C 0025f   227 st	r1,last_btn
//R 0025f #16 last_btn 00000219
0f1d0000 //C 00260   228 pop	r1
00f00e00 //C 00261   229 ret
0d1d0000 //C 00262   233 push	r1
//G sw_restart
0710ff10 //C 00263   234 ld	r1,GPIO.SW
//R 00263 #16 GPIO.SW 0000ff10
0610021a //C 00264   235 st	r1,last_sw
//R 00264 #16 last_sw 0000021a
0f1d0000 //C 00265   236 pop	r1
00f00e00 //C 00266   237 ret
//P Saed5ad4c4c92 _lib_segment_btn
0ded0000 //C 00267   250 push	lr
//G btn_posedge
0400020e //C 00268   251 call	_nr_to_mask
//R 00268 #24 _nr_to_mask 0000020e
0d1d0000 //C 00269   252 push	r1
01120000 //C 0026a   253 mvzl	r1,0
020d0000 //C 0026b   254 clc
0400021f //C 0026c   255 call	_lib_edge_detect
//R 0026c #24 _lib_edge_detect 0000021f
0f1d0000 //C 0026d   256 pop	r1
0ffd0000 //C 0026e   257 pop	pc
0ded0000 //C 0026f   266 push	lr
//G btn_negedge
0400020e //C 00270   267 call	_nr_to_mask
//R 00270 #24 _nr_to_mask 0000020e
0d1d0000 //C 00271   268 push	r1
01120001 //C 00272   269 mvzl	r1,1
020d0000 //C 00273   270 clc
0400021f //C 00274   271 call	_lib_edge_detect
//R 00274 #24 _lib_edge_detect 0000021f
0f1d0000 //C 00275   272 pop	r1
0ffd0000 //C 00276   273 pop	pc
0ded0000 //C 00277   282 push	lr
//G btn_get
0d1d0000 //C 00278   283 push	r1
0400020e //C 00279   284 call	_nr_to_mask
//R 00279 #24 _nr_to_mask 0000020e
0710ff20 //C 0027a   285 ld	r1,GPIO.BTN
//R 0027a #16 GPIO.BTN 0000ff20
001f0000 //C 0027b   286 and	r1,r0
120d0000 //C 0027c   287 Z clc
220c0000 //C 0027d   288 NZ sec
0f1d0000 //C 0027e   289 pop	r1
0ffd0000 //C 0027f   290 pop	pc
//P Sf0e9c0689ca5 _lib_segment_sw
0ded0000 //C 00280   302 push	lr
//G sw_posedge
0400020e //C 00281   303 call	_nr_to_mask
//R 00281 #24 _nr_to_mask 0000020e
0d1d0000 //C 00282   304 push	r1
01120000 //C 00283   305 mvzl	r1,0
020c0000 //C 00284   306 sec
0400021f //C 00285   307 call	_lib_edge_detect
//R 00285 #24 _lib_edge_detect 0000021f
0f1d0000 //C 00286   308 pop	r1
0ffd0000 //C 00287   309 pop	pc
0ded0000 //C 00288   318 push	lr
//G sw_negedge
0400020e //C 00289   319 call	_nr_to_mask
//R 00289 #24 _nr_to_mask 0000020e
0d1d0000 //C 0028a   320 push	r1
01120001 //C 0028b   321 mvzl	r1,1
020c0000 //C 0028c   322 sec
0400021f //C 0028d   323 call	_lib_edge_detect
//R 0028d #24 _lib_edge_detect 0000021f
0f1d0000 //C 0028e   324 pop	r1
0ffd0000 //C 0028f   325 pop	pc
0ded0000 //C 00290   334 push	lr
//G sw_get
0d1d0000 //C 00291   335 push	r1
0400020e //C 00292   336 call	_nr_to_mask
//R 00292 #24 _nr_to_mask 0000020e
0710ff10 //C 00293   337 ld	r1,GPIO.SW
//R 00293 #16 GPIO.SW 0000ff10
001f0000 //C 00294   338 and	r1,r0
120d0000 //C 00295   339 Z clc
220c0000 //C 00296   340 NZ sec
0f1d0000 //C 00297   341 pop	r1
0ffd0000 //C 00298   342 pop	pc
//H 74139a3f
//E
