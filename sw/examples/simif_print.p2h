//U P1

//; SEGMENTS
//T S293d8fdbaa47 _lib_segment_div noload=0 abs=0
//T S8e7b3d203072 _lib_segment_rand noload=0 abs=0
//T Sbe1a78b9d15e _lib_segment_str_chr noload=0 abs=0
//T S0e483de54bb5 _lib_segment_regs_of_gpio noload=0 abs=0
//T S33927ab86900 _lib_segment_regs_of_uart noload=0 abs=0
//T S602f0726a14b _lib_segment_character_fn noload=0 abs=0
//T S847a5c4e618b _lib_segment_isdigit noload=0 abs=0
//T S9a7f1c151839 _lib_segment_islower noload=0 abs=0
//T S154e11ca77b1 _lib_segment_isupper noload=0 abs=0
//T Sf1f3b6b1f10a _lib_segment_isalpha noload=0 abs=0
//T Sb95a2b17779b _lib_segment_isalnum noload=0 abs=0
//T S503b4c87a8c4 _lib_segment_putchar noload=0 abs=0
//T S23554af9f140 _lib_segment_eprints noload=0 abs=0
//T Sb401aee44acb _lib_segment_eprintf noload=0 abs=0
//T Sedd6b6695436 _lib_segment_input_avail noload=0 abs=0
//T S84a19e8ae015 _lib_segment_read noload=0 abs=0
//T Sd14c348df59b _lib_segment_pmon noload=0 abs=0
//T S45ec84dfaab0 _lib_segment_nr_to_mask noload=0 abs=0
//T S38738b71c88c _lib_segment_edge noload=0 abs=0
//T Saed5ad4c4c92 _lib_segment_btn noload=0 abs=0

//; SYMBOLS
//S simif simif 0000ffff - _
//L vege vege 00000003 - _
//L start start 00000004 - _
//L cikl cikl 00000005 - _
//L local_putchar local_putchar 0000000c - _
//L print print 00000015 - _
//L print_cikl print_cikl 00000017 - _
//L print_exit print_exit 0000001d - _
//L Hello Hello 00000020 - _
//L stack stack 0000002e - _
//L div div 0000002f S293d8fdbaa47 _
//L S293d8fdbaa47div_dok div_dok 00000036 s S293d8fdbaa47
//L S293d8fdbaa47div_dummy div_dummy 00000036 s S293d8fdbaa47
//L S293d8fdbaa47div_cyc div_cyc 0000003a s S293d8fdbaa47
//L S293d8fdbaa47div_cyc_next div_cyc_next 00000045 s S293d8fdbaa47
//L S293d8fdbaa47div_ret div_ret 00000047 s S293d8fdbaa47
//L S8e7b3d203072seed seed 00000049 s S8e7b3d203072
//L srand srand 0000004a S8e7b3d203072 _
//L rand rand 0000004c S8e7b3d203072 _
//L S8e7b3d203072c1 c1 00000052 s S8e7b3d203072
//L S8e7b3d203072c2 c2 00000058 s S8e7b3d203072
//L S8e7b3d203072c3 c3 0000005e s S8e7b3d203072
//L str_chr str_chr 00000067 Sbe1a78b9d15e _
//= GPIO.PORTA GPIO.PORTA 0000ff00 S0e483de54bb5 _
//= GPIO.PORTB GPIO.PORTB 0000ff01 S0e483de54bb5 _
//= GPIO.PORTC GPIO.PORTC 0000ff02 S0e483de54bb5 _
//= GPIO.PORTD GPIO.PORTD 0000ff03 S0e483de54bb5 _
//= GPIOA.ODR GPIOA.ODR 0000ff00 S0e483de54bb5 _
//= GPIOB.ODR GPIOB.ODR 0000ff01 S0e483de54bb5 _
//= GPIOC.ODR GPIOC.ODR 0000ff02 S0e483de54bb5 _
//= GPIOD.ODR GPIOD.ODR 0000ff03 S0e483de54bb5 _
//= GPIO.7SEG GPIO.7SEG 0000ff00 S0e483de54bb5 _
//= GPIO.LED GPIO.LED 0000ff01 S0e483de54bb5 _
//= GPIO.PORTI GPIO.PORTI 0000ff20 S0e483de54bb5 _
//= GPIO.PORTJ GPIO.PORTJ 0000ff10 S0e483de54bb5 _
//= GPIOI.IDR GPIOI.IDR 0000ff20 S0e483de54bb5 _
//= GPIOJ.IDR GPIOJ.IDR 0000ff10 S0e483de54bb5 _
//= GPIO.BTN GPIO.BTN 0000ff20 S0e483de54bb5 _
//= GPIO.SW GPIO.SW 0000ff10 S0e483de54bb5 _
//= UART.DR UART.DR 0000ff40 S33927ab86900 _
//= UART.CTRL UART.CTRL 0000ff41 S33927ab86900 _
//= UART.RSTAT UART.RSTAT 0000ff42 S33927ab86900 _
//= UART.TSTAT UART.TSTAT 0000ff43 S33927ab86900 _
//= UART.CPB UART.CPB 0000ff44 S33927ab86900 _
//= UART.SREG0 UART.SREG0 0000ff4c S33927ab86900 _
//= UART.SREG1 UART.SREG1 0000ff4d S33927ab86900 _
//= UART.SREG2 UART.SREG2 0000ff4e S33927ab86900 _
//= UART.SREG3 UART.SREG3 0000ff4f S33927ab86900 _
//L _char_is_true _char_is_true 00000077 S602f0726a14b _
//L _char_is_false _char_is_false 00000079 S602f0726a14b _
//L isdigit isdigit 0000007b S847a5c4e618b _
//L islower islower 00000080 S9a7f1c151839 _
//L isupper isupper 00000085 S154e11ca77b1 _
//L isalpha isalpha 0000008a Sf1f3b6b1f10a _
//L isalnum isalnum 0000008f Sb95a2b17779b _
//L putchar putchar 00000094 S503b4c87a8c4 _
//L eprints eprints 00000095 S23554af9f140 _
//L eprintf eprintf 00000096 Sb401aee44acb _
//L input_avail input_avail 00000097 Sedd6b6695436 _
//L read read 00000098 S84a19e8ae015 _
//= _pm_callin _pm_callin 0000f000 Sd14c348df59b _
//= _pm_enter_by_uart _pm_enter_by_uart 0000f001 Sd14c348df59b _
//= _pm_getchar _pm_getchar 0000f002 Sd14c348df59b _
//= _pm_version _pm_version 0000f003 Sd14c348df59b _
//= _pm_itobcd _pm_itobcd 0000f004 Sd14c348df59b _
//= _pm_cold_start _pm_cold_start 0000f005 Sd14c348df59b _
//= _pm_strchr _pm_strchr 0000f006 Sd14c348df59b _
//= _pm_streq _pm_streq 0000f007 Sd14c348df59b _
//= _pm_check_uart _pm_check_uart 0000f008 Sd14c348df59b _
//= _pm_input_avail _pm_input_avail 0000f008 Sd14c348df59b _
//= _pm_hexchar2value _pm_hexchar2value 0000f009 Sd14c348df59b _
//= _pm_value2hexchar _pm_value2hexchar 0000f00a Sd14c348df59b _
//= _pm_htoi _pm_htoi 0000f00b Sd14c348df59b _
//= _pm_strieq _pm_strieq 0000f00c Sd14c348df59b _
//= _pm_read _pm_read 0000f00d Sd14c348df59b _
//= _pm_putchar _pm_putchar 0000f00e Sd14c348df59b _
//= _pm_prints _pm_prints 0000f00f Sd14c348df59b _
//= _pm_printsnl _pm_printsnl 0000f010 Sd14c348df59b _
//= _pm_print_vhex _pm_print_vhex 0000f011 Sd14c348df59b _
//= _pm_pes _pm_pes 0000f012 Sd14c348df59b _
//= _pm_printd _pm_printd 0000f013 Sd14c348df59b _
//= _pm_printf _pm_printf 0000f014 Sd14c348df59b _
//= _pm_pesf _pm_pesf 0000f015 Sd14c348df59b _
//= _pm_ascii2seg _pm_ascii2seg 0000f016 Sd14c348df59b _
//L monitor monitor 0000009a Sd14c348df59b _
//L monitor_by_uart monitor_by_uart 0000009b Sd14c348df59b _
//L monitor_by_button monitor_by_button 0000009c Sd14c348df59b _
//L monitor_version monitor_version 000000a2 Sd14c348df59b _
//L _nr_to_mask _nr_to_mask 000000a8 S45ec84dfaab0 _
//L S45ec84dfaab0nr_to_mask_cyc nr_to_mask_cyc 000000ab s S45ec84dfaab0
//L S45ec84dfaab0nr_to_mask_ret nr_to_mask_ret 000000b0 s S45ec84dfaab0
//L S38738b71c88clast_btn last_btn 000000b3 s S38738b71c88c
//L S38738b71c88clast_sw last_sw 000000b4 s S38738b71c88c
//L S38738b71c88clast_btn_down last_btn_down 000000b5 s S38738b71c88c
//L S38738b71c88clast_sw_down last_sw_down 000000b6 s S38738b71c88c
//L S38738b71c88clast_btn_inited last_btn_inited 000000b7 s S38738b71c88c
//L S38738b71c88clast_sw_inited last_sw_inited 000000b8 s S38738b71c88c
//L _lib_edge_detect _lib_edge_detect 000000b9 S38738b71c88c _
//L S38738b71c88cinit_btn init_btn 000000c1 s S38738b71c88c
//L S38738b71c88cinit_sw init_sw 000000ca s S38738b71c88c
//L S38738b71c88cpressed_inited pressed_inited 000000d3 s S38738b71c88c
//L S38738b71c88cch_btn ch_btn 000000d6 s S38738b71c88c
//L S38738b71c88cch_sw ch_sw 000000d9 s S38738b71c88c
//L S38738b71c88ccheck_push check_push 000000e9 s S38738b71c88c
//L S38738b71c88ccheck_release check_release 000000ec s S38738b71c88c
//L S38738b71c88cpressed_true pressed_true 000000ee s S38738b71c88c
//L S38738b71c88cpressed_false pressed_false 000000f0 s S38738b71c88c
//L S38738b71c88cpressed_end pressed_end 000000f1 s S38738b71c88c
//L btn_restart btn_restart 000000f7 S38738b71c88c _
//L sw_restart sw_restart 000000fc S38738b71c88c _
//L btn_posedge btn_posedge 00000101 Saed5ad4c4c92 _
//L btn_negedge btn_negedge 00000109 Saed5ad4c4c92 _
//L btn_get btn_get 00000111 Saed5ad4c4c92 _

//; CODE
//P -
//F simif_print.asm
04d0002e //C 00000     4 ldl0	sp,stack
//R 00000 #16 stack 0000002e
04100020 //C 00001     6 ldl0	r1,Hello
//R 00001 #16 Hello 00000020
08000015 //C 00002     7 call	print
//R 00002 #27 print 00000015
04f00003 //C 00003     8 vege:	jmp	vege
//R 00003 #16 vege 00000003
//G vege
04000041 //C 00004    11 ldl0	r0,'A' ;65		; 'A'
//G start
0800000c //C 00005    13 call	local_putchar
//R 00005 #27 local_putchar 0000000c
//G cikl
07000200 //C 00006    14 inc	r0
04a0005a //C 00007    15 ldl0	r10,'Z' ;91		; 'Z'
07a00200 //C 00008    16 inc	r10
07a0a780 //C 00009    17 cmp	r10,r0,r10
94f00005 //C 0000a    18 jnz	cikl
//R 0000a #16 cikl 00000005
04f00004 //C 0000b    19 jmp	start
//R 0000b #16 start 00000004
02ed0000 //C 0000c    23 push	r14
//G local_putchar
07d00200 //C 0000d    24 inc	sp
04c00070 //C 0000e    25 ldl0	r12,'p' ;112		; 'p'
04a0ffff //C 0000f    26 ldl0	r10,simif
//R 0000f #16 simif 0000ffff
02ca0000 //C 00010    27 st	r12,r10
020a0000 //C 00011    28 st	r0,r10
07d00280 //C 00012    29 dec	sp
01ed0000 //C 00013    30 pop	r14
03fe0000 //C 00014    31 ret
02ed0000 //C 00015    35 push	r14
//G print
07d00200 //C 00016    36 inc	sp
01010000 //C 00017    38 ld	r0,r1
//G print_cikl
07000380 //C 00018    39 or	r0,r0,r0
b4f0001d //C 00019    40 jz	print_exit
//R 00019 #16 print_exit 0000001d
0800000c //C 0001a    41 call	local_putchar
//R 0001a #27 local_putchar 0000000c
07100200 //C 0001b    42 inc	r1
04f00017 //C 0001c    43 jmp	print_cikl
//R 0001c #16 print_cikl 00000017
07d00280 //C 0001d    45 dec	sp
//G print_exit
01ed0000 //C 0001e    46 pop	r14
03fe0000 //C 0001f    47 ret
00000048 //C 00020    50 db	'H'
//G Hello
00000065 //C 00021    51 db	'e'
0000006c //C 00022    52 db	'l'
0000006c //C 00023    53 db	'l'
0000006f //C 00024    54 db	'o'
00000020 //C 00025    55 db	32
00000057 //C 00026    56 db	'W'
0000006f //C 00027    57 db	'o'
00000072 //C 00028    58 db	'r'
0000006c //C 00029    59 db	'l'
00000064 //C 0002a    60 db	'd'
00000021 //C 0002b    61 db	'!'
0000000a //C 0002c    62 db	10
00000000 //C 0002d    63 db	0
0ded0000 //C 0002e    12 push	lr
//G stack
//F math.asm
//P S293d8fdbaa47 _lib_segment_div
0ded0000 //C 0002f    15 push	lr
//G div
0d6d0000 //C 00030    16 push	r6
021b0000 //C 00031    18 sz	r1
21f20036 //C 00032    19 NZ jmp	div_dok
//R 00032 #16 div_dok 00000036
00400000 //C 00033    20 mov	r4,r0		; div by zero
01520000 //C 00034    21 mvzl	r5,0x0
01f20047 //C 00035    22 jmp	div_ret
//R 00035 #16 div_ret 00000047
01420000 //C 00036    25 mvzl	r4,0		; Q= 0
//N div_dok S293d8fdbaa47
//N div_dummy S293d8fdbaa47
01520000 //C 00037    26 mvzl	r5,0		; R= 0
01618000 //C 00038    27 mvh	r6,0x80000000	; m= 1<<31
01600000 //C 00039    28 mvl	r6,0x80000000
026b0000 //C 0003a    30 sz	r6
//N div_cyc S293d8fdbaa47
11f20047 //C 0003b    31 Z jmp	div_ret
//R 0003b #16 div_ret 00000047
02580000 //C 0003c    32 shl	r5		; r<<= 1
000c0600 //C 0003d    33 test	r0,r6		; if (n&m)
215d0001 //C 0003e    34 NZ or	r5,1		; r|= 1
00580100 //C 0003f    35 cmp	r5,r1		; if (r>=d)
41f20045 //C 00040    36 LO jmp	div_cyc_next
//R 00040 #16 div_cyc_next 00000045
00560100 //C 00041    37 sub	r5,r1		; r-= d
004d0600 //C 00042    38 or	r4,r6		; q|= m
01f20045 //C 00043    39 jmp	div_cyc_next
//R 00043 #16 div_cyc_next 00000045
01f2003a //C 00044    40 jmp	div_cyc
//R 00044 #16 div_cyc 0000003a
02690000 //C 00045    42 shr	r6		; m>>= 1
//N div_cyc_next S293d8fdbaa47
01f2003a //C 00046    43 jmp	div_cyc
//R 00046 #16 div_cyc 0000003a
0f6d0000 //C 00047    45 pop	r6
//N div_ret S293d8fdbaa47
0ffd0000 //C 00048    46 pop	pc
//P S8e7b3d203072 _lib_segment_rand
00000049 //C 00049    58 db	2127401289
//N seed S8e7b3d203072
06000049 //C 0004a    65 st	r0,seed
//R 0004a #16 seed 00000049
//G srand
00f00e00 //C 0004b    66 ret
0ded0000 //C 0004c    72 push	lr
//G rand
0d0d0000 //C 0004d    73 push	r0
0d2d0000 //C 0004e    74 push	r2
07000049 //C 0004f    76 ld	r0,seed
//R 0004f #16 seed 00000049
00400000 //C 00050    77 mov	r4,r0
0122000d //C 00051    78 mvzl	r2,13
02480000 //C 00052    79 c1:	shl	r4
//N c1 S8e7b3d203072
0124ffff //C 00053    80 dec	r2
21f20052 //C 00054    81 jnz	c1
//R 00054 #16 c1 00000052
000e0400 //C 00055    82 xor	r0,r4
00400000 //C 00056    83 mov	r4,r0
01220011 //C 00057    84 mvzl	r2,17
02490000 //C 00058    85 c2:	shr	r4
//N c2 S8e7b3d203072
0124ffff //C 00059    86 dec	r2
21f20058 //C 0005a    87 jnz	c2
//R 0005a #16 c2 00000058
000e0400 //C 0005b    88 xor	r0,r4
00400000 //C 0005c    89 mov	r4,r0
01220005 //C 0005d    90 mvzl	r2,5
02480000 //C 0005e    91 c3:	shl	r4
//N c3 S8e7b3d203072
0124ffff //C 0005f    92 dec	r2
21f2005e //C 00060    93 jnz	c3
//R 00060 #16 c3 0000005e
000e0400 //C 00061    94 xor	r0,r4
06000049 //C 00062    95 st	r0,seed
//R 00062 #16 seed 00000049
00400000 //C 00063    97 mov	r4,r0
0f2d0000 //C 00064    99 pop	r2
0f0d0000 //C 00065   100 pop	r0
0ffd0000 //C 00066   101 pop	pc
//F str.asm
//P Sbe1a78b9d15e _lib_segment_str_chr
020b0000 //C 00067    94 sz	r0		; check NULL pointer
//G str_chr
120d0000 //C 00068    95 Z clc
10f00e00 //C 00069    96 Z ret
02100000 //C 0006a    97 zeb	r1		; prepare character
0ded0000 //C 0006b    98 push	lr
0d1d0000 //C 0006c    99 push	r1
0d2d0000 //C 0006d   100 push	r2
00400000 //C 0006e   101 mov	r4,r0
00000100 //C 0006f   102 mov	r0,r1
00100400 //C 00070   103 mov	r1,r4
0400f006 //C 00071   104 call	_pm_strchr
//R 00071 #24 _pm_strchr 0000f006
00400100 //C 00072   105 mov	r4,r1
00500200 //C 00073   106 mov	r5,r2
0f2d0000 //C 00074   107 pop	r2
0f1d0000 //C 00075   108 pop	r1
0ffd0000 //C 00076   109 pop	pc
//F char.asm
//P S602f0726a14b _lib_segment_character_fn
020c0000 //C 00077    22 sec
//G _char_is_true
00f00e00 //C 00078    23 ret
020d0000 //C 00079    25 clc
//G _char_is_false
00f00e00 //C 0007a    26 ret
//P S847a5c4e618b _lib_segment_isdigit
01080030 //C 0007b    37 cmp	R0,'0'
//G isdigit
41f20079 //C 0007c    38 ULT jmp	_char_is_false
//R 0007c #16 _char_is_false 00000079
01080039 //C 0007d    39 cmp	R0,'9'
91f20079 //C 0007e    40 UGT jmp	_char_is_false
//R 0007e #16 _char_is_false 00000079
01f20077 //C 0007f    41 jmp _char_is_true
//R 0007f #16 _char_is_true 00000077
//P S9a7f1c151839 _lib_segment_islower
01080061 //C 00080    53 cmp	r0,'a'
//G islower
41f20079 //C 00081    54 ULT jmp	_char_is_false
//R 00081 #16 _char_is_false 00000079
0108007a //C 00082    55 cmp	r0,'z'
91f20079 //C 00083    56 UGT jmp	_char_is_false
//R 00083 #16 _char_is_false 00000079
01f20077 //C 00084    57 jmp	_char_is_true
//R 00084 #16 _char_is_true 00000077
//P S154e11ca77b1 _lib_segment_isupper
01080041 //C 00085    69 cmp	r0,'A'
//G isupper
41f20079 //C 00086    70 ULT jmp	_char_is_false
//R 00086 #16 _char_is_false 00000079
0108005a //C 00087    71 cmp	r0,'Z'
91f20079 //C 00088    72 UGT jmp	_char_is_false
//R 00088 #16 _char_is_false 00000079
01f20077 //C 00089    73 jmp	_char_is_true
//R 00089 #16 _char_is_true 00000077
//P Sf1f3b6b1f10a _lib_segment_isalpha
0ded0000 //C 0008a    85 push	lr
//G isalpha
04000080 //C 0008b    86 call	islower
//R 0008b #24 islower 00000080
3ffd0000 //C 0008c    87 C pop	pc
04000085 //C 0008d    88 call	isupper
//R 0008d #24 isupper 00000085
0ffd0000 //C 0008e    89 pop	pc
//P Sb95a2b17779b _lib_segment_isalnum
0ded0000 //C 0008f   101 push	lr
//G isalnum
0400008a //C 00090   102 call	isalpha
//R 00090 #24 isalpha 0000008a
3ffd0000 //C 00091   103 C pop	pc
0400007b //C 00092   104 call	isdigit
//R 00092 #24 isdigit 0000007b
0ffd0000 //C 00093   105 pop	pc
//F inout.asm
//P S503b4c87a8c4 _lib_segment_putchar
01f2f00e //C 00094    24 jmp	_pm_putchar
//R 00094 #16 _pm_putchar 0000f00e
//G putchar
//P S23554af9f140 _lib_segment_eprints
01f2f012 //C 00095    54 jmp	_pm_pes
//R 00095 #16 _pm_pes 0000f012
//G eprints
//P Sb401aee44acb _lib_segment_eprintf
01f2f015 //C 00096    66 jmp	_pm_pesf
//R 00096 #16 _pm_pesf 0000f015
//G eprintf
//P Sedd6b6695436 _lib_segment_input_avail
01f2f008 //C 00097    72 jmp	_pm_check_uart
//R 00097 #16 _pm_check_uart 0000f008
//G input_avail
//P S84a19e8ae015 _lib_segment_read
0740ff40 //C 00098    89 ld	r4,UART.DR
//R 00098 #16 UART.DR 0000ff40
//G read
00f00e00 //C 00099    90 ret
//F mon.asm
//P Sd14c348df59b _lib_segment_pmon
01f2f000 //C 0009a    40 jmp	_pm_callin
//R 0009a #16 _pm_callin 0000f000
//G monitor
01f2f001 //C 0009b    44 jmp	_pm_enter_by_uart
//R 0009b #16 _pm_enter_by_uart 0000f001
//G monitor_by_uart
0ded0000 //C 0009c    48 push	lr
//G monitor_by_button
04000101 //C 0009d    49 call	btn_posedge
//R 0009d #24 btn_posedge 00000101
4ffd0000 //C 0009e    50 NC pop	pc
0400009a //C 0009f    51 call	monitor
//R 0009f #24 monitor 0000009a
040000f7 //C 000a0    52 call	btn_restart
//R 000a0 #24 btn_restart 000000f7
0ffd0000 //C 000a1    53 pop	pc
0ded0000 //C 000a2    57 push	lr
//G monitor_version
0d0d0000 //C 000a3    58 push	r0
0400f003 //C 000a4    59 call	_pm_version
//R 000a4 #24 _pm_version 0000f003
00400000 //C 000a5    60 mov	r4,r0
0f0d0000 //C 000a6    61 pop	r0
0ffd0000 //C 000a7    62 pop	pc
//F bsp.asm
//P S45ec84dfaab0 _lib_segment_nr_to_mask
0d1d0000 //C 000a8    26 push	r1
//G _nr_to_mask
010b001f //C 000a9    27 btst	r0,0x1f		; max nr is 31
01120001 //C 000aa    28 mvzl	r1,1		; mask for nr==0
020b0000 //C 000ab    30 sz	r0		; is nr zero?
//N nr_to_mask_cyc S45ec84dfaab0
11f200b0 //C 000ac    31 jz	nr_to_mask_ret	; if yes, go out
//R 000ac #16 nr_to_mask_ret 000000b0
02180000 //C 000ad    32 shl	r1		; shift mask up
0104ffff //C 000ae    33 dec	r0		; decrement nr
01f200ab //C 000af    34 jmp	nr_to_mask_cyc	; check for zero
//R 000af #16 nr_to_mask_cyc 000000ab
00000100 //C 000b0    36 mov	r0,r1		; return mask in R0
//N nr_to_mask_ret S45ec84dfaab0
0f1d0000 //C 000b1    37 pop	r1
00f00e00 //C 000b2    38 ret
//P S38738b71c88c _lib_segment_edge
00000000 //C 000b3   120 ds	1
//+ 00000001
//N last_btn S38738b71c88c
00000000 //C 000b4   122 ds	1
//+ 00000001
//N last_sw S38738b71c88c
00000000 //C 000b5   124 ds	1
//+ 00000001
//N last_btn_down S38738b71c88c
00000000 //C 000b6   126 ds	1
//+ 00000001
//N last_sw_down S38738b71c88c
00000000 //C 000b7   128 db	0
//N last_btn_inited S38738b71c88c
00000000 //C 000b8   130 db	0
//N last_sw_inited S38738b71c88c
0ded0000 //C 000b9   141 push	lr
//G _lib_edge_detect
0d1d0000 //C 000ba   142 push	r1
0d2d0000 //C 000bb   143 push	r2
0d3d0000 //C 000bc   144 push	r3
0d4d0000 //C 000bd   145 push	r4
0d5d0000 //C 000be   146 push	r5
00500100 //C 000bf   148 mov	r5,r1		; what edge to check
31f200ca //C 000c0   149 C jmp	init_sw
//R 000c0 #16 init_sw 000000ca
071000b7 //C 000c1   151 ld	r1,last_btn_inited
//R 000c1 #16 last_btn_inited 000000b7
//N init_btn S38738b71c88c
021b0000 //C 000c2   152 sz	r1
21f200d3 //C 000c3   153 jnz	pressed_inited
//R 000c3 #16 pressed_inited 000000d3
01120001 //C 000c4   154 mvzl	r1,1
061000b7 //C 000c5   155 st	r1,last_btn_inited
//R 000c5 #16 last_btn_inited 000000b7
0710ff20 //C 000c6   156 ld	r1,GPIO.BTN
//R 000c6 #16 GPIO.BTN 0000ff20
061000b3 //C 000c7   157 st	r1,last_btn
//R 000c7 #16 last_btn 000000b3
061000b5 //C 000c8   158 st	r1,last_btn_down
//R 000c8 #16 last_btn_down 000000b5
01f200f0 //C 000c9   159 jmp	pressed_false
//R 000c9 #16 pressed_false 000000f0
071000b8 //C 000ca   161 ld	r1,last_sw_inited
//R 000ca #16 last_sw_inited 000000b8
//N init_sw S38738b71c88c
021b0000 //C 000cb   162 sz	r1
21f200d3 //C 000cc   163 jnz	pressed_inited
//R 000cc #16 pressed_inited 000000d3
01120001 //C 000cd   164 mvzl	r1,1
061000b8 //C 000ce   165 st	r1,last_sw_inited
//R 000ce #16 last_sw_inited 000000b8
0710ff10 //C 000cf   166 ld	r1,GPIO.SW
//R 000cf #16 GPIO.SW 0000ff10
061000b4 //C 000d0   167 st	r1,last_sw
//R 000d0 #16 last_sw 000000b4
061000b6 //C 000d1   168 st	r1,last_sw_down
//R 000d1 #16 last_sw_down 000000b6
01f200f0 //C 000d2   169 jmp	pressed_false
//R 000d2 #16 pressed_false 000000f0
4122ff20 //C 000d3   173 NC mvzl	r2,GPIO.BTN
//R 000d3 #16 GPIO.BTN 0000ff20
//N pressed_inited S38738b71c88c
3122ff10 //C 000d4   174 C mvzl	r2,GPIO.SW
//R 000d4 #16 GPIO.SW 0000ff10
31f200d9 //C 000d5   175 jc	ch_sw
//R 000d5 #16 ch_sw 000000d9
025b0000 //C 000d6   177 sz	r5
//N ch_btn S38738b71c88c
111200b3 //C 000d7   178 Z mvzl	r1,last_btn
//R 000d7 #16 last_btn 000000b3
211200b5 //C 000d8   179 NZ mvzl	r1,last_btn_down
//R 000d8 #16 last_btn_down 000000b5
025b0000 //C 000d9   181 sz	r5
//N ch_sw S38738b71c88c
111200b4 //C 000da   182 Z mvzl	r1,last_sw
//R 000da #16 last_sw 000000b4
211200b6 //C 000db   183 NZ mvzl	r1,last_sw_down
//R 000db #16 last_sw_down 000000b6
0e310000 //C 000dc   187 ld	r3,r1
0e420000 //C 000dd   188 ld	r4,r2
003f0000 //C 000de   190 and	r3,r0		; masked last
004f0000 //C 000df   191 and	r4,r0		; masked port
00380400 //C 000e0   192 cmp	r3,r4
11f200f0 //C 000e1   193 EQ jmp	pressed_false
//R 000e1 #16 pressed_false 000000f0
02040000 //C 000e2   194 not	r0		; negated mask
0e310000 //C 000e3   195 ld	r3,r1		; original last
003f0000 //C 000e4   196 and	r3,r0		; clear checked bit
003d0400 //C 000e5   197 or	r3,r4		; or with masked port
0c310000 //C 000e6   198 st	r3,r1		; store new last value
025b0000 //C 000e7   199 sz	r5
21f200ec //C 000e8   200 jnz	check_release
//R 000e8 #16 check_release 000000ec
024b0000 //C 000e9   202 sz	r4		; check new port value
//N check_push S38738b71c88c
11f200f0 //C 000ea   203 jz	pressed_false
//R 000ea #16 pressed_false 000000f0
21f200ee //C 000eb   204 jnz	pressed_true
//R 000eb #16 pressed_true 000000ee
024b0000 //C 000ec   206 sz	r4
//N check_release S38738b71c88c
21f200f0 //C 000ed   207 jnz	pressed_false
//R 000ed #16 pressed_false 000000f0
020c0000 //C 000ee   210 sec
//N pressed_true S38738b71c88c
01f200f1 //C 000ef   211 jmp	pressed_end
//R 000ef #16 pressed_end 000000f1
020d0000 //C 000f0   213 clc
//N pressed_false S38738b71c88c
0f5d0000 //C 000f1   215 pop	r5
//N pressed_end S38738b71c88c
0f4d0000 //C 000f2   216 pop	r4
0f3d0000 //C 000f3   217 pop	r3
0f2d0000 //C 000f4   218 pop	r2
0f1d0000 //C 000f5   219 pop	r1
0ffd0000 //C 000f6   220 pop	pc
0d1d0000 //C 000f7   225 push	r1
//G btn_restart
0710ff20 //C 000f8   226 ld	r1,GPIO.BTN
//R 000f8 #16 GPIO.BTN 0000ff20
061000b3 //C 000f9   227 st	r1,last_btn
//R 000f9 #16 last_btn 000000b3
0f1d0000 //C 000fa   228 pop	r1
00f00e00 //C 000fb   229 ret
0d1d0000 //C 000fc   233 push	r1
//G sw_restart
0710ff10 //C 000fd   234 ld	r1,GPIO.SW
//R 000fd #16 GPIO.SW 0000ff10
061000b4 //C 000fe   235 st	r1,last_sw
//R 000fe #16 last_sw 000000b4
0f1d0000 //C 000ff   236 pop	r1
00f00e00 //C 00100   237 ret
//P Saed5ad4c4c92 _lib_segment_btn
0ded0000 //C 00101   250 push	lr
//G btn_posedge
040000a8 //C 00102   251 call	_nr_to_mask
//R 00102 #24 _nr_to_mask 000000a8
0d1d0000 //C 00103   252 push	r1
01120000 //C 00104   253 mvzl	r1,0
020d0000 //C 00105   254 clc
040000b9 //C 00106   255 call	_lib_edge_detect
//R 00106 #24 _lib_edge_detect 000000b9
0f1d0000 //C 00107   256 pop	r1
0ffd0000 //C 00108   257 pop	pc
0ded0000 //C 00109   266 push	lr
//G btn_negedge
040000a8 //C 0010a   267 call	_nr_to_mask
//R 0010a #24 _nr_to_mask 000000a8
0d1d0000 //C 0010b   268 push	r1
01120001 //C 0010c   269 mvzl	r1,1
020d0000 //C 0010d   270 clc
040000b9 //C 0010e   271 call	_lib_edge_detect
//R 0010e #24 _lib_edge_detect 000000b9
0f1d0000 //C 0010f   272 pop	r1
0ffd0000 //C 00110   273 pop	pc
0ded0000 //C 00111   282 push	lr
//G btn_get
0d1d0000 //C 00112   283 push	r1
040000a8 //C 00113   284 call	_nr_to_mask
//R 00113 #24 _nr_to_mask 000000a8
0710ff20 //C 00114   285 ld	r1,GPIO.BTN
//R 00114 #16 GPIO.BTN 0000ff20
001f0000 //C 00115   286 and	r1,r0
120d0000 //C 00116   287 Z clc
220c0000 //C 00117   288 NZ sec
0f1d0000 //C 00118   289 pop	r1
0ffd0000 //C 00119   290 pop	pc
//H 42b87d9c
//E
