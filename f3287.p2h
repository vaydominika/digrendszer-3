//U P2

//; SEGMENTS
//T S293d8fdbaa47 _lib_segment_div noload=0 abs=0
//T S8e7b3d203072 _lib_segment_rand noload=0 abs=0
//T Sbe1a78b9d15e _lib_segment_str_chr noload=0 abs=0
//T S0e483de54bb5 _lib_segment_regs_of_gpio noload=0 abs=0
//T S33927ab86900 _lib_segment_regs_of_uart noload=0 abs=0
//T S602f0726a14b _lib_segment_character_fn noload=0 abs=0
//T S847a5c4e618b _lib_segment_isdigit noload=0 abs=0
//T S9a7f1c151839 _lib_segment_islower noload=0 abs=0
//T S154e11ca77b1 _lib_segment_isupper noload=0 abs=0
//T Sf1f3b6b1f10a _lib_segment_isalpha noload=0 abs=0
//T Sb95a2b17779b _lib_segment_isalnum noload=0 abs=0
//T S503b4c87a8c4 _lib_segment_putchar noload=0 abs=0
//T S23554af9f140 _lib_segment_eprints noload=0 abs=0
//T Sb401aee44acb _lib_segment_eprintf noload=0 abs=0
//T Sedd6b6695436 _lib_segment_input_avail noload=0 abs=0
//T S7592e12f2189 _lib_segment_getchar noload=0 abs=0
//T S84a19e8ae015 _lib_segment_read noload=0 abs=0
//T Sd14c348df59b _lib_segment_pmon noload=0 abs=0
//T S45ec84dfaab0 _lib_segment_nr_to_mask noload=0 abs=0
//T S38738b71c88c _lib_segment_edge noload=0 abs=0
//T Saed5ad4c4c92 _lib_segment_btn noload=0 abs=0

//; SYMBOLS
//L olvas olvas 0000001b - _
//L kovetkezo kovetkezo 00000028 - _
//L vege vege 0000002a - _
//L verem_vege verem_vege 000000b3 - _
//L div div 000000b4 S293d8fdbaa47 _
//L S293d8fdbaa47div_dok div_dok 000000bb s S293d8fdbaa47
//L S293d8fdbaa47div_dummy div_dummy 000000bb s S293d8fdbaa47
//L S293d8fdbaa47div_cyc div_cyc 000000bf s S293d8fdbaa47
//L S293d8fdbaa47div_cyc_next div_cyc_next 000000ca s S293d8fdbaa47
//L S293d8fdbaa47div_ret div_ret 000000cc s S293d8fdbaa47
//L S8e7b3d203072seed seed 000000ce s S8e7b3d203072
//L srand srand 000000cf S8e7b3d203072 _
//L rand rand 000000d1 S8e7b3d203072 _
//L S8e7b3d203072c1 c1 000000d7 s S8e7b3d203072
//L S8e7b3d203072c2 c2 000000dd s S8e7b3d203072
//L S8e7b3d203072c3 c3 000000e3 s S8e7b3d203072
//L str_chr str_chr 000000ec Sbe1a78b9d15e _
//= GPIO.PORTA GPIO.PORTA 0000ff00 S0e483de54bb5 _
//= GPIO.PORTB GPIO.PORTB 0000ff01 S0e483de54bb5 _
//= GPIO.PORTC GPIO.PORTC 0000ff02 S0e483de54bb5 _
//= GPIO.PORTD GPIO.PORTD 0000ff03 S0e483de54bb5 _
//= GPIOA.ODR GPIOA.ODR 0000ff00 S0e483de54bb5 _
//= GPIOB.ODR GPIOB.ODR 0000ff01 S0e483de54bb5 _
//= GPIOC.ODR GPIOC.ODR 0000ff02 S0e483de54bb5 _
//= GPIOD.ODR GPIOD.ODR 0000ff03 S0e483de54bb5 _
//= GPIO.7SEG GPIO.7SEG 0000ff00 S0e483de54bb5 _
//= GPIO.LED GPIO.LED 0000ff01 S0e483de54bb5 _
//= GPIO.PORTI GPIO.PORTI 0000ff20 S0e483de54bb5 _
//= GPIO.PORTJ GPIO.PORTJ 0000ff10 S0e483de54bb5 _
//= GPIOI.IDR GPIOI.IDR 0000ff20 S0e483de54bb5 _
//= GPIOJ.IDR GPIOJ.IDR 0000ff10 S0e483de54bb5 _
//= GPIO.BTN GPIO.BTN 0000ff20 S0e483de54bb5 _
//= GPIO.SW GPIO.SW 0000ff10 S0e483de54bb5 _
//= UART.DR UART.DR 0000ff40 S33927ab86900 _
//= UART.CTRL UART.CTRL 0000ff41 S33927ab86900 _
//= UART.RSTAT UART.RSTAT 0000ff42 S33927ab86900 _
//= UART.TSTAT UART.TSTAT 0000ff43 S33927ab86900 _
//= UART.CPB UART.CPB 0000ff44 S33927ab86900 _
//= UART.SREG0 UART.SREG0 0000ff4c S33927ab86900 _
//= UART.SREG1 UART.SREG1 0000ff4d S33927ab86900 _
//= UART.SREG2 UART.SREG2 0000ff4e S33927ab86900 _
//= UART.SREG3 UART.SREG3 0000ff4f S33927ab86900 _
//L _char_is_true _char_is_true 000000fc S602f0726a14b _
//L _char_is_false _char_is_false 000000fe S602f0726a14b _
//L isdigit isdigit 00000100 S847a5c4e618b _
//L islower islower 00000105 S9a7f1c151839 _
//L isupper isupper 0000010a S154e11ca77b1 _
//L isalpha isalpha 0000010f Sf1f3b6b1f10a _
//L isalnum isalnum 00000114 Sb95a2b17779b _
//L putchar putchar 00000119 S503b4c87a8c4 _
//L eprints eprints 0000011a S23554af9f140 _
//L eprintf eprintf 0000011b Sb401aee44acb _
//L input_avail input_avail 0000011c Sedd6b6695436 _
//L getchar getchar 0000011d S7592e12f2189 _
//L S7592e12f2189gc_wait gc_wait 0000011e s S7592e12f2189
//L read read 00000122 S84a19e8ae015 _
//= _pm_callin _pm_callin 0000f000 Sd14c348df59b _
//= _pm_enter_by_uart _pm_enter_by_uart 0000f001 Sd14c348df59b _
//= _pm_getchar _pm_getchar 0000f002 Sd14c348df59b _
//= _pm_version _pm_version 0000f003 Sd14c348df59b _
//= _pm_itobcd _pm_itobcd 0000f004 Sd14c348df59b _
//= _pm_cold_start _pm_cold_start 0000f005 Sd14c348df59b _
//= _pm_strchr _pm_strchr 0000f006 Sd14c348df59b _
//= _pm_streq _pm_streq 0000f007 Sd14c348df59b _
//= _pm_check_uart _pm_check_uart 0000f008 Sd14c348df59b _
//= _pm_input_avail _pm_input_avail 0000f008 Sd14c348df59b _
//= _pm_hexchar2value _pm_hexchar2value 0000f009 Sd14c348df59b _
//= _pm_value2hexchar _pm_value2hexchar 0000f00a Sd14c348df59b _
//= _pm_htoi _pm_htoi 0000f00b Sd14c348df59b _
//= _pm_strieq _pm_strieq 0000f00c Sd14c348df59b _
//= _pm_read _pm_read 0000f00d Sd14c348df59b _
//= _pm_putchar _pm_putchar 0000f00e Sd14c348df59b _
//= _pm_prints _pm_prints 0000f00f Sd14c348df59b _
//= _pm_printsnl _pm_printsnl 0000f010 Sd14c348df59b _
//= _pm_print_vhex _pm_print_vhex 0000f011 Sd14c348df59b _
//= _pm_pes _pm_pes 0000f012 Sd14c348df59b _
//= _pm_printd _pm_printd 0000f013 Sd14c348df59b _
//= _pm_printf _pm_printf 0000f014 Sd14c348df59b _
//= _pm_pesf _pm_pesf 0000f015 Sd14c348df59b _
//= _pm_ascii2seg _pm_ascii2seg 0000f016 Sd14c348df59b _
//L monitor monitor 00000124 Sd14c348df59b _
//L monitor_by_uart monitor_by_uart 00000125 Sd14c348df59b _
//L monitor_by_button monitor_by_button 00000126 Sd14c348df59b _
//L monitor_version monitor_version 0000012c Sd14c348df59b _
//L _nr_to_mask _nr_to_mask 00000132 S45ec84dfaab0 _
//L S45ec84dfaab0nr_to_mask_cyc nr_to_mask_cyc 00000135 s S45ec84dfaab0
//L S45ec84dfaab0nr_to_mask_ret nr_to_mask_ret 0000013a s S45ec84dfaab0
//L S38738b71c88clast_btn last_btn 0000013d s S38738b71c88c
//L S38738b71c88clast_sw last_sw 0000013e s S38738b71c88c
//L S38738b71c88clast_btn_down last_btn_down 0000013f s S38738b71c88c
//L S38738b71c88clast_sw_down last_sw_down 00000140 s S38738b71c88c
//L S38738b71c88clast_btn_inited last_btn_inited 00000141 s S38738b71c88c
//L S38738b71c88clast_sw_inited last_sw_inited 00000142 s S38738b71c88c
//L _lib_edge_detect _lib_edge_detect 00000143 S38738b71c88c _
//L S38738b71c88cinit_btn init_btn 0000014b s S38738b71c88c
//L S38738b71c88cinit_sw init_sw 00000154 s S38738b71c88c
//L S38738b71c88cpressed_inited pressed_inited 0000015d s S38738b71c88c
//L S38738b71c88cch_btn ch_btn 00000160 s S38738b71c88c
//L S38738b71c88cch_sw ch_sw 00000163 s S38738b71c88c
//L S38738b71c88ccheck_push check_push 00000173 s S38738b71c88c
//L S38738b71c88ccheck_release check_release 00000176 s S38738b71c88c
//L S38738b71c88cpressed_true pressed_true 00000178 s S38738b71c88c
//L S38738b71c88cpressed_false pressed_false 0000017a s S38738b71c88c
//L S38738b71c88cpressed_end pressed_end 0000017b s S38738b71c88c
//L btn_restart btn_restart 00000181 S38738b71c88c _
//L sw_restart sw_restart 00000186 S38738b71c88c _
//L btn_posedge btn_posedge 0000018b Saed5ad4c4c92 _
//L btn_negedge btn_negedge 00000193 Saed5ad4c4c92 _
//L btn_get btn_get 0000019b Saed5ad4c4c92 _

//; CODE
//P -
//F faszgeci.asm
01d200b3 //C 00001     5 ldl0    sp,verem_vege
//R 00001 #16 verem_vege 000000b3
f400011b //C 00002     8 ces     eprintf
//R 00002 #24 eprintf 0000011b
00000049 //C 00003     9 db	73
00000072 //C 00004     9 db	114
0000006a //C 00005     9 db	106
00000020 //C 00006     9 db	32
00000062 //C 00007     9 db	98
00000065 //C 00008     9 db	101
00000020 //C 00009     9 db	32
00000065 //C 0000a     9 db	101
00000067 //C 0000b     9 db	103
00000079 //C 0000c     9 db	121
00000020 //C 0000d     9 db	32
00000073 //C 0000e     9 db	115
0000007a //C 0000f     9 db	122
0000006f //C 00010     9 db	111
00000076 //C 00011     9 db	118
00000065 //C 00012     9 db	101
00000067 //C 00013     9 db	103
00000065 //C 00014     9 db	101
00000074 //C 00015     9 db	116
0000003a //C 00016     9 db	58
00000020 //C 00017     9 db	32
00000000 //C 00018     9 db
01320000 //C 00019    11 ldl0    r3,0        ; Szavak számlálója (nulláról indulunk)
01520000 //C 0001a    12 ldl0    r5,0        ; Előző karakter betű volt-e (0=nem, 1=igen)
f400011d //C 0001b    15 ces     getchar     ; Karakter beolvasása
//R 0001b #24 getchar 0000011d
//G olvas
0112000d //C 0001c    18 mvzl    r1,13       ; Enter ASCII kódja (CR)
00480100 //C 0001d    19 cmp     r4,r1       ; Enter volt?
11f2002a //C 0001e    20 z jmp   vege        ; Ha igen, vége
//R 0001e #16 vege 0000002a
00000400 //C 0001f    22 mov     r0,r4       ; Átmásoljuk R4-ből R0-ba a kiíráshoz
f4000119 //C 00020    23 ces     putchar     ; Kiírjuk a karaktert (echo)
//R 00020 #24 putchar 00000119
00000400 //C 00021    26 mov     r0,r4       ; Karakter átmásolása R0-ba isalpha-hoz
0400010f //C 00022    27 call    isalpha     ; Betű-e?
//R 00022 #24 isalpha 0000010f
41520000 //C 00023    30 NC ldl0 r5,0
41f2001b //C 00024    31 NC jmp  olvas
//R 00024 #16 olvas 0000001b
025b0000 //C 00025    34 sz      r5
21f20028 //C 00026    35 NZ jmp  kovetkezo   ; Ha r5 nem nulla, akkor már számoltuk ezt a szót
//R 00026 #16 kovetkezo 00000028
013a0001 //C 00027    36 plus    r3,1        ; Új szó kezdődik
01520001 //C 00028    38 ldl0    r5,1        ; Jelezzük hogy betűnél vagyunk
//G kovetkezo
01f2001b //C 00029    39 jmp     olvas
//R 00029 #16 olvas 0000001b
0102000a //C 0002a    43 mvzl    r0,10       ; LF karakter
//G vege
f4000119 //C 0002b    44 ces     putchar
//R 0002b #24 putchar 00000119
00100300 //C 0002c    47 mov     r1,r3       ; A szavak számát R3-ból R1-be másoljuk az eprintf számára
00000100 //C 0002d    48 mov     r0,r1
f400011b //C 0002e    49 ces     eprintf
//R 0002e #24 eprintf 0000011b
00000045 //C 0002f    50 db	69
0000006e //C 00030    50 db	110
0000006e //C 00031    50 db	110
00000079 //C 00032    50 db	121
00000069 //C 00033    50 db	105
00000020 //C 00034    50 db	32
00000073 //C 00035    50 db	115
0000007a //C 00036    50 db	122
0000006f //C 00037    50 db	111
00000020 //C 00038    50 db	32
00000076 //C 00039    50 db	118
00000061 //C 0003a    50 db	97
0000006e //C 0003b    50 db	110
00000020 //C 0003c    50 db	32
00000061 //C 0003d    50 db	97
00000020 //C 0003e    50 db	32
00000073 //C 0003f    50 db	115
0000007a //C 00040    50 db	122
0000006f //C 00041    50 db	111
00000076 //C 00042    50 db	118
00000065 //C 00043    50 db	101
00000067 //C 00044    50 db	103
00000062 //C 00045    50 db	98
00000065 //C 00046    50 db	101
0000006e //C 00047    50 db	110
0000003a //C 00048    50 db	58
00000020 //C 00049    50 db	32
00000025 //C 0004a    50 db	37
00000064 //C 0004b    50 db	100
0000000a //C 0004c    50 db	10
00000000 //C 0004d    50 db
01f2f000 //C 0004e    53 jmp     0xf000      ; Kilépés a monitorba
00000000 //C 0004f    55 ds      100
//+ 00000064
00000000 //C 000b3    57 db	0
//G verem_vege
//F math.asm
//P S293d8fdbaa47 _lib_segment_div
0ded0000 //C 000b4    15 push	lr
//G div
0d6d0000 //C 000b5    16 push	r6
021b0000 //C 000b6    18 sz	r1
21f200bb //C 000b7    19 NZ jmp	div_dok
//R 000b7 #16 div_dok 000000bb
00400000 //C 000b8    20 mov	r4,r0		; div by zero
01520000 //C 000b9    21 mvzl	r5,0x0
01f200cc //C 000ba    22 jmp	div_ret
//R 000ba #16 div_ret 000000cc
01420000 //C 000bb    25 mvzl	r4,0		; Q= 0
//N div_dok S293d8fdbaa47
//N div_dummy S293d8fdbaa47
01520000 //C 000bc    26 mvzl	r5,0		; R= 0
01618000 //C 000bd    27 mvh	r6,0x80000000	; m= 1<<31
01600000 //C 000be    28 mvl	r6,0x80000000
026b0000 //C 000bf    30 sz	r6
//N div_cyc S293d8fdbaa47
11f200cc //C 000c0    31 Z jmp	div_ret
//R 000c0 #16 div_ret 000000cc
02580000 //C 000c1    32 shl	r5		; r<<= 1
000c0600 //C 000c2    33 test	r0,r6		; if (n&m)
215d0001 //C 000c3    34 NZ or	r5,1		; r|= 1
00580100 //C 000c4    35 cmp	r5,r1		; if (r>=d)
41f200ca //C 000c5    36 LO jmp	div_cyc_next
//R 000c5 #16 div_cyc_next 000000ca
00560100 //C 000c6    37 sub	r5,r1		; r-= d
004d0600 //C 000c7    38 or	r4,r6		; q|= m
01f200ca //C 000c8    39 jmp	div_cyc_next
//R 000c8 #16 div_cyc_next 000000ca
01f200bf //C 000c9    40 jmp	div_cyc
//R 000c9 #16 div_cyc 000000bf
02690000 //C 000ca    42 shr	r6		; m>>= 1
//N div_cyc_next S293d8fdbaa47
01f200bf //C 000cb    43 jmp	div_cyc
//R 000cb #16 div_cyc 000000bf
0f6d0000 //C 000cc    45 pop	r6
//N div_ret S293d8fdbaa47
0ffd0000 //C 000cd    46 pop	pc
//P S8e7b3d203072 _lib_segment_rand
00000049 //C 000ce    58 db	2127401289
//N seed S8e7b3d203072
060000ce //C 000cf    65 st	r0,seed
//R 000cf #16 seed 000000ce
//G srand
00f00e00 //C 000d0    66 ret
0ded0000 //C 000d1    72 push	lr
//G rand
0d0d0000 //C 000d2    73 push	r0
0d2d0000 //C 000d3    74 push	r2
070000ce //C 000d4    76 ld	r0,seed
//R 000d4 #16 seed 000000ce
00400000 //C 000d5    77 mov	r4,r0
0122000d //C 000d6    78 mvzl	r2,13
02480000 //C 000d7    79 c1:	shl	r4
//N c1 S8e7b3d203072
0124ffff //C 000d8    80 dec	r2
21f200d7 //C 000d9    81 jnz	c1
//R 000d9 #16 c1 000000d7
000e0400 //C 000da    82 xor	r0,r4
00400000 //C 000db    83 mov	r4,r0
01220011 //C 000dc    84 mvzl	r2,17
02490000 //C 000dd    85 c2:	shr	r4
//N c2 S8e7b3d203072
0124ffff //C 000de    86 dec	r2
21f200dd //C 000df    87 jnz	c2
//R 000df #16 c2 000000dd
000e0400 //C 000e0    88 xor	r0,r4
00400000 //C 000e1    89 mov	r4,r0
01220005 //C 000e2    90 mvzl	r2,5
02480000 //C 000e3    91 c3:	shl	r4
//N c3 S8e7b3d203072
0124ffff //C 000e4    92 dec	r2
21f200e3 //C 000e5    93 jnz	c3
//R 000e5 #16 c3 000000e3
000e0400 //C 000e6    94 xor	r0,r4
060000ce //C 000e7    95 st	r0,seed
//R 000e7 #16 seed 000000ce
00400000 //C 000e8    97 mov	r4,r0
0f2d0000 //C 000e9    99 pop	r2
0f0d0000 //C 000ea   100 pop	r0
0ffd0000 //C 000eb   101 pop	pc
//F str.asm
//P Sbe1a78b9d15e _lib_segment_str_chr
020b0000 //C 000ec    94 sz	r0		; check NULL pointer
//G str_chr
120d0000 //C 000ed    95 Z clc
10f00e00 //C 000ee    96 Z ret
02100000 //C 000ef    97 zeb	r1		; prepare character
0ded0000 //C 000f0    98 push	lr
0d1d0000 //C 000f1    99 push	r1
0d2d0000 //C 000f2   100 push	r2
00400000 //C 000f3   101 mov	r4,r0
00000100 //C 000f4   102 mov	r0,r1
00100400 //C 000f5   103 mov	r1,r4
0400f006 //C 000f6   104 call	_pm_strchr
//R 000f6 #24 _pm_strchr 0000f006
00400100 //C 000f7   105 mov	r4,r1
00500200 //C 000f8   106 mov	r5,r2
0f2d0000 //C 000f9   107 pop	r2
0f1d0000 //C 000fa   108 pop	r1
0ffd0000 //C 000fb   109 pop	pc
//F char.asm
//P S602f0726a14b _lib_segment_character_fn
020c0000 //C 000fc    22 sec
//G _char_is_true
00f00e00 //C 000fd    23 ret
020d0000 //C 000fe    25 clc
//G _char_is_false
00f00e00 //C 000ff    26 ret
//P S847a5c4e618b _lib_segment_isdigit
01080030 //C 00100    37 cmp	R0,'0'
//G isdigit
41f200fe //C 00101    38 ULT jmp	_char_is_false
//R 00101 #16 _char_is_false 000000fe
01080039 //C 00102    39 cmp	R0,'9'
91f200fe //C 00103    40 UGT jmp	_char_is_false
//R 00103 #16 _char_is_false 000000fe
01f200fc //C 00104    41 jmp _char_is_true
//R 00104 #16 _char_is_true 000000fc
//P S9a7f1c151839 _lib_segment_islower
01080061 //C 00105    53 cmp	r0,'a'
//G islower
41f200fe //C 00106    54 ULT jmp	_char_is_false
//R 00106 #16 _char_is_false 000000fe
0108007a //C 00107    55 cmp	r0,'z'
91f200fe //C 00108    56 UGT jmp	_char_is_false
//R 00108 #16 _char_is_false 000000fe
01f200fc //C 00109    57 jmp	_char_is_true
//R 00109 #16 _char_is_true 000000fc
//P S154e11ca77b1 _lib_segment_isupper
01080041 //C 0010a    69 cmp	r0,'A'
//G isupper
41f200fe //C 0010b    70 ULT jmp	_char_is_false
//R 0010b #16 _char_is_false 000000fe
0108005a //C 0010c    71 cmp	r0,'Z'
91f200fe //C 0010d    72 UGT jmp	_char_is_false
//R 0010d #16 _char_is_false 000000fe
01f200fc //C 0010e    73 jmp	_char_is_true
//R 0010e #16 _char_is_true 000000fc
//P Sf1f3b6b1f10a _lib_segment_isalpha
0ded0000 //C 0010f    85 push	lr
//G isalpha
04000105 //C 00110    86 call	islower
//R 00110 #24 islower 00000105
3ffd0000 //C 00111    87 C pop	pc
0400010a //C 00112    88 call	isupper
//R 00112 #24 isupper 0000010a
0ffd0000 //C 00113    89 pop	pc
//P Sb95a2b17779b _lib_segment_isalnum
0ded0000 //C 00114   101 push	lr
//G isalnum
0400010f //C 00115   102 call	isalpha
//R 00115 #24 isalpha 0000010f
3ffd0000 //C 00116   103 C pop	pc
04000100 //C 00117   104 call	isdigit
//R 00117 #24 isdigit 00000100
0ffd0000 //C 00118   105 pop	pc
//F inout.asm
//P S503b4c87a8c4 _lib_segment_putchar
01f2f00e //C 00119    24 jmp	_pm_putchar
//R 00119 #16 _pm_putchar 0000f00e
//G putchar
//P S23554af9f140 _lib_segment_eprints
01f2f012 //C 0011a    54 jmp	_pm_pes
//R 0011a #16 _pm_pes 0000f012
//G eprints
//P Sb401aee44acb _lib_segment_eprintf
01f2f015 //C 0011b    66 jmp	_pm_pesf
//R 0011b #16 _pm_pesf 0000f015
//G eprintf
//P Sedd6b6695436 _lib_segment_input_avail
01f2f008 //C 0011c    72 jmp	_pm_check_uart
//R 0011c #16 _pm_check_uart 0000f008
//G input_avail
//P S7592e12f2189 _lib_segment_getchar
0ded0000 //C 0011d    78 push	lr
//G getchar
0400f008 //C 0011e    80 call	_pm_check_uart
//R 0011e #24 _pm_check_uart 0000f008
//N gc_wait S7592e12f2189
41f2011e //C 0011f    81 jnc	gc_wait
//R 0011f #16 gc_wait 0000011e
0740ff40 //C 00120    82 ld	r4,UART.DR
//R 00120 #16 UART.DR 0000ff40
0ffd0000 //C 00121    83 pop	pc
//P S84a19e8ae015 _lib_segment_read
0740ff40 //C 00122    89 ld	r4,UART.DR
//R 00122 #16 UART.DR 0000ff40
//G read
00f00e00 //C 00123    90 ret
//F mon.asm
//P Sd14c348df59b _lib_segment_pmon
01f2f000 //C 00124    40 jmp	_pm_callin
//R 00124 #16 _pm_callin 0000f000
//G monitor
01f2f001 //C 00125    44 jmp	_pm_enter_by_uart
//R 00125 #16 _pm_enter_by_uart 0000f001
//G monitor_by_uart
0ded0000 //C 00126    48 push	lr
//G monitor_by_button
0400018b //C 00127    49 call	btn_posedge
//R 00127 #24 btn_posedge 0000018b
4ffd0000 //C 00128    50 NC pop	pc
04000124 //C 00129    51 call	monitor
//R 00129 #24 monitor 00000124
04000181 //C 0012a    52 call	btn_restart
//R 0012a #24 btn_restart 00000181
0ffd0000 //C 0012b    53 pop	pc
0ded0000 //C 0012c    57 push	lr
//G monitor_version
0d0d0000 //C 0012d    58 push	r0
0400f003 //C 0012e    59 call	_pm_version
//R 0012e #24 _pm_version 0000f003
00400000 //C 0012f    60 mov	r4,r0
0f0d0000 //C 00130    61 pop	r0
0ffd0000 //C 00131    62 pop	pc
//F bsp.asm
//P S45ec84dfaab0 _lib_segment_nr_to_mask
0d1d0000 //C 00132    26 push	r1
//G _nr_to_mask
010b001f //C 00133    27 btst	r0,0x1f		; max nr is 31
01120001 //C 00134    28 mvzl	r1,1		; mask for nr==0
020b0000 //C 00135    30 sz	r0		; is nr zero?
//N nr_to_mask_cyc S45ec84dfaab0
11f2013a //C 00136    31 jz	nr_to_mask_ret	; if yes, go out
//R 00136 #16 nr_to_mask_ret 0000013a
02180000 //C 00137    32 shl	r1		; shift mask up
0104ffff //C 00138    33 dec	r0		; decrement nr
01f20135 //C 00139    34 jmp	nr_to_mask_cyc	; check for zero
//R 00139 #16 nr_to_mask_cyc 00000135
00000100 //C 0013a    36 mov	r0,r1		; return mask in R0
//N nr_to_mask_ret S45ec84dfaab0
0f1d0000 //C 0013b    37 pop	r1
00f00e00 //C 0013c    38 ret
//P S38738b71c88c _lib_segment_edge
00000000 //C 0013d   120 ds	1
//+ 00000001
//N last_btn S38738b71c88c
00000000 //C 0013e   122 ds	1
//+ 00000001
//N last_sw S38738b71c88c
00000000 //C 0013f   124 ds	1
//+ 00000001
//N last_btn_down S38738b71c88c
00000000 //C 00140   126 ds	1
//+ 00000001
//N last_sw_down S38738b71c88c
00000000 //C 00141   128 db	0
//N last_btn_inited S38738b71c88c
00000000 //C 00142   130 db	0
//N last_sw_inited S38738b71c88c
0ded0000 //C 00143   141 push	lr
//G _lib_edge_detect
0d1d0000 //C 00144   142 push	r1
0d2d0000 //C 00145   143 push	r2
0d3d0000 //C 00146   144 push	r3
0d4d0000 //C 00147   145 push	r4
0d5d0000 //C 00148   146 push	r5
00500100 //C 00149   148 mov	r5,r1		; what edge to check
31f20154 //C 0014a   149 C jmp	init_sw
//R 0014a #16 init_sw 00000154
07100141 //C 0014b   151 ld	r1,last_btn_inited
//R 0014b #16 last_btn_inited 00000141
//N init_btn S38738b71c88c
021b0000 //C 0014c   152 sz	r1
21f2015d //C 0014d   153 jnz	pressed_inited
//R 0014d #16 pressed_inited 0000015d
01120001 //C 0014e   154 mvzl	r1,1
06100141 //C 0014f   155 st	r1,last_btn_inited
//R 0014f #16 last_btn_inited 00000141
0710ff20 //C 00150   156 ld	r1,GPIO.BTN
//R 00150 #16 GPIO.BTN 0000ff20
0610013d //C 00151   157 st	r1,last_btn
//R 00151 #16 last_btn 0000013d
0610013f //C 00152   158 st	r1,last_btn_down
//R 00152 #16 last_btn_down 0000013f
01f2017a //C 00153   159 jmp	pressed_false
//R 00153 #16 pressed_false 0000017a
07100142 //C 00154   161 ld	r1,last_sw_inited
//R 00154 #16 last_sw_inited 00000142
//N init_sw S38738b71c88c
021b0000 //C 00155   162 sz	r1
21f2015d //C 00156   163 jnz	pressed_inited
//R 00156 #16 pressed_inited 0000015d
01120001 //C 00157   164 mvzl	r1,1
06100142 //C 00158   165 st	r1,last_sw_inited
//R 00158 #16 last_sw_inited 00000142
0710ff10 //C 00159   166 ld	r1,GPIO.SW
//R 00159 #16 GPIO.SW 0000ff10
0610013e //C 0015a   167 st	r1,last_sw
//R 0015a #16 last_sw 0000013e
06100140 //C 0015b   168 st	r1,last_sw_down
//R 0015b #16 last_sw_down 00000140
01f2017a //C 0015c   169 jmp	pressed_false
//R 0015c #16 pressed_false 0000017a
4122ff20 //C 0015d   173 NC mvzl	r2,GPIO.BTN
//R 0015d #16 GPIO.BTN 0000ff20
//N pressed_inited S38738b71c88c
3122ff10 //C 0015e   174 C mvzl	r2,GPIO.SW
//R 0015e #16 GPIO.SW 0000ff10
31f20163 //C 0015f   175 jc	ch_sw
//R 0015f #16 ch_sw 00000163
025b0000 //C 00160   177 sz	r5
//N ch_btn S38738b71c88c
1112013d //C 00161   178 Z mvzl	r1,last_btn
//R 00161 #16 last_btn 0000013d
2112013f //C 00162   179 NZ mvzl	r1,last_btn_down
//R 00162 #16 last_btn_down 0000013f
025b0000 //C 00163   181 sz	r5
//N ch_sw S38738b71c88c
1112013e //C 00164   182 Z mvzl	r1,last_sw
//R 00164 #16 last_sw 0000013e
21120140 //C 00165   183 NZ mvzl	r1,last_sw_down
//R 00165 #16 last_sw_down 00000140
0e310000 //C 00166   187 ld	r3,r1
0e420000 //C 00167   188 ld	r4,r2
003f0000 //C 00168   190 and	r3,r0		; masked last
004f0000 //C 00169   191 and	r4,r0		; masked port
00380400 //C 0016a   192 cmp	r3,r4
11f2017a //C 0016b   193 EQ jmp	pressed_false
//R 0016b #16 pressed_false 0000017a
02040000 //C 0016c   194 not	r0		; negated mask
0e310000 //C 0016d   195 ld	r3,r1		; original last
003f0000 //C 0016e   196 and	r3,r0		; clear checked bit
003d0400 //C 0016f   197 or	r3,r4		; or with masked port
0c310000 //C 00170   198 st	r3,r1		; store new last value
025b0000 //C 00171   199 sz	r5
21f20176 //C 00172   200 jnz	check_release
//R 00172 #16 check_release 00000176
024b0000 //C 00173   202 sz	r4		; check new port value
//N check_push S38738b71c88c
11f2017a //C 00174   203 jz	pressed_false
//R 00174 #16 pressed_false 0000017a
21f20178 //C 00175   204 jnz	pressed_true
//R 00175 #16 pressed_true 00000178
024b0000 //C 00176   206 sz	r4
//N check_release S38738b71c88c
21f2017a //C 00177   207 jnz	pressed_false
//R 00177 #16 pressed_false 0000017a
020c0000 //C 00178   210 sec
//N pressed_true S38738b71c88c
01f2017b //C 00179   211 jmp	pressed_end
//R 00179 #16 pressed_end 0000017b
020d0000 //C 0017a   213 clc
//N pressed_false S38738b71c88c
0f5d0000 //C 0017b   215 pop	r5
//N pressed_end S38738b71c88c
0f4d0000 //C 0017c   216 pop	r4
0f3d0000 //C 0017d   217 pop	r3
0f2d0000 //C 0017e   218 pop	r2
0f1d0000 //C 0017f   219 pop	r1
0ffd0000 //C 00180   220 pop	pc
0d1d0000 //C 00181   225 push	r1
//G btn_restart
0710ff20 //C 00182   226 ld	r1,GPIO.BTN
//R 00182 #16 GPIO.BTN 0000ff20
0610013d //C 00183   227 st	r1,last_btn
//R 00183 #16 last_btn 0000013d
0f1d0000 //C 00184   228 pop	r1
00f00e00 //C 00185   229 ret
0d1d0000 //C 00186   233 push	r1
//G sw_restart
0710ff10 //C 00187   234 ld	r1,GPIO.SW
//R 00187 #16 GPIO.SW 0000ff10
0610013e //C 00188   235 st	r1,last_sw
//R 00188 #16 last_sw 0000013e
0f1d0000 //C 00189   236 pop	r1
00f00e00 //C 0018a   237 ret
//P Saed5ad4c4c92 _lib_segment_btn
0ded0000 //C 0018b   250 push	lr
//G btn_posedge
04000132 //C 0018c   251 call	_nr_to_mask
//R 0018c #24 _nr_to_mask 00000132
0d1d0000 //C 0018d   252 push	r1
01120000 //C 0018e   253 mvzl	r1,0
020d0000 //C 0018f   254 clc
04000143 //C 00190   255 call	_lib_edge_detect
//R 00190 #24 _lib_edge_detect 00000143
0f1d0000 //C 00191   256 pop	r1
0ffd0000 //C 00192   257 pop	pc
0ded0000 //C 00193   266 push	lr
//G btn_negedge
04000132 //C 00194   267 call	_nr_to_mask
//R 00194 #24 _nr_to_mask 00000132
0d1d0000 //C 00195   268 push	r1
01120001 //C 00196   269 mvzl	r1,1
020d0000 //C 00197   270 clc
04000143 //C 00198   271 call	_lib_edge_detect
//R 00198 #24 _lib_edge_detect 00000143
0f1d0000 //C 00199   272 pop	r1
0ffd0000 //C 0019a   273 pop	pc
0ded0000 //C 0019b   282 push	lr
//G btn_get
0d1d0000 //C 0019c   283 push	r1
04000132 //C 0019d   284 call	_nr_to_mask
//R 0019d #24 _nr_to_mask 00000132
0710ff20 //C 0019e   285 ld	r1,GPIO.BTN
//R 0019e #16 GPIO.BTN 0000ff20
001f0000 //C 0019f   286 and	r1,r0
120d0000 //C 001a0   287 Z clc
220c0000 //C 001a1   288 NZ sec
0f1d0000 //C 001a2   289 pop	r1
0ffd0000 //C 001a3   290 pop	pc
//H 47f8e56f
//E
